{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Your Book Title Your Book Title 1. Your Book Title Communication English Investment Scriptures 金刚经 Tool Aosp Building AS Building Chroot Clion Command Debug Skills Docker Gdb Git Phone Command Search Software Pc Settings Source Insight Tmux Linux 编译 02-编译weston Check List DRM系列_html 修 老罗Android之旅系列课件 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"communication/communication.html":{"url":"communication/communication.html","title":"Communication","keywords":"","body":"1. 总论2. 与人交流3. 学点政治4. 表达5. 项目管理6. 人员管理6.1. 催其他部门、其他公司的人7. 回怼人8. 对上：9. 对下10. 向领导做汇报10.1. 汇报之答辩11. communication 攻防11.1. 例子：希望延期交付11.2. 攻防之 被问问题 与人交流 学点政治 表达 项目管理 人员管理 催其他部门、其他公司的人 回怼人 对上： 对下 向领导做汇报 汇报之答辩 communication 攻防 例子：希望延期交付 攻防之 被问问题 1. 总论 与人交流、攻防、政治，也是结构 -------------------> 从结构上剖析一切！！！ 2. 与人交流 3. 学点政治 要摆正心态： 政治、表达、管理、交际等软实力 是比技术更技术的技术 ----------------------------> 原因在于： 其背后也是 ：结构 + 模型，但是难以用语言描述、不明确、没有反馈等等 ------------> 造成这门技术难以学习，成本高 4. 表达 表达是抽象-------> 具体应该是思维能力 -------> 再具体：说话思维能力 5. 项目管理 核心思想：约束： 明文写下来（签合同）--------- 让领导看到 进度跟踪： 每天早上组长拿个表格，记录一下今天计划123，明天早上和你一行一行对进展 表格管理： 姓名-------事务（1234）----------进展--------------计划完成时间--------------实际完成时间 会议表格： 签到表--------发群里--------奖惩措施 多人会议： 1、 一定要有纪要 ---------- 明文发 结论 + 代办项 2、纪要发邮件，抄送大领导 3、截图会议参与人员 对于慢的、进展不顺的: 1、发邮件，抄送大领导: 2、邮件格式 （1）...................项目进展日报 （2） 风险项（加红加粗） （3）计划 （4）各个模块完成进展 例子： 发项目日报：第一天就开始发（避免整人嫌疑） 要完成一个事项（比如 清理codeStyles），很多个部门或者模块都有(很容易造成很多模块都没完成)： 办法：杀鸡儆猴： 始终敲打 最多的那个 ----------> 针对多个，不如针对一个（针对多人，阻力会很大） 例子： 老马 6. 人员管理 安排的事情啥也不干。问就是没干完 忙： 就说你不能等靠要啊 你要主动起来 有问题拉人家解决 不是没给你说怎么办 你有问题怎么不说呢 6.1. 催其他部门、其他公司的人 -技巧： （1）管理之 共同，见【1】 （2）默认已经答应，见【2】 例子： zeng@deng 请确认一下源码是不是都能提供？ deng ： 主framework 可以，但rust部分目前是binary release！ dong： 这个我们要申请源码释放吧，我们要基于上面进行二次开发和定制的，一起建设【1】，你们看看怎么提供@deng 【2】 7. 回怼人 如果有人说怀疑你的事情： 觉得你做的不好 -----------> 来来来，你来设计一个 觉得做的慢 --------------> 协调你来做 反抛问题给他自己、 8. 对上： 策略: 给领导惊喜 ------> 超出预期 所以： 1、不要说自己做过，要有所保留（除非是争取某个东西的情况下） 2、做出的效果展示，要有所保留 例子： dapeng给领导汇报也是如此 9. 对下 敲打： 你要是不敢情趣，就算了。我找其他人 10. 向领导做汇报 1、目的： （1）汇报进展：要领导知道你在做什么 （2）要资源：没有进展的时候 2、形式----ppt：（已经验证很好） 做的好的地方，ppt展示自己的进展 3、频率： 至少一周一次 10.1. 汇报之答辩 展现出来的能力，和真实，没有太大的关系。比如wanglianglei 11. communication 攻防 下：性能问题，怎么解决？ 上的万能回答方法 ：先把功能做出来，然后再优化（先避开性能） -------------> 上的回答，其实是有问题的：如果性能是主要矛盾（其他矛盾已经确定ok），就不应该先避开 攻防之提要求： A提要求 -----> B明确拒绝 ----->A 要求一部分 11.1. 例子：希望延期交付 攻防防之春节请假。。。。。希望延期交付 ---------> 项目自然有人没请的 管理之 给其他人利 克服一下，努努力 ux标记的动作太靠后了，启动完成后，才做的标记。整个app启动的过程都没有用到bboost加速 -----------> 听了别人的话，不要跟着别人走。。。如何不跟？ 回到整体结构上，站在全局上，再审视之前的话 ---------> 这是两种Case: （1）之前做的前后台切换 （2）启动流程是另外一个case，并没有标记 11.2. 攻防之 被问问题 回避问题之纠正主次： 1、你这个问题太大了，问题的关键是 2、这个不重要，重要的是 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"English/English.html":{"url":"English/English.html","title":"English","keywords":"","body":"1. 写：2. 读2.1. 央化[ə]弱读的一种2.2. 央化[ə]：读弱2.3. 音标 读 央化[ə]弱读的一种 央化[ə]：读弱 音标 1. 写： 2. 读 th 不发音，连读 比如： I got in there myself once 2.1. 央化[ə]弱读的一种 you're we're ---》同your They're I have done it! I've done it! 一个人的听力，就是他的口语 2.2. 央化[ə]：读弱 英语要有主次： People say that communication is the key to any relationship. -------> that：thət -------> to：tə People don't say that. ---》强调：读 that Women say that ---》强调：读 that so that ---》强调：读 that once 次 of // 弱读 是 əv 重读是 2.3. 音标 ɑː ɔ: ɜː i: u: ʌ ɒ ə ɪ ʊ e æ eɪ aɪ ɔɪ ɪə eə ʊə əʊ aʊ p t k f θ s b d g v ð z ʃ h ts tʃ j tr ʒ r dz dʒ dr w m n ŋ l console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Investment/Investment.html":{"url":"Investment/Investment.html","title":"Investment","keywords":"","body":"1. 投资1.1. 投资原则：1.2. 常识：1.3. 网格交易1.4. 任何一件大事情，背后都会有经济活动1.5. 面向对象的思想：1.6. 区分突发性影响和永久性影响1.7. 段永平1.8. 倾城1.9. 林园：1.10. 买基金原则，朱少醒：1.11. 巴菲特：1.12. 高瓴1.13. 战争 投资原则： 常识： 网格交易 任何一件大事情，背后都会有经济活动 面向对象的思想： 区分突发性影响和永久性影响 段永平 倾城 林园： 买基金原则，朱少醒： 巴菲特： 高瓴 战争 1. 投资 1.1. 投资原则： -1、只相信数学： 用数学投资，把你所有的认知、操作 基于数学 2、找现在不合理，而未来又是必然的 3、有规律，就一定能挣钱： （1）大A规律：大背景是一个长期横盘震荡的市场 ​ 横盘震荡策略：（1）必须宽指基金（沪深300） ———-> 背后代表着国家意志 + 国家实力 ​ 注意：一定不能是个股，横盘震荡大背景下，个股受其他因素影响很大（政策影响、疫情影响、公司本身影响） ​ （2）低点买入：20% ​ ---------------> 已经验证 （2）美股规律：长期向上 ​ 策略：长期持有 ​ 最好也是宽指（纳斯达克指数）；个股：特别好的公司， ​ ---------------> 已经验证 4、上学和上班是一条狗链子，拴住人的一生，不得动弹，不得自由，不得富贵，不得清闲。 ----------------> 我这一生，最重要的事情: 破了这条链子 1.2. 常识： 常识： 1、一年挣得钱 = 一年的利润率 * 一年内换手率 所以，短期内的利润率高不可怕，立即还上就行 ——-> 一年的平均利润率很低 1.3. 网格交易 数学方法 ------> 数学的保证 -前提： 一直波动 + 不增长的股市 -------> A股特别适合 或者 单边增长的股市 -------> 美股 实战： 1.4. 任何一件大事情，背后都会有经济活动 ------>！！！！（思考自己可以做的事情，大局观，不要隐隐狗狗！！！） 对于大的行业而言--> 看行业线，行业能把握 瘟疫引起的: 增长是好事，萧条更是好事儿 回去画图，推理 小的东西看不到，但是大的东西是必然的，可预测的，所以，一定对大的东西不要麻木 比如，美国大选宣布总统，诺安八个点，这个我遇见了。。。但是没能及时卖掉 认知认知认知 站在2019年11月份，根据瘟疫可以预测：假设疫情时间一年（医疗、娱乐、互联网） 真实的： 娱乐行业： 有几个必然： 1、大的事件必然会引起波动：积极影响的行业、消极影响的行业---> 遇到社会性的大事，一定要与全行业联想 2、对积极影响的行业能赚钱：前期重仓买入 《---- 因为增长是必然的 3、对消极影响的行业，更容易挣钱，更保险 ----> 前期的下降必然的，后期因素消除更是必然，只是时间线有些长！！！！ ，所以长期定投这些行业 后期恢复更是必然！！！！ 4、疫情，同样也可以用于买房 1.5. 面向对象的思想： ------>要把所有发生的事情（对象）、与自己（对象）链接！！！！！！ 1.6. 区分突发性影响和永久性影响 对于突发性的大事件，如果长期一定会恢复-----> 这种稳赚不赔 永久性影响，比如公司业务逻辑变了-------> 永远不要碰！！！ 1.7. 段永平 抄段永平的作业！！！！ ----> 3月16号，腾讯股价增长22% 1.8. 倾城 一直预测2022年上半年一直下跌，准确预测到真正的底部，而不是阶段的底部！！！！！！！ 2022/5/2: 赛道股：白酒、医药、权重蓝筹，先涨，后面补跌 区别对待美股与中股1！！！！！ 中股票，所有消息，只是为了解释而找来的消息！！！！！涨跌与经济无关！！！！只与资金有关！！（国家放水、主力资金） 1.9. 林园： （1）未来30年医疗是主线！！！未来三年（21-24），医疗至少翻一番 （2）买垄断性公司！！！ 1.10. 买基金原则，朱少醒： 1、主要看好长期（3-5年以上）历史业绩都不错的基金经理：富国朱少醒、易方达张坤、交银三剑客 2、不要买太多基金：4-10个分散行业 3、长期持有, 三年以上维度！！！！！！！！！！！！！！！！！不适合短线！！！！朱少醒：我们不能买股票，如果你放在三年以上的时间维度，都应该投权益资产，三年以下就比较难说了。(放到10年以上)毫无疑问是权益资产，可以更集中到那种更长期优质的资产，你觉得置信度最好的公司，跟着公司一起慢慢变富。 4、一定要克制人的天性：追涨 + 杀跌！！！！杀跌是大忌!!!!!!! 5、 6，聪明投资者：你这12年来最赚钱的股票是什么？ 　　朱少醒：我平时不怎么看那个东西。 　　不知道你有没有看过一书上的说法，小孩画画通常有两种完全不同的状态：有的小孩边画边撕，画完就撕；还有的小孩画好了，稍好一些好的保存在那边。可能到最后，所有的画里，画的更好的是前者。投资和这个有点类似。我可能对过去的“亮点”不是特别在意，更多是看过程和未来，我享受过程，在这个过程中，反而有些教训，我会记得更清楚 从逻辑上看，最赚钱的应该是拿得最久的股票 12，聪明投资者：你一般会招什么样的人？ 　　朱少醒：研究员首先是品性要求，好的研究员还要独立思考，有开放的心态、很强的好奇心，做事有很强的韧性。智商在这个行业内从来不是瓶颈，做事情的坚韧度和毅力很重要 关于卖点：不可控的错误和可控的错误 　　15，聪明投资者：你怎么判断卖点？ 　　朱少醒：成长类投资的卖点，其实是带有艺术成分的，比较难量化、难有明确规则。 　　第一，不断去review原来的投资框架，买入之后，逻辑有没有发生变化。 　　然后，估值有没有达到你的判断，对于成长公司来讲，这方面的权重要稍微低一些，因为犯错概率也挺高的 喜欢纯粹专注把事情做到极致的人 　　29，聪明投资者：海内外，你最欣赏的投资人是谁？ 　　朱少醒：对我影响比较深的，是巴菲特和彼得林奇，可能我翻彼得林奇的书比巴菲特多一点，因为他跟我公募的行业属性有关 32，聪明投资者：你的价值观是什么？ 　　朱少醒：我没归纳过。我觉得，做投资可能跟做人方式有关，无论是我们公司的Business、还是投资，我都希望看得长远。第二，我比较喜欢能够非常纯粹专注把事情做到极致 35，聪明投资者：有时候热爱它，是因为成功给了你正反馈，会不会也是一种求证陷阱，制约了你尝试新的可能？ 　　朱少醒：只是享受成功带来的荣耀，跟热爱不一样。热爱就是你甚至没有看到曙光，老是碰壁，各种怀疑的时候，你觉得我就是喜欢，还能坚持，这才算。 1.11. 巴菲特： （1）赌指数基金就是赌国运 （2）只有傻子和偏执狂 才去预测市场的顶部和底部（即：方向大致正确！！！！！）不要看一时的涨与跌 价值投资《-------> 找市场中的便宜货（便宜指的是，价格/真实价值 低！！！！，不是价格低！！！） 如何找便宜货？ （1）所有人都恐慌的时候 ----> 绝大部分声音 1.12. 高瓴 ----> 逻辑：为什么要抄高瓴？？？因为高瓴价值投资！！！持有几年，所以季度报告延迟不影响！！！！（所以，林园不适合抄作业！！！） 关注：1、最大重仓股 2、大量新增最大重仓股！！！！3、大量减持 抓住主次----> 大量！！！！！ 减持的案例： 三季度，即在9月前卖掉的，10月底的新闻 ----> 最终可以看出，在9月10月走掉是很好的！！！ 为什么要抄袭？？？？因为我们与大机构信息不对称！！！！！！！ 1.13. 战争 乌克兰战争，会导致总体下降！！！ -----> 但是，黄金，原油会大涨（不是石油！！！） 2022年2月24日15时，据法新社消息，俄罗斯地面部队进入乌克兰。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Scriptures/":{"url":"Scriptures/","title":"Scriptures","keywords":"","body":"1. Introduction Introduction 1. Introduction console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Scriptures/金刚经.html":{"url":"Scriptures/金刚经.html","title":"金刚经","keywords":"","body":"1. 金刚经1.1. 正文 & 解释1.1.1. 第一品 法会因由分1.2. 参考1.3. 一些感悟2. 《古道清凉》3. 杂七杂八 正文 & 解释 第一品 法会因由分 参考 一些感悟 《古道清凉》 杂七杂八 1. 金刚经 1.1. 正文 & 解释 1.1.1. 第一品 法会因由分 如是我闻。一时佛在舍卫国祇树给孤独园。与大比丘众千二百五十人俱。尔时世尊食时。着衣持钵。入舍 卫大城乞食。于其城中次第乞已。还至本处。饭食讫。收衣钵。洗足已。敷座而坐。 注释： 1.2. 参考 https://www.youtube.com/@supu929 金刚经 1.3. 一些感悟 知识： 重视智慧，而不是识 经文：重义，而不是文字本身，不是形式本身 修持的根本：善护念（无论佛、道） 渡河之后，弃筏（学佛如此，学习知识也是如此） 人生不应该是容器，而是吸管（流过就流过了） https://youtu.be/t_uVU7fRCqk 暨南大学教授费勇告诉你不焦虑的活法 三句义：肯定 + 否定 是名 -------> 还其 本来的存在。。。。跳过 各种人类创造的概念！（名字、观念、说法、约束） 2. 《古道清凉》 https://www.bilibili.com/video/BV1m3411C7j5/?p=2&spm_id_from=pageDriver&vd_source=3eebd10b94a8a76eaf4b78bee8f23884 体悟： 乞食时，也要威仪 给食或是拒绝，是一样的 吃饭： 饭和菜是一样的，不能区别对待 --------> 没有分别心 吃饭时，只能看着饭，而且是只能看着要吃的那一块饭--------> 没有分别心 日中一时 3. 杂七杂八 意识的结构： https://www.youtube.com/watch?v=BXveOIR944A 笔是真实的，是因为强烈的意识的分别 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/":{"url":"Tool/","title":"Tool","keywords":"","body":"1. Introduction Introduction 1. Introduction console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/aospBuilding.html":{"url":"Tool/aospBuilding.html","title":"Aosp Building","keywords":"","body":"1. 目录2. AOSP编译2.1. Ubuntu16.04需要的依赖设置:2.1.1. repo下载安装2.2. 下载aosp2.2.1. 下载aosp source2.2.2. 如果需要某个特定的 Android 版本:2.3. AOSP编译刷入Pixel2.3.1. 编译aosp:2.3.2. 刷入镜像 :2.3.3. 进入开发者模式2.3.4. 编译模拟器2.4. 编译jar2.4.1. 编译framework.jar等jar2.4.2. Android系统目录下 各jar包作用2.5. -技巧：2.6. classes.jar编译2.7. So的编译2.7.1. 如何看cpp编到哪个so2.7.2. 为子系统重新单独编译动态库的方法2.8. WIFI联网2.8.1. wifi连接的前提2.8.2. 原生安卓 WiFi 网络受限、优化网速2.9. kernel如何编译？2.10. AOSP模拟器的编译2.10.1. 在aosp编译目录下启动2.10.2. 替换AS自带模拟器的img2.10.3. 实现能够导入jar2.10.4. emulator的一些特殊点2.10.5. 常用emulator命令：2.11. native实现clion跳转3. 编译AAOS 到pixel54. Android Automotive 14 编译模拟器5. Cuttlefish ---- 未成功5.1. 安装报错6. 问题：6.1. framework.jar导入手机后不生效问题6.2. framework.jar导入手机 + 删除arm等目录 仍然 后不生效问题6.3. mm cmd fails in /framework/base6.4. 编译报错6.5. 编译后没有64位，只有32位6.6. AOSP14 java断点调试 坑： 目录 AOSP编译 Ubuntu16.04需要的依赖设置: repo下载安装 下载aosp 下载aosp source 如果需要某个特定的 Android 版本: AOSP编译刷入Pixel 编译aosp: 刷入镜像 : 进入开发者模式 编译模拟器 编译jar 编译framework.jar等jar Android系统目录下 各jar包作用 -技巧： classes.jar编译 So的编译 如何看cpp编到哪个so 为子系统重新单独编译动态库的方法 WIFI联网 wifi连接的前提 原生安卓 WiFi 网络受限、优化网速 kernel如何编译？ AOSP模拟器的编译 在aosp编译目录下启动 替换AS自带模拟器的img 实现能够导入jar emulator的一些特殊点 常用emulator命令： native实现clion跳转 编译AAOS 到pixel5 Android Automotive 14 编译模拟器 Cuttlefish ---- 未成功 安装报错 问题： framework.jar导入手机后不生效问题 framework.jar导入手机 + 删除arm等目录 仍然 后不生效问题 mm cmd fails in /framework/base 编译报错 编译后没有64位，只有32位 AOSP14 java断点调试 坑： 1. 目录 2. AOSP编译 2.1. Ubuntu16.04需要的依赖设置: apt-get install openjdk-8-jdk apt-get install git ccache automake lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib python-networkx libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libc6-dev linux-libc-dev gcc-multilib g++-5-multilib libssl-dev $ sudo apt-get update $ sudo apt-get install git-core gnupg flex bison gperf build-essential $ sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 $ sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache $ sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4 sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev sudo apt-get install git-core gnupg flex bison gperf build-essential sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib sudo apt-get install libc6-dev-i386 sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4 sudo apt-get install lib32z-dev ccach 安装make aptitude install gcc automake autoconf libtool make aptitude install gcc gcc-c++ 2.1.1. repo下载安装 git clone https://mirrors.tuna.tsinghua.edu.cn/git/git-repo 2.2. 下载aosp 2.2.1. 下载aosp source 优选清华镜像 + linux开启代理 （为啥不开代理会失败呢？） repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-12.0.0_r28 repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-14.0.0_r28 ------------->验证OK repo sync -c -j32 //中科大 repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-8.0.0_r13 repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-10.0.0_r17 repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-12.0.0_r28 //google原生 repo init -u https://android.googlesource.com/platform/manifest -b android-12.0.0_r28 repo sync -c -j8 repo sync -c --no-tag -j4 也可以这样切换其他分支-----> 待验证？？？ repo init -b android-6.0.1_r63 可能遇到的问题： 问题1： error：如果提示无法连接到 gerrit.googlesource.com？ vim /bin/repo 修改! REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo' 问题2：fatal: unable to connect to mirrors.ustc.edu.cn: 打开linux侧代理 2.2.2. 如果需要某个特定的 Android 版本: https://source.android.com/docs/setup/reference/build-numbers#source-code-tags-and-builds ------> 有最新版本的要点： （1）不能是中文网站 https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds （2）不能翻译成中文 目前，安卓10使用版本： 安卓12使用版本： 安卓14使用版本： 2.3. AOSP编译刷入Pixel -------> 完美！！！，按照该教程，可行！ 注意一点: 驱动vender（刷真机，涉及到vender，不同机子，不同vender） https://blog.csdn.net/cl769796350/article/details/102676674?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param --------> 验证OK，但是文章加锁了 https://blog.csdn.net/learnframework/article/details/125269456 ------》 下载对应的vendor和驱动包 本人使用的是： pixel一代-------> 代号为sailfish pixel5 ----------> redfish 2.3.1. 编译aosp: source build/envsetup.sh lunch ------> 看一下有哪些选项，很多64版本的 aosp_sailfish-userdebug //这里选userdebug版本，拥有root权限 lunch aosp_sailfish-userdebug make -j8 2.3.2. 刷入镜像 : 切换到目录 /aosp/out/target/product/自己手机的代号 设置临时变量 set ANDROIDPRODUCT_OUT = H:\\dockerSharedFiles\\aosp_android1000_r17\\out\\product\\sailfish #进入fastboot模式 adb reboot bootloader （验证有没有进入：fastboot devices） # 自动刷入 -w双清 : fastboot flashall -w 重启手机 fastboot reboot 拷贝到本地， cp /home/chen/workingSpace/aosp/out/ /home/chen/workingSpace/local/ -R 设置变量：ANDROID_PRODUCT_OUT 添加一个 进入window的目录： 注意：adb要用1.0.41的，安卓studio自带即可： C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools 进入fastboot模式方式： 方式一：软件方式 adb reboot bootloader -------> 不一定能成功 方式二： 硬件方式： ​ https://blog.csdn.net/sinat_29315697/article/details/80607534 Google设备启动进入fastboot模式 2.3.3. 进入开发者模式 点击版本号 2.3.4. 编译模拟器 见后 2.4. 编译jar 2.4.1. 编译framework.jar等jar 编译某一个模块： https://blog.csdn.net/weixin_39914868/article/details/112402060 source build/envsetup.sh lunch aosp_sailfish-userdebug //这里选userdebug版本，拥有root权限 make framework -j8 归结： source build/envsetup.sh;lunch aosp_sailfish-userdebug; make framework -j8;python /home/chen/workingSpace/local/aosp_android1000_r17/python_install/replaceFiles/cpSo.py 2.4.2. Android系统目录下 各jar包作用 am.jar：终端下执行am命令时所需的java库。源码目录：framework/base/cmds/am android.policy.jar：锁屏界面需要用到的jar包，该包引用了android.test.runner.jar，源码目录：framework/base/policy ---------》没找到？？ android.test.runner.jar：测试应用所需的jar包，该包引用了core.jar,core-junit.ajr以及framework.jar，源码目录：framework/base/test-runner bmgr.jar：adb shell命令下对Android Device所有package备份和恢复的操作时所需的java库。官方文档：http://developer.android.com/guide/developing/tools/bmgr.html。不过这个android服务默认是Disabled，而且要backup的应用必须实现BackupAgent，在AndroidManifest.xml的application标签中加入android：backupAgent属性。源码目录：framework/base/cmds/bmgr bouncycastle.jar： java三方的密匙库，网上资料说用来apk签名、https链接之类，官网 ：http://www.bouncycastle.org/java.html com.android.future.usb.accessory.jar：用于管理USB的上层java库，在系统编译时hardware层会调用到。源码目录：frameworks/base/libs/usb com.android.location.provider.jar： com.android.nfc_extras.jar：NFC外部库。android/nfc/NfcAdapter.java会调用到包中的NfcAdapterExtras.java。源码目录：frameworks/base/nfc-extras core-junit.jar ：junit核心库，在运行*Test.apk时被调用。 core-tests*.jar：framework下的一系列测试jar包，不做测试时可删除。 core.jar：核心库，启动桌面时首先加载这个。源码目录： ext.jar：android外部三方扩展包，源码主要是external/nist-sip（java下的sip三方库）、external/apache-http（apache的java三方库）、external/tagsoup（符合SAX标准的HTML解析器）。其实这个jar包可以添加外部扩展jar包，只需在framework/base/Android.mk中的ext-dirs添加src目录即可。 framework-res.apk：android系统资源库。 framework.jar：android的sdk中核心代码。 ime.jar：ime命令所需jar包，用于查看当前话机输入法列表、设置输入法。源码目录：framework/base/cmds/ime input.jar：input命令所需的jar包，用于模拟按键输入。源码目录：framework/baes/cmds/input javax.obex.jar：java蓝牙API，用于对象交换协议。源码目录：framework/base/obex monkey.jar：执行monkey命令所需jar包。源码目录：framework/base/cmds/monkey pm.jar：执行pm命令所需的jar包，pm详情见adb shell pm，源码目录：framework/base/cmds/pm services.jar：话机框架层服务端的编译后jar包，配合libandroid_servers.so在话机启动时通过SystemServer以循环闭合管理的方式将各个service添加到ServiceManager中。源码目录：framework/base/service sqlite-jdbc.jar： sqlite的Java DataBase Connextivity jar包。 svc.jar：svc命令所需jar包，可硬用来管理wifi,power和data。源码目录：framework/base/cmds/svc 如何知道编译文件对应的jar： 1、网上搜索：编译core\\java\\com\\android\\internal\\policy\\DecorView.java -----> 编译后在out\\target\\product\\msm8909\\system\\framework目录将会出现android.policy.jar文件，然后执行下面命令替换系统文件 2、yangyunfan教程 2.5. -技巧： 法一： 不优 export OUT_DIR=/home/chenjinke/workingspace_disk2/out_andriod1400_r28 更改编译输出目录 -----------> 问题：在project以外，编译会失败 AOSP 设置编译输出目录 法二： 通用万能方法------移花接木（软连接） // 产物挪移到另一个磁盘里： ln -s /home/chen.gang42/workingSpace/myout /home/chen.gang42/workingSpace/aosp14/out 软连接 ------> 非常有用 （1）磁盘不够用时，将out产物直接输出到其他磁盘，节省磁盘100~200G！！！！！！ （2）不限于aosp的编译 注意： 创建软连接，必须是绝对路径！ 2.6. classes.jar编译 framework.jar原始没有打包加密的jar路径： \\out\\target\\common\\obj\\JAVA_LIBRARIES\\framework_intermediates\\classes.jar 基于此，可以做很多事情： 1、依赖跳转 2、依赖编译 3、依赖断点调试 2.7. So的编译 在android开发中，有时候需要编写一些C/C++代码，这时候就要用到JNI技术，我们需要将C/C++程序首先编译成so库，在java中通过native方法调用so库中的函数。 实现以上目的有三种方式： 1、单独编译so库文件，将它push到手机的system/lib目录下， 在java程序中通过loadLibrary加载so库。 2、使用NDK工具进行编译，需要配置NDK环境，然后通过Android Studio将其打包打APK中。 3、在Android源码环境中使用mm，so文件就能够打包到APK文件中，随着APK一起发布，而不是将so文件放到系统目录中。 2.7.1. 如何看cpp编到哪个so 方法一：so与路径的对应 https://blog.csdn.net/koumen3/article/details/50681575 折叠 libEGL.so------frameworks/native/opengl/libs/EGL/ libandroid.so——frameworks/base/native/android libandroid_runtime.so——frameworks/base/core/jni libandroidfw.so——frameworks/base/libs/androidfw libaudioutils.so——system/media/audio_utils libbinder.so——frameworks/native/libs/binder libbluedroid.so——system/bluetooth/bluedroid libc.so——bionic/libc libcamera_client.so——frameworks/av/camera libcorkscrew.so——system/core/libcorkscrew libcpustats.so——frameworks/native/libs/cpustats libcrypto.so——external/openssl libcutils.so——system/core/libcutils libdbus.so——external/dbus/dbus libdvm.so——dalvik/vm libemoji.so——frameworks/opt/emoji libETC1.so——frameworks/native/opengl/libs libgccdemangle——external/gcc-demangle libgui.so——frameworks/native/libs/gui libgabi++.so——abi/cpp libGLESv1_CM.so——frameworks/native/opengl/libs libharfbuzz.so——external/harfbuzz libhwui.so——frameworks/base/libs/hwui libhardware_legacy.so——hardware/libhardware_legacy libjpeg.so——external/jpeg libmedia.so——frameworks/av/media/libmedia libmedia_native.so——frameworks/av/media/libmedia_native libnetutils.so——system/core/libnetutils libstagefright_foundation.so——frameworks/av/media/libstagefright/foundation libsonivox.so——external/sonivox libspeexresampler——external/speex libstlport.so——external/stlport libssl.so——external/openssl libui.so——frameworks/native/libs/ui libutils.so——frameworks/native/libs/utils libusbhost.so——system/core/libusbhost 方法二：看andriod.bp（优秀） 方法三：破坏cpp文件，编译时会log出编译的目标 编译方法： //进入所需要的编译的目录，mm chen@58495cde205d:~/workingSpace/aosp_android1000_r17/frameworks/native/libs/binder$ mm // 编译生成的动态库在 out/target/product/xxxx/system/lib/ 目录下。使用以下命令更新设备上的库文件： adb push libaudioflinger.so /system/lib/ mm命令使用的前提: 启用 mm 等工具： 在同一个终端里面需要先在项目根目录下执行 source build/envsetup.sh 命令 2.7.2. 为子系统重新单独编译动态库的方法 https://blog.csdn.net/Qidi_Huang/article/details/53690139 2.8. WIFI联网 2.8.1. wifi连接的前提 -规定： 任何机器，刷完版本，第一件事情，就是同步时间(无论是否联网) --------> 因为这是联网的必要条件！！（即使能联网，也要同步，会有各种问题） 同步时间脚本1：： //setTime.py import os import datetime now = datetime.datetime.now() date_time = now.strftime(\"%m%d%H%M%Y.%S\") print(date_time) os.system(\"adb shell \\\"date %s\\\"\" % date_time) 同步时间脚本2：adb 命令 //先设置年月日 adb shell date %date:~0,4%-%date:~5,2%-%date:~8,2% set // 在设置时分秒 adb shell date %time:~0,2%:%time:~3,2%:%time:~6,2% set //验证 D:\\>adb shell date Sat Nov 27 12:41:25 GMT 2021 2.8.2. 原生安卓 WiFi 网络受限、优化网速 忽略： https://www.xiaoyi.vc/captive-portal.html 非ROOT方法 没有 ROOT 的安卓机可以借助 ADB 命令来修改，首先下载ADB工具包，然后手机开启USB调试模式，接着运行 CMD 输入下面的命令就可以了。 **# 删除默认的地址 adb shell settings delete global captive_portal_https_url adb shell settings delete global captive_portal_http_url # 修改新的地址 adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204 adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204 改完同样把手机切换飞行模式，再切换回来就可以了。如果需要其它服务器地址，自行修改，如MIUI 的是 http://connect.rom.miui.com/generate_204 地址。 注意两点： 1、改完同样把手机切换飞行模式 2、MIUI 的是 http://connect.rom.miui.com/generate_204 2.9. kernel如何编译？ TODO： 2.10. AOSP模拟器的编译 2.10.1. 在aosp编译目录下启动 编译产品aosp_sailfish //先初始化环境 source build/envsetup.sh lunch aosp_sailfish-userdebug USER@MACHINE:~/Android$ export PATH=$PATH:~/Android/out/host/linux-x86/bin export PATH=$PATH:~/workingSpace/local/aosp_android1000_r17/aosp_android1000_r17/out/host/linux-x86/bin USER@MACHINE:~/Android$ export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic export ANDROID_PRODUCT_OUT=~/workingSpace/local/aosp_android1000_r17/aosp_android1000_r17/out/target/product/generic USER@MACHINE:~/Android$ emulator //aosp_android12_00_r28: source build/envsetup.sh lunch aosp_bramble-userdebug export PATH=$PATH:~/workingSpace/aosp_android12_00_r28/out/host/linux-x86/bin ANDROID_PRODUCT_OUT=~/workingSpace/aosp_android12_00_r28/out/target/product/bramble/ emulator -qemu -machine virt ------------> 一直失败，没有成功过： 2.10.2. 替换AS自带模拟器的img 参考文章： https://blog.csdn.net/feng397041178/article/details/123731513 主要文章 ​ https://blog.csdn.net/mvp_Dawn/article/details/126848798 ​ https://blog.csdn.net/liaosongmao1/article/details/124843073 win下或linux下都可以，以win为例： （1）编译emulator_x86_64：（不是编译bramble等产品！） 编译命令：编译参考： 遇到的问题：lunch中，没有sdk_x86_64 编译选项 解决：https://blog.csdn.net/Q1302182594/article/details/125514065 https://blog.csdn.net/yongwn/article/details/121009506 source build/envsetup.sh lunch sdk_x86_64 // -------》 结果：out/target/product/emulator_x86_64/ 注意点： 1、out/target/product/emulator_x86_64/ ----> 注意将ramdisk-qemu.img,system-qemu.img,vendor-qemu.img这三个文件重命名为ramdisk.img,system.img,vendor.img。 2、替换：把win下 android-31\\google_apis\\x86_64下里的文件替换掉 C:\\Users\\用户名\\AppData\\Local\\Android\\Sdk\\system-images\\android-30\\google_apis_playstore\\x86_64 注意：两个目录下文件很像，是后者 Sdk\\system-images\\android-30\\google_apis下的 2.10.3. 实现能够导入jar adb remount失败： 参考：https://blog.csdn.net/mvp_Dawn/article/details/126848798 修改启动（增加了-writable-system），获取写权限： ::startEmulator.bat set emulator_exe=D:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\emulator\\emulator.exe %emulator_exe% -avd Pixel_5_API_31 -writable-system -memory 4096 ::-sysdir似乎没用 -sysdir D:\\Green_Sorft\\Android\\Sdk\\system-images\\android-30\\default\\x86_64-aosp 2.10.4. emulator的一些特殊点 由于编译的img是 lunch sdk_x86_64 ------> 所以： 1、后续编译 jar和 so 都需要基于 sdk_x86_64 2、导入jar前 需要删除 x86，而不是 arm adb shell rm -rf /system/framework/x86 adb shell rm -rf /system/framework/x86_64 adb shell rm -rf /system/framework/oat/ 2.10.5. 常用emulator命令： ::查看有哪些模拟器镜像 %emulator_exe% -list-avds %emulator_exe% -help： 折叠 D:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\emulator>%emulator_exe% -help Android Emulator usage: emulator [options] [-qemu args] options: -list-avds list available AVDs -sysdir search for system disk images in -system read initial system image from -vendor read initial vendor image from -writable-system make system & vendor image writable after 'adb remount' -delay-adb delay adb communication till boot completes -datadir write user data into -kernel use specific emulated kernel -ramdisk ramdisk image (default /ramdisk.img -image obsolete, use -system instead -initdata same as '-init-data ' -data data image (default /userdata-qemu.img -encryption-key read initial encryption key image from -logcat-output output file of logcat(default none) -partition-size system/data partition size in MBs -cache cache partition image (default is temporary file) -cache-size cache partition size in MBs -no-cache disable the cache partition -nocache same as -no-cache -sdcard SD card image (default /sdcard.img -quit-after-boot qeuit emulator after guest boots completely, or after timeout in seconds -qemu-top-dir Use the emulator in the specified dir (relative or absolute path) -monitor-adb monitor the adb messages between guest and host, default not -snapstorage file that contains all state snapshots (default /snapshots.img) -no-snapstorage do not mount a snapshot storage file (this disables all snapshot functionality) -snapshot name of snapshot within storage file for auto-start and auto-save (default 'default-boot') -no-snapshot perform a full boot and do not auto-save, but qemu vmload and vmsave operate on snapstorage -no-snapshot-save do not auto-save to snapshot on exit: abandon changed state -no-snapshot-load do not auto-start from snapshot: perform a full boot -snapshot-list show a list of available snapshots -no-snapshot-update-time do not try to correct snapshot time on restore -wipe-data reset the user data image (copy it from initdata) -avd use a specific android virtual device -avd-arch use a specific target architecture -skindir search skins in (default /skins) -skin select a given skin -no-skin deprecated: create an AVD with no skin instead -noskin same as -no-skin -memory physical RAM size in MBs -ui-only run only the UI feature requested -id assign an id to this virtual device (separate from the avd name) -cores Set number of CPU cores to emulator -accel Configure emulation acceleration -no-accel Same as '-accel off' -ranchu Use new emulator backend instead of the classic one -engine Select engine. auto|classic|qemu2 -netspeed maximum network download/upload speeds -netdelay network latency emulation -netfast disable network shaping -code-profile enable code profiling -show-kernel display kernel messages -shell enable root shell on current terminal -no-jni deprecated, see dalvik_vm_checkjni -nojni deprecated, see dalvik_vm_checkjni -dalvik-vm-checkjni Enable dalvik.vm.checkjni -logcat enable logcat output with given tags -log-nofilter Disable the duplicate log filter -no-audio disable audio support -noaudio same as -no-audio -audio use specific audio backend -radio redirect radio modem interface to character device -port TCP port that will be used for the console -ports , TCP ports used for the console and adb bridge -modem-simulator-port TCP port that will be used for android modem simulator -onion use overlay PNG image over screen -onion-alpha specify onion-skin translucency -onion-rotation 0|1|2|3 specify onion-skin rotation -dpi-device specify device's resolution in dpi (default DEFAULT_DEVICE_DPI) -scale scale emulator window (deprecated) -wifi-client-port connect to other emulator for WiFi forwarding -wifi-server-port listen to other emulator for WiFi forwarding -http-proxy make TCP connections through a HTTP/HTTPS proxy -timezone use this timezone instead of the host's default -change-language use this language instead of the current one. Restarts the framework. -change-country use this country instead of the current one. Restarts the framework. -change-locale use this locale instead of the current one. Restarts the framework. -dns-server use this DNS server(s) in the emulated system -net-tap use this TAP interface for networking -net-tap-script-up script to run when the TAP interface goes up -net-tap-script-down script to run when the TAP interface goes down -cpu-delay throttle CPU emulation -no-boot-anim disable animation for faster boot -no-window disable graphical window display -qt-hide-window Start QT window but hide window display -no-sim device has no SIM card -lowram device is a low ram device -version display emulator version number -no-passive-gps disable passive gps updates -gnss-file-path Use the specified filepath to read gnss data -gnss-grpc-port Use the specified port number to start grpc service to receive gnss data -virtio-console using virtio console as console -read-only allow running multiple instances of emulators on the same AVD, but cannot save snapshot. -is-restart specifies that this emulator was a restart, and to wait out before proceeding -report-console report console port to remote socket -gps redirect NMEA GPS to character device -shell-serial specific character device for root shell -tcpdump capture network packets to file -bootchart enable bootcharting -charmap use specific key character map -studio-params used by Android Studio to provide parameters -prop = set system property on boot -shared-net-id join the shared network, using IP address 10.1.2. -gpu set hardware OpenGLES emulation mode -use-host-vulkan use host for vulkan emulation regardless of 'gpu' mode -camera-back set emulation mode for a camera facing back -camera-front set emulation mode for a camera facing front -webcam-list lists web cameras available for emulation -virtualscene-poster = Load a png or jpeg image as a poster in the virtual scene -screen set emulated screen mode -force-32bit always use 32-bit emulator -selinux Set SELinux to either disabled or permissive mode -unix-pipe Add to the list of allowed Unix pipes -fixed-scale Use fixed 1:1 scale for the initial emulator window. -wait-for-debugger Pause on launch and wait for a debugger process to attach before resuming -skip-adb-auth Skip adb authentication dialogue -metrics-to-console Enable usage metrics and print the messages to stdout -metrics-collection Enable usage metrics and send them to google play -metrics-to-file Enable usage metrics and write the messages into specified file -detect-image-hang Enable the detection of system image hangs. -feature Force-enable or disable (-name) the features -icc-profile Use icc profile from specified file -sim-access-rules-file Use SIM access rules from specified file -phone-number Sets the phone number of the emulated device -acpi-config specify acpi device proprerties (hierarchical key=value pair) -fuchsia Run Fuchsia image. Bypasses android-specific setup; args after are treated as standard QEMU args -window-size Set window size for when bypassing android-specific setup. -allow-host-audio Allows sending of audio from audio input devices. Otherwise, zeroes out audio. -restart-when-stalled Allows restarting guest when it is stalled. -perf-stat Run periodic perf stat reporter in the background and write output to specified file. -share-vid Share current video state in shared memory region. -grpc TCP ports used for the gRPC bridge. -grpc-tls-key File with the private key used to enable gRPC TLS. -grpc-tls-cer File with the public X509 certificate used to enable gRPC TLS. -grpc-tls-ca File with the Certificate Authorities used to validate client certificates. -grpc-use-token Use the emulator console token for gRPC authentication. -grpc-use-jwt Use a signed JWT token for gRPC authentication. -idle-grpc-timeout Terminate the emulator if there is no gRPC activity within seconds. -waterfall Mode in which to run waterfall. -rootcanal-hci-port Rootcanal virtual hci port. -rootcanal-test-port Rootcanal testing port. -rootcanal-link-port Rootcanal link layer port. -rootcanal-link-ble-port Rootcanal link ble layer port. -rootcanal-controller-properties Rootcanal controller_properties.json file. -rootcanal-default-commands-file Rootcanal commands file to run on launch. -rootcanal-no-mesh Disable auto discovery and connection bluetooth enabled emulators -forward-vhci Enable the VHCI grpc forwarding service. -multidisplay index width height dpi flag config multiple displays. -google-maps-key API key to use with the Google Maps GUI. -no-location-ui Disable the location UI in the extended window. -use-keycode-forwarding Use keycode forwarding instead of host charmap translation. -record-session ,[,] Screen record the emulator session. -legacy-fake-camera Use legacy camera HAL for the emulated fake camera. -camera-hq-edge Enable high qualify edge processing for emulated camera. -no-direct-adb Use external adb executable for internal communication. -check-snapshot-loadable Check if a snasphot is loadable. -no-hidpi-scaling Disable HiDPI scaling of guest display on macOS devices. -no-mouse-reposition Do not reposition the mouse to emulator window center if mouse pointer gets out of the window. -guest-angle Enable guest ANGLE as system driver. -usb-passthrough VID PID BUS PORTS Host USB device Passthrough -append-userspace-opt key=value Appends a property which is passed to the userspace. -save-path Override save path for screenshot and bug report. The value will not be persisted on host OS. -no-nested-warnings Disable the warning dialog when emulator is running in nested virtualization. -wifi-tap use this TAP interface for Virtio Wi-Fi -wifi-tap-script-up script to run when the TAP interface goes up -wifi-tap-script-down script to run when the TAP interface goes down -wifi-vmnet This option is alias to vmnet, it is used for backward compatibility. -vmnet Use this network and enable vmnet framework as the backend of tap netdev on MacOS. -qemu args... pass arguments to qemu -qemu -h display qemu help -verbose same as '-debug-init' -debug enable/disable debug messages -debug- enable specific debug messages -debug-no- disable specific debug messages -help print this help -help- print option-specific help -help-disk-images about disk images -help-debug-tags debug tags for -debug -help-char-devices character specification -help-environment environment variables -help-virtual-device virtual device management -help-sdk-images about disk images when using the SDK -help-build-images about disk images when building Android -help-all prints all help content 2.11. native实现clion跳转 见《HowToReadCode.md》 编译：CMakeLists.txt https://blog.csdn.net/iamdy/article/details/106658583 https://cloud.tencent.com/developer/article/1645922 源码中的build/soong/docs/clion.md cpp断点调试 https://blog.csdn.net/iamdy/article/details/111272854?spm=1001.2014.3001.5501 3. 编译AAOS 到pixel5 https://juejin.cn/post/7316695933739089920 4. Android Automotive 14 编译模拟器 cd aosp source build/envsetup.sh lunch sdk_car_x86_64-userdebug make -j18 emulator ----------> 验证ok 参考：https://blog.csdn.net/ikunaaaaa/article/details/135659832 报错 & 解决： 报错 This user doesn‘t have permissions to use KVM (/dev/kvm) TODO: 解决一个屏幕问题，技巧：浏览器，连ip+端口 clound Android ---------> 本质：显示可以放到任意一个地方 https://zhuanlan.zhihu.com/p/686142622 Android Cuttlefish模拟器（Android Automotive） 5. Cuttlefish ---- 未成功 主要参考： https://blog.csdn.net/uestczhangyao/article/details/138612806?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-4-138612806-blog-136032910.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-4-138612806-blog-136032910.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=6 https://blog.csdn.net/weixin_41678668/article/details/136032910 从0到1学Binder-环境准备 https://www.jianshu.com/p/9e5fb290e6d0 https://github.com/aosp-riscv/working-group/blob/master/articles/20230111-cuttlefish-setup.md 搭建 Cuttlefish 运行环境 https://zhuanlan.zhihu.com/p/686142622 Android Cuttlefish模拟器（Android Automotive） 5.1. 安装报错 golang代理超时报错”https://proxy.golang.org/github.com/********** host has failed to respond vim frontend/src/goutil 修改为 export GO111MODULE=on export GOPROXY=https://goproxy.cn ---------> 验证OK 6. 问题： 6.1. framework.jar导入手机后不生效问题 原因一：-------》可能不需要 原因：在编译期间会将 jar 包中的 dex 文件编译为 odex、vdex 等文件。而这些文件并不存放在 framework.jar 中，所以会导致单独 push framework.jar 后，修改的内容不生效。 https://blog.csdn.net/yjsz2010/article/details/103705510 - 原因二：-----> 已经验证 push程序framework.jar失效问题： 先加载了/system/framework/arm目录和/system/framework/arm64目录中的boot.art和boot.oat -规定： 推framework.jar，必须先 删除arm和arm64、ota 即： adb shell rm -rf /system/framework/arm adb shell rm -rf /system/framework/arm64 adb shell rm -rf /system/framework/ota adb push framework.jar /system/framework 注意： 校验了部分framework.jar中的java文件的改动，不是所有 6.2. framework.jar导入手机 + 删除arm等目录 仍然 后不生效问题 有时候，framework.jar的变动，不只push framework.jar + 删除arm等目录 问题现象： 1、刚进入桌面，手机一直重启 2、看日志，各种runtime的报错 2024-01-09 15:41:46.188 15781-15896 zygote64 pid-15781 A runtime.cc:655] Runtime aborting... runtime.cc:655] All threads: runtime.cc:655] DALVIK THREADS (6): runtime.cc:655] \"main\" prio=10 tid=1 Runnable runtime.cc:655] | group=\"\" sCount=0 dsCount=0 flags=0 obj=0x12e40000 self=0xb4000079c42d97b0 runtime.cc:655] | sysTid=15781 nice=-20 cgrp=default sched=0/0 handle=0x7aeb1e64f8 runtime.cc:655] | state=R schedstat=( 797723069 16104393 128 ) utm=59 stm=20 core=7 HZ=100 runtime.cc:655] | stack=0x7fce43b000-0x7fce43d000 stackSize=8192KB runtime.cc:655] | held mutexes= \"mutator lock\"(shared held) runtime.cc:655] native: #00 pc 0000000000496628 /apex/com.android.art/lib64/libart.so (art::DumpNativeStack(std::__1::basic_ostream >&, int, BacktraceMap*, char const*, art::ArtMethod*, void*, bool)+140) runtime.cc:655] native: #01 pc 00000000005a0164 /apex/com.android.art/lib64/libart.so (art::Thread::DumpStack(std::__1::basic_ostream >&, bool, BacktraceMap*, bool) const+372) runtime.cc:655] native: #02 pc 00000000005bcda4 /apex/com.android.art/lib64/libart.so (art::DumpCheckpoint::Run(art::Thread*)+892) runtime.cc:655] native: #03 pc 00000000005a1020 /apex/com.android.art/lib64/libart.so (art::Thread::RunCheckpointFunction()+168) runtime.cc:655] native: #04 pc 000000000065d04c /apex/com.android.art/lib64/libart.so (artTestSuspendFromCode+68) runtime.cc:655] native: #05 pc 000000000013c91c /apex/com.android.art/lib64/libart.so (art_quick_test_suspend+156) runtime.cc:655] at java.lang.StringBuilder.append(StringBuilder.java:203) runtime.cc:655] at java.text.SimpleDateFormat.compile(SimpleDateFormat.java:912) runtime.cc:655] at java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:720) runtime.cc:655] at java.text.SimpleDateFormat.(SimpleDateFormat.java:691) runtime.cc:655] at java.text.SimpleDateFormat.(SimpleDateFormat.java:666) runtime.cc:655] at android.util.TimeUtils.(TimeUtils.java:46) runtime.cc:655] at java.lang.Class.classForName(Native method) 3、看日志zygote一直在重启 -最保险的是： out_sys\\target\\product\\mssi_spm_64_cn\\system\\framework\\ 下编译时间有改动的，都push进去！！！！！ 或者整个 framework\\路径push进去 adb push X:\\code\\chengang\\alps\\out_sys\\target\\product\\mssi_spm_64_cn\\system\\framework\\ /system/ 6.3. mm cmd fails in /framework/base On Android version 8.1.0 project specific build with mm cmd is failing in /framework/base [100% 1/1] out/soong/.bootstrap/bin/soong_build out/soong/build.ninja ninja: error: 'out/host/linux-x86/framework/host-libprotobuf-java-full.jar', needed by 'out/host/common/obj/JAVA_LIBRARIES/platformprotos_intermediates/classes-full-debug.jar', missing and no known rule to make it 12:55:19 ninja failed with: exit status 1 --------》 mm compiles all modules in a directory, you are missing a dependency of one of the modules. This is pretty common because regular builds do not compile tests or their dependencies. You can run 'hmm' to see commands that do take dependencies into account. In this case, you want 'mma': λ hmm | grep \" mm\" - mm: Builds all of the modules in the current directory, but not their dependencies. - mmm: Builds all of the modules in the supplied directories, but not their dependencies. ​ To limit the modules being built use the syntax: mmm dir/:target1,target2. - mma: Builds all of the modules in the current directory, and their dependencies. - mmma: Builds all of the modules in the supplied directories, and their dependencies. 6.4. 编译报错 6.5. 编译后没有64位，只有32位 ----》解决方法：主动lunch一次 --->设置编译目标带64版本的，比如2 6.6. AOSP14 java断点调试 坑： AS进行Choose Process调试, 看不到线程 需设置： adb shell setprop persist.debug.dalvik.vm.jdwp.enabled 1 adb reboot 具体原因： https://blog.csdn.net/liaosongmao1/article/details/137642046 安卓/aosp14上userdebug版本无法进行as调试debug问题 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/AS.html":{"url":"Tool/AS.html","title":"AS","keywords":"","body":"1. 目录2. AS:2.1. AS 搭建断点java调试环境2.2. 查看类族图谱（clion一样）2.3. 查看属性生命周期2.4. 查看调用栈2.5. 快速了解函数所处哪个内部类里:2.6. 快速搜索函数2.7. 代码飘红2.8. ide本身就可以完全替代 界面小乌龟2.8.1. 可以查看历史某一次变动：2.8.2. 类似于小乌龟的GUI-- commit 的操作:2.8.3. 利用 ide 替代小乌龟: commit & push2.9. iml 文件2.10. 体会2.11. 任意ide 如何默认 Terminal使用 bash?2.12. 内存泄漏的定位：2.13. AS的plugin2.13.1. AS高亮2.13.2. GitToolBox 工具----非常有用2.13.3. AS 搜索方法使用地方：2.14. AS 方法分割线2.15. 空白点的设置2.16. 关于 win 与 linux AS抢占的问题：2.16.1. 如何解决：2.16.2. 最优使用：2.17. 验证过的版本2.18. 问题2.18.1. 签名问题2.18.2. could not open selected VM debug port2.18.3. 代理配置问题：2.18.4. AS debug看不到进程2.19. 编译时报错： Failed to calculate the value of task ‘:unityLibrary:compileDebugJavaWithJavac‘2.20. 编译报错PKIX path building failed2.21. 编译报错 Could not find com.android.tools.build:gradle:8.0.2. Searched in the followi2.22. 编译报错constant expression required-case后参数报错2.23. Could not resolve all files for configuration ':classpath'.2.24. Android Studio 很卡 ----> 如何理解？2.25. AS gradle下载问题3. Device Monitor启动3.1. 快捷键4. AS技巧官方教程5. 格式 AS: AS 搭建断点java调试环境 查看类族图谱（clion一样） 查看属性生命周期 查看调用栈 快速了解函数所处哪个内部类里: 快速搜索函数 代码飘红 ide本身就可以完全替代 界面小乌龟 可以查看历史某一次变动： 类似于小乌龟的GUI-- commit 的操作: 利用 ide 替代小乌龟: commit & push iml 文件 体会 任意ide 如何默认 Terminal使用 bash? 内存泄漏的定位： AS的plugin AS高亮 GitToolBox 工具----非常有用 AS 搜索方法使用地方： AS 方法分割线 空白点的设置 关于 win 与 linux AS抢占的问题： 如何解决： 最优使用： 验证过的版本 问题 签名问题 could not open selected VM debug port 代理配置问题： 本质： AS debug看不到进程 编译时报错： Failed to calculate the value of task ‘:unityLibrary:compileDebugJavaWithJavac‘ 编译报错PKIX path building failed 编译报错 Could not find com.android.tools.build:gradle:8.0.2. Searched in the followi 编译报错constant expression required-case后参数报错 Could not resolve all files for configuration ':classpath'. Android Studio 很卡 ----> 如何理解？ AS gradle下载问题 Device Monitor启动 快捷键 AS技巧官方教程 格式 1. 目录 2. AS: 2.1. AS 搭建断点java调试环境 见 《HowToReadCode， 如何用源码搭建java断点调试环境》 2.2. 查看类族图谱（clion一样） 认识一个新类： 需要快速了解家族图谱，比如 view的0层家族图谱 0层向下族谱： 0层向上族谱： 可以copy文字版： 2.3. 查看属性生命周期 2.4. 查看调用栈 向上（或向下）调用栈: 可以copy文字版 2.5. 快速了解函数所处哪个内部类里: 小技巧： 快速了解函数所处哪个内部类里 快速了解一段代码在哪个函数里（大函数） 2.6. 快速搜索函数 structure中：点击任意位置都可以搜索（优） Ctrl +E 最近文件中：可以搜 ALT + F7： find usage 可以搜 2.7. 代码飘红 飘红 : aosp编译出的framework.jar作为lib依赖，给普通工程用。比如Z的工程 2.8. ide本身就可以完全替代 界面小乌龟 2.8.1. 可以查看历史某一次变动： AS 类似有界面小乌龟: 切换分支 ----》 commit 信息 ----》 commit 下所有变动文件（以及对应的commit网站）---》某变动下的diff 前提：打开的工程是一个git仓 ------》 似乎repo的根目录不行 2.8.2. 类似于小乌龟的GUI-- commit 的操作: 2.8.3. 利用 ide 替代小乌龟: commit & push https://birkhoffg.github.io/blog/posts/how-to-committing-code-using-intellij-idea/ 2.9. iml 文件 此文件非常重要，必须关注。作用： 1、跳转优先级配置。有时候优先跳转到jar或者class里，优先配置到source folder 2、在这里增加源码？？？？其他盘里的 iml文件来源： 1、设置中勾选 2、由gradle编译而来，gradle才是根 2.10. 体会 体会：（不仅限于git） 1、为什么要会用命令呢？-------主 因为它更本质，从而可以适用于所有场合（win、linux、linux无GUI的）---------> 一法通万法通，永不过时（GUI很可能变化） 为什么更本质? 因为GUI只是对 命令 的封装 2、为什么还需要一些界面呢？--------景，比如看一个文件的diff时 ---------> 优：主+次（某些场景，GUI） 2.11. 任意ide 如何默认 Terminal使用 bash? 任意ide（As 或 clion 等） Bash 好处： 1、 linux下命令 2、启动自动运行（自定义一些变量） 2.12. 内存泄漏的定位： https://www.jianshu.com/p/19fd60f40e92?from=groupmessage 1、粗略估计 adb shell dumpsys meminfo 包名 2、Android Profiler使用详解 2.13. AS的plugin 2.13.1. AS高亮 0、最优：使用高亮的插件MultiHighlight 1、ctrl + F 2、双击选中 --->会给你信息流 （计算机的本质） --->x信息最终给到了touchBounds ​ ---》在此之前x信息被getScrollx改写了 设置: 2.13.2. GitToolBox 工具----非常有用 1、查看某一行提交(以某一行为中心链接最新改动人、改动的commit) 2、查看当前行改动的commit下----所有相关改动 https://github.com/zielu/GitToolBox/wiki/Manual AS里找这个操作的快捷键 ALT + Shift + B --》查看commit所有信息 --------> 所以, 阅读工具对应的英文文档、github英文文档，很有效 图 查看该commit 所有改变 2.13.3. AS 搜索方法使用地方： ------> 修改为： alt + f 2.14. AS 方法分割线 https://www.yii666.com/article/612482.html?action=onAll 2.15. 空白点的设置 2.16. 关于 win 与 linux AS抢占的问题： 2.16.1. 如何解决： 由于docker的AS是通过win间接连接手机 同时都开AS，在使用debug、monitor、layout inspector等时会有抢占问题： 如何解决抢占：win下AS相对强一些 1、若要使用win的AS： ​ 关闭给linux的端口转发即可 2、若要使用linux的AS： ​ 关闭win侧的AS 2.16.2. 最优使用： 因目前电脑配置低：linux AS比较卡顿、layout inspector获取的结果比较差、切换中文比较蛮烦 ------------> 所以，AS主要用在win下（等后续增强pc配置） 2.17. 验证过的版本 2.18. 问题 Default Activity Not Found解决方法 需要一个没有任何界面、只有一个后台Service的程序。但是在安装的工程中出现如下问题：Default Activity Not Found，如图： 解决方法： 这是因为只有一个Service，没有默认的Activity导致的。 点击上方 Edit Configurations；选择General目录下的Launch Options，选中Nothing 2.18.1. 签名问题 the apk for your currently selected variant(app-release-unsigned.apk)is not signed. 签名问题。一般debug不签名 解决办法如下： 1.点击BuildVariants，然后设置BuildVariant为debug。 2.18.2. could not open selected VM debug port 启动monitor时，could not open selected VM debug port(8700) 怎么解决 先关掉as，打开monitor之后，再开AS https://blog.csdn.net/m0_49255099/article/details/107654950?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.not_use_machine_learn_pai monitor路径：C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\tools 点击monitor.bat 2.18.3. 代理配置问题： 《-------- dl.google.com:443 failed to respond http://www.baidu.com http://www.google.com 如果有的话： 本质： 方法一： 自然，方法二： 新版本:利用HTTP 注：自然也可以利用socks 2.18.4. AS debug看不到进程 方法： adb kill-server adb connect host.docker.internal:7788 2.19. 编译时报错： Failed to calculate the value of task ‘:unityLibrary:compileDebugJavaWithJavac‘ https://blog.csdn.net/EverNess010/article/details/129924721 2.20. 编译报错PKIX path building failed Exception in thread \"main\" javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target -----------------> 网上很多证书问题 本质还是网络问题，check 是否能连 google。 不能的话，需要配置代理： AS ----> settings ----> Proxy -----> HTTP: Host name: 10.9.26.12 port:8080 然后check 是否能连 google https://www.cnblogs.com/xsj1989/p/16822735.html settings.gradle配置，解决Plugin [id: 'com.android.application', version: '7.3.0', apply: false] was not found in any of the following sources 2.21. 编译报错 Could not find com.android.tools.build:gradle:8.0.2. Searched in the followi 验证OK的办法： 参考已经OK的工程，修改Maven仓库： // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { repositories { google() mavenCentral() gradlePluginPortal() } ...................... } allprojects { repositories { google() mavenCentral() } ...................... } 2.22. 编译报错constant expression required-case后参数报错 验证OK的办法： 在gradle.properties配置文件下添加如下代码即可解决 android.nonFinalResIds=false 参考：https://blog.csdn.net/mjh1667002013/article/details/134763804 2.23. Could not resolve all files for configuration ':classpath'. A problem occurred configuring root project 'openGL-Demo-master'. > Could not resolve all files for configuration ':classpath'. > Could not resolve com.android.tools.build:gradle:8.0.2. Required by: project : > No matching variant of com.android.tools.build:gradle:8.0.2 was found. The consumer was configured to find a library for use during runtime, compatible with Java 8, packaged as a jar, and its dependencies declared externally, as well as attribute 'org.gradle.plugin.api-version' with value '8.0' but: -----------------> 办法： AS版本flamingo，新建项目后building就报了这么个错误，解决方法：Ended up changing Gradle JDK to 11.。就是把项目的jdk版本升级到11就可以了。 File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle。 // 参考：https://blog.csdn.net/ximen250/article/details/8495845 2.24. Android Studio 很卡 ----> 如何理解？ 卡的原因： 任务管理器可以看到AS一直cpu很高 ---------> 既然很高，为啥很卡？ 原来这个很高是因为频繁触发GC！！！！！！！GC会打断系统运行 ---------> 解决办法： 避免频繁GC（增大内存） Android Studio 使用起来很卡，你们是如何解决的？ - 知乎 (zhihu.com) https://www.zhihu.com/question/32282404 一旦你的工程变大，IDE 运行时间稍长，内存就开始吃紧，频繁触发 GC，自然会卡。 修改： 修改android-studio/bin/studio.vmoptions studio64.vmoptions 两个文件的以下属性就可以了 -Xms2048m -Xmx2048m -XX:MaxPermSize=2048m -XX:ReservedCodeCacheSize=1024m 所以： cpu高水位（pc风扇转得快） --------- 很多时候，根因不是在cpu上，反而是mem上 2.25. AS gradle下载问题 方法一（优）： 配置代理：settings ---> proxy 方法二：(未验证) 使用国内的镜像： https://mirrors.cloud.tencent.com/gradle/ 配置： ~/workingspace/androidProject/MyApplication3/gradle/wrapper/gradle-wrapper.properties 图来源 参考：gradle不同版本下载太慢---腾讯做了国内镜像可以直接下载 方法三：(未验证) 手动下载配置：参考 “gradle project sync failed” maven下载问题： // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { repositories { maven { url \"\" } maven { url '' } maven { url '' } maven { url '' } maven { url '' } maven { url '' } maven { url '' } google() jcenter() } dependencies { classpath 'com.android.tools.build:gradle:3.6.0' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { maven { url \"\" } maven { url '' } maven { url '' } maven { url '' } maven { url '' } maven { url '' } maven { url '' } google() jcenter() } } task clean(type: Delete) { delete rootProject.buildDir } 3. Device Monitor启动 https://blog.csdn.net/weixin_55545941/article/details/130883921 3.1. 快捷键 代码展开折叠 Ctrl + + 展开代码（局部） Ctrl + - 折叠代码（局部） ---》很有用 Ctrl + Shift + + 展开所有代码 Ctrl + Shift + - 折叠所有代码 Ctrl + E 来替代 多行显示Tab -----> 极优 原因： 1、多行 占用 代码显示空间，很垃圾 2、多行 没有最近使用的一个stack排序，当文件显示超过四五个，没有优先级 -----》 造成很难找 3、人找文件是按照首字母去找， 多行，非常bug，眼睛要扫完整个文件名才能看下一个（Ctrl + E 从上到下，只需匹配首字母） ----》非常垃圾 在回退功能上：也尽量用 Ctrl + E 来替代 回退快捷键 原因：1、Ctrl + E 可以快速回到 最初的地方 2、逼迫自己记忆 是从 哪个房间过来的（无需记忆方法），利于结构的记忆 3、回退功能，对记忆有伤害： -规定： 禁止用多行，少用回退，多用Ctrl + E Ctrl + Shift +F ： find in files ---------> 文本查找（很优：1、不限于符号，全局查找 文本 2、有时候文件没有被source，没办法当做符号查） Shift + Shift ------> 全局 查找 符号 ALT + F (个人定制) -----> Find Usages:(很优： 当引用的地方非常多时，read、write已经极大缩小范围了) 4. AS技巧官方教程 TODO: https://www.youtube.com/hashtag/androiddevsummit 其中： https://www.youtube.com/watch?v=rjlhSDhFwzM&t=703s 5. 格式 折叠 网站上显示能折叠图片 qwqw qwqwq wqwq wqw wqwq wqw asdasdas sdasdadasd adasdasda asdsd asdasda adasda a console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/building.html":{"url":"Tool/building.html","title":"Building","keywords":"","body":"1. Andriod.mk1.1. 加日志2. Andriod.bp3. 转换4. 编译预置库的 Android.mk 文件5. 所有属性6. 编译 性能瓶颈的分析7. 参考： 加日志 Andriod.bp 转换 编译预置库的 Android.mk 文件 所有属性 编译 性能瓶颈的分析 参考： 1. Andriod.mk 1.1. 加日志 https://blog.csdn.net/weixin_44008788/article/details/127575769 https://blog.csdn.net/AS520213211314/article/details/78190224 makefile 打印变量的值 2. Andriod.bp Android.bp的出现就是为了替换Android.mk文件；bp跟mk文件不同，它是纯粹的配置，没有分支、循环等流程控制，不能做算数逻辑运算，如果需要控制逻辑，那么只能通过Go语言编写 3. 转换 https://blog.csdn.net/qq_18906227/article/details/120737147 4. 编译预置库的 Android.mk 文件 include $(CLEAR_VARS) LOCAL_MODULE := mi_display LOCAL_MODULE_CLASS := SHARED_LIBRARIES LOCAL_MODULE_SUFFIX := .so LOCAL_STRIP_MODULE := false LOCAL_MULTILIB := 64 LOCAL_MODULE_TAGS := optional LOCAL_SRC_FIFLES := 64/mi_display.so LOCAL_MODULE_PATH := $(PRODUCT_OUT)/system/lib64 include $(BUILD_PREBUILT) 作用是将 64/mi_display.so 编译预置到 $(PRODUCT_OUT)/system/lib64 目录下去 5. 所有属性 https://ci.android.com/builds/submitted/10761852/linux/latest/view/soong_build.html 6. 编译 性能瓶颈的分析 变量： cpu 、 mem、磁盘、编译参数-j24 make -j24: 可见, （1） cpu大部分时间在高水位 ​ （2）mem有剩余 ​ （3）磁盘长时间运行，但是都是低水位 ---------------> 结论：磁盘可以用差一些，不是瓶颈 -------------------> 所以优化方向：调节-j24 到 32，尽量让mem和CPU都充分使用 7. 参考： https://www.jianshu.com/p/91c8b60568e5 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/chroot.html":{"url":"Tool/chroot.html","title":"Chroot","keywords":"","body":"1. 目录2. Linux 命令：chroot2.1. chroot环境2.2. 例子2.3. 参考：3. Linux 系统启动过程4. linuxdeploy5. 源码：6. 背后的背后7. 抛开chroot 目录 Linux 命令：chroot chroot环境 例子 参考： Linux 系统启动过程 linuxdeploy 源码： 背后的背后 抛开chroot 1. 目录 2. Linux 命令：chroot --本质： 1、隔离文件系统，类似于 Namespace 2、 好处： 基于 隔离文件系统 --------> 自然：安全性：新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性 2.1. chroot环境 能力： （1）在x86下运行另一个 x86环境 （2）在x86下构造一个arm环境 ----------> 自然，可以编译arm的产物 如何搭建，见《chroot环境_weston运行.md》 2.2. 例子 语法： 2.3. 参考： 好文： https://blog.csdn.net/jiaoyangwm/article/details/130308127 【Linux 命令】chroot -----------------> 从最基本chroot来构建一个文件系统 其他： https://blog.csdn.net/IT8343/article/details/130570144 使用chroot定制系统 3. Linux 系统启动过程 https://blog.csdn.net/m0_65541699/article/details/127944130 Linux 系统启动过程 4. linuxdeploy linuxdeploy 的原材料可以是iso，img等 比如： linuxdeploy -arch arm -v ubuntu -f ext4 -p /sdcard/ubuntu.img 参考： https://www.python100.com/html/89007.html https://hunter1024.blog.csdn.net/article/details/128718170?spm=1001.2101.3001.6650.16&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-16-128718170-blog-112281860.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-16-128718170-blog-112281860.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=22&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzA0NjQwL2FydGljbGUvZGV0YWlscy8xMTIyODE4NjA%3D ------》 验证ok https://blog.csdn.net/qq_41709234/article/details/128570505 Debian系统--从零开始自制linux掌上电脑 https://www.cnblogs.com/twzy/p/15160824.html 小白自制Linux开发板 五. Debian文件系统制作,以及WIFI配置、交换分区配置 -------》 验证ok https://zhuanlan.zhihu.com/p/623363577 使用debootstrap手动安装debian系统 https://github.com/meefik/linuxdeploy-cli 5. 源码： https://github.com/meefik/linuxdeploy-cli 6. 背后的背后 7. 抛开chroot console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/clion.html":{"url":"Tool/clion.html","title":"Clion","keywords":"","body":"1. clion1.1. clion第一次打开工程, 生成cmakeList.txt1.2. clion目录结构1.3. clion win与linux代码同步1.4. clion cpp跳转问题：1.5. AOSP Native代码导入CLion，跳转问题1.6. clion加速1.6.1. exclude没用的文件目录1.6.2. clion关闭自动索引index1.6.3. 终极手段：保存.cache?1.7. 权限问题：1.8. 激活码 clion clion第一次打开工程, 生成cmakeList.txt clion目录结构 clion win与linux代码同步 clion cpp跳转问题： AOSP Native代码导入CLion，跳转问题 clion加速 exclude没用的文件目录 clion关闭自动索引index 终极手段：保存.cache? 权限问题： 激活码 [TOC] 1. clion 1.1. clion第一次打开工程, 生成cmakeList.txt 对于没有cmakeList.txt的工程，选择自动生成cmakeList.txt 特别注意：有些clion版本，没有New CMake Project from Sources https://qa.1r1g.com/sf/ask/4758331231/ 从现有源创建项目时如何在 Clion 中生成 CMakeLists.txt？ --------> 验证ok 1.2. clion目录结构 .idea index在这里 cmake-build-aospnativedebug cmake编译的一些信息 1.3. clion win与linux代码同步 https://cloud.tencent.com/developer/article/1406250 使用Clion优雅的完全远程自动同步和远程调试c++ 1.4. clion cpp跳转问题： cljon实现跳转几点结论： 1、clion通过.h链接，实现跳转 --->结论：保证能跳进所有的.h(看头文件，没有标红), 那么所有工程都OK 2、clion通过cmakelist编译链接，实现跳转的 对于gn编译的项目，clion自动生成cmakelist, 实现跳转－－> 可能会存在问题 根本原因：两套direction base导致的 第一套：gn编译，.c里的#include \"src/sksl/ir/SkSLProgram.h\" 以src上一层作为base 第二套：cmakeList。如果自动生成的CMakeLists.txt没有以上—层为base, 则无法找到SkSLProgram.h, 从而无法跳转 解决方法：cmakeList.txt中 添加include_directories(上一层路径） 以Skia源码为例： ---->说明include/core/SkBitmap.h的direction base没有include_directories进来 上一层即根目录 1.5. AOSP Native代码导入CLion，跳转问题 见： HowToReadCode 中《framework Native Clion 跳转环境（linux下）》 1.6. clion加速 1.6.1. exclude没用的文件目录 1.6.2. clion关闭自动索引index 1.6.3. 终极手段：保存.cache? du -sh * index最终存储在.cache中，可以看见，索引很大 ----> 如何不让它更新呢？ https://plugins.jetbrains.com/plugin/12334-gradianto/versions https://plugins.jetbrains.com/plugin/11938-one-dark-theme https://www.thinbug.com/q/36628483 验证： 重启ide： 1、index缓冲区大小是否变2、会不会重新index ---》备份缓冲区 1.7. 权限问题： Error running 'cpp_leetcode': Cannot run program \"G:\\working_pan\\PROJECTS\\cpp_leetcode\\cmake-build-debug\\cpp_leetcode.exe\" (in directory \"G:\\working_pan\\PROJECTS\\cpp_leetcode\\cmake-build-debug\"): CreateProcess error=5, 拒绝访问。 1、明明文件在 2、clion以管理员启动的 ------》关闭360！ 1.8. 激活码 Server address http://81.68.147.56:8163 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/command.html":{"url":"Tool/command.html","title":"Command","keywords":"","body":"1. 目录2. cmd(bat) 禁止使用2.1. 用户输入----set /p2.2. 定义变量set、字符串格式化2.3. 拼接字符串 %2.4. 使用bat批处理文件启动.exe程序2.5. pause 20s2.6. 休眠2.7. 文件夹操作2.8. 文件操作2.8.1. 写东西到文件里2.9. 获取系统时间，对字符串切片、拼接2.10. CMD执行命令行时卡住的问题（假卡）2.11. 已经编写好的脚本---复制源代码3. linux3.1. 查看linux版本3.2. 文件夹操作3.3. 搜索3.4. 搜索文本3.4.1. 搜索文件3.5. 搜索 MethodHandle 类对应的jar( 运行时处于哪个jar)-----极优3.6. sed 批量替换多个文件中的字符串3.7. 文件系统相关3.8. 自动换源3.9. Ubutu 安装可视化界面 ，win10远程3.10. Linux 系统初始化 自动化执行脚本3.10.1. 正常linux启动3.10.2. docker镜像下的linux3.11. Linux 用户登录 自动化执行脚本3.11.1. 自动执行3.12. 运行.sh3.12.1. 自定义函数，待使用3.13. 环境变量设置3.14. 环境path 设置3.15. win下 全面以linux 命令替代 cmd命令3.16. Linux设备间-----远程拷贝文件3.17. 压缩 & 解压缩3.18. linux目录共享给 win-------Samba3.18.1. Samba环境搭建：3.18.2. linux 共享多个目录 给win3.19. linux1 目录共享给 linux2-------sshfs3.20. linux目录共享给win-------sshfs（效果类似于samba）3.21. del_linux与win传输文件（不优）------FileZilla：3.22. win下看linux桌面--------xrdp3.22.1. 问题： 通过Xrdp 复制粘贴失效3.23. win下看linux桌面--------vnc3.24. linux突破物理内存的限制------swap分区3.25. 磁盘的挂载 与卸载3.26. 查看硬件固有信息3.26.1. win cpu3.26.2. win----wmic 命令3.27. 查看 硬件当前使用量3.27.1. 内存信息3.28. ls -h -la 这个命令，-h含义是什么3.29. 技巧之舍弃ls3.30. 进程status 为DN状态3.31. 命令化简之 alias3.32. ubuntu分享热点hotspot3.33. Linux系统连接手机USB网络共享后无法联网3.34. ubuntu物理机 usb线 adb连接手机3.35. Ubuntu换源3.36. 续行符号 ：3.37. TODO: 补充tty4. Linux程序一定 可以在安卓上运行5. vim5.1. 搜索： /5.2. 显示行数6. shell 或 MobaXterm6.1. shell中交互输入自动化6.2. 单个函数的传参6.3. wins 下shell自动化执行脚本6.4. shell 调用bat6.5. Shell脚本之字符串操作7. flutter8. 正则9. github10. GDB命令11. jdb命令11.1. 用threads查询所有线程：11.2. 选择你感兴趣的线程11.3. 暂停线程11.4. 显示调用堆栈11.5. 切换调用堆栈的frame:11.6. 设置断点11.6.1. 显示某个类的信息。11.6.2. 显示变量信息：11.6.3. 运行11.6.4. 查看源代码11.6.5. 查看当前加载的所有类11.6.6. 其他12. 已经制作好的脚本 备份12.1. 脚本制作的目标(重要！！):12.2. win下 myfun.sh12.3. linux下 .myfunction.sh12.4. 编译aosp相关命令的 封装12.5. copy本地代码到remote13. 格式 cmd(bat) 禁止使用 用户输入----set /p 定义变量set、字符串格式化 拼接字符串 % 使用bat批处理文件启动.exe程序 pause 20s 休眠 文件夹操作 文件操作 写东西到文件里 获取系统时间，对字符串切片、拼接 CMD执行命令行时卡住的问题（假卡） 已经编写好的脚本---复制源代码 linux 查看linux版本 文件夹操作 搜索 搜索文本 搜索文件 搜索 MethodHandle 类对应的jar( 运行时处于哪个jar)-----极优 sed 批量替换多个文件中的字符串 文件系统相关 自动换源 Ubutu 安装可视化界面 ，win10远程 Linux 系统初始化 自动化执行脚本 正常linux启动 docker镜像下的linux Linux 用户登录 自动化执行脚本 自动执行 运行.sh 自定义函数，待使用 环境变量设置 环境path 设置 win下 全面以linux 命令替代 cmd命令 Linux设备间-----远程拷贝文件 压缩 & 解压缩 linux目录共享给 win-------Samba Samba环境搭建： linux 共享多个目录 给win linux1 目录共享给 linux2-------sshfs linux目录共享给win-------sshfs（效果类似于samba） del_linux与win传输文件（不优）------FileZilla： win下看linux桌面--------xrdp 问题： 通过Xrdp 复制粘贴失效 win下看linux桌面--------vnc linux突破物理内存的限制------swap分区 磁盘的挂载 与卸载 查看硬件固有信息 win cpu win----wmic 命令 查看 硬件当前使用量 内存信息 ls -h -la 这个命令，-h含义是什么 技巧之舍弃ls 进程status 为DN状态 命令化简之 alias ubuntu分享热点hotspot Linux系统连接手机USB网络共享后无法联网 ubuntu物理机 usb线 adb连接手机 Ubuntu换源 续行符号 ： TODO: 补充tty Linux程序一定 可以在安卓上运行 vim 搜索： / 显示行数 shell 或 MobaXterm shell中交互输入自动化 单个函数的传参 wins 下shell自动化执行脚本 shell 调用bat Shell脚本之字符串操作 flutter 正则 github GDB命令 jdb命令 用threads查询所有线程： 选择你感兴趣的线程 暂停线程 显示调用堆栈 切换调用堆栈的frame: 设置断点 显示某个类的信息。 显示变量信息： 运行 查看源代码 查看当前加载的所有类 其他 已经制作好的脚本 备份 脚本制作的目标(重要！！): win下 myfun.sh linux下 .myfunction.sh 编译aosp相关命令的 封装 copy本地代码到remote 格式 1. 目录 2. cmd(bat) 禁止使用 2.1. 用户输入----set /p echo hello world echo please enter y/n: set /p flag= ::echo %flag% if /i %flag% == y (echo “y”)^ else (echo “stop the procedure!”) 2.2. 定义变量set、字符串格式化 // copy.bat :: 需要输入的参数 set sourcePathRoot=I:\\dockerSharedFiles\\aosp_android1000_r17\\aosp_android1000_r17 set subPath=frameworks\\base\\core md %subPath% xcopy %sourcePathRoot%\\%subPath% %subPath% /s/y/h 2.3. 拼接字符串 % 见上 2.4. 使用bat批处理文件启动.exe程序 // myStart.bat echo \"this is myStart.bat\" start E:\\Snipaste-2.7.3-Beta-x64\\Snipaste.exe start E:\\AutoHotKey\\myAutoHotKey.ahk @ping -n 20 127.1>nul 2>nul 2.5. pause 20s ::pause 20s @ping -n 20 127.1>nul 2>nul 2.6. 休眠 rundll32 powrprof.dll,SetSuspendState 2.7. 文件夹操作 //删除文件夹 rd /s /q D:\\local\\braphic //创建文件夹 ------>极优，可以创建多层 md D:\\local\\braphic //拷贝（参数h表明包括隐藏文件） 注意：拷贝 bra下所有文件，不包括bra本身 xcopy Y:\\foundation\\bra D:\\local\\braphic\\bra /s/y/h pause 2.8. 文件操作 1、删除（优） del \"H:\\docker_install\\DockerDesktop\\DockerDesktop.vhdx\" 可以解决删除系统文件时报错： 复制： 2.8.1. 写东西到文件里 例子1: del \"H:\\docker_install\\Dockerfile\\Dockerfile\" echo FROM %Image%>> H:\\docker_install\\Dockerfile\\Dockerfile echo ^RUN^ ^echo^ ^'hi, cg. this is a ubuntu16.04_aosp1000_r17 image, clion is ok'^ ^>^ /home/cg, /readme.txt>> H:\\docker_install\\Dockerfile\\Dockerfile 结果 注意：例子2: 结果： 2.9. 获取系统时间，对字符串切片、拼接 C:\\Users\\24234>date The current date is: 12/04/2022 Sun --->echo %date:~0,2% 从0位置开始，共四个 结果： 又一个Ex: C:\\Users\\24234>set date_time=\"%date:~6,4%%date:~0,2%%date:~3,2%%time:~0,2%%time:~3,2%\" C:\\Users\\24234>echo %date_time% \"202212041702\" C:\\Users\\24234> 2.10. CMD执行命令行时卡住的问题（假卡） https://blog.csdn.net/qq_34254642/article/details/104641591 Windows下命令行窗口默认开启了“快速编辑模式”，在执行命令的时候我们会不小心在窗口上点一下导致出现一个白色的光标，因为开启了“快速编辑模式”所以只要当鼠标点击Cmd窗口任何区域就会自动进入编辑模式，然后程序向控制台输入内容甚至执行程序都会被阻塞住，导致看到了命令执行停止的现象 2.11. 已经编写好的脚本---复制源代码 有时候，需要把源码从 // copy.bat :: 需要输入的参数 set sourcePathRoot=I:\\dockerSharedFiles\\aosp_android1000_r17\\aosp_android1000_r17 set subPath=frameworks\\base\\core md %subPath% xcopy %sourcePathRoot%\\%subPath% %subPath% /s/y/h 3. linux 3.1. 查看linux版本 cheng@67dddeb926ac:~$ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 18.04.5 LTS Release: 18.04 Codename: bionic 3.2. 文件夹操作 删除文件夹 rm -rf ........ 递归创建文件夹-p mkdir -p files1/files2 拷贝： //拷贝文件夹A下所有文件 到 文件夹B下 cp -r /home/packageA/* /home/cp/packageB/ 或 cp -r /home/packageA/. /home/cp/packageB/ //拷贝文件夹A 到 文件夹B ----> packageB文件夹下就有packageA文件夹 cp -r /home/packageA /home/packageB --------> 简言之：下 即 / 大文件cp，显示进度： rsync -v -r -h --progress KDE-Dev-Mobile-test.ova /data/chenjinke sending incremental file list KDE-Dev-Mobile-test.ova 10.56G 8% 59.09MB/s 0:29:37 参考： https://www.dbs724.com/131021.html Linux下CP命令显示进度的全攻略（linuxcp显示进度）-数据运维技术 (dbs724.com) 查看文件夹大小（在当前文件夹下） du -sh 3.3. 搜索 关于搜索文件、搜索文本内容， 规定： -禁止在window下搜索文件、 -禁止在IDE中搜索文本（IDE 本身可能File不全、很多File里的文本搜不到） ---------> win也必须执行linux命令 规定： linux的搜索，优很高的精确性 -----> 可以用来判定有无 3.4. 搜索文本 范围：view.java文件 grep “baidu” -nr view.java 文件范围：路径下所有文件 grep “baidu*” -nr ./ 显示范围： grep -C 5 ........ 显示上下5行 grep -B 5 ........ 显示前5行 grep -A 5 ........ 显示后5行 特别注意：grep可以搜二进制文件so的内容！！！！！！ $ grep \"chenjinke\" -nr ./ Binary file ./src/CMakeFiles/kwin.dir/effectloader.cpp.o matches Binary file ./src/CMakeFiles/kwin.dir/workspace.cpp.o matches Binary file ./bin/libkwin.so.5.27.4 matches ---------------------------> 应用技巧： 可以确定机器中的so是否有自己的改动(同反编译jar文件) 3.4.1. 搜索文件 find ./ -name \"View*\" 3.5. 搜索 MethodHandle 类对应的jar( 运行时处于哪个jar)-----极优 万能:查找目录下所有含 MethodHandle.class的jar文件 脚本一：验证OK find . -iname \"*.jar\" | while read jarfile; do jar -tf $jarfile | grep \"MethodHandle.class\" if [ $? -eq 0 ] then echo \"=====find class in jar: \"$jarfile fi done 结果： java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/mmodules/core_platform_api/core.platform.api.stubs/android_common/turbine/core.platform.api.stubs.jar java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/mmodules/core_platform_api/core.platform.api.stubs/android_common/javac/core.platform.api.stubs.jar java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/core-all-system-modules/android_common/modules/module.jar java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/core-oj/android_common/turbine-combined/core-oj.jar java/lang/invoke/MethodHandle.class META-INF/TRANSITIVE/java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/core-oj/android_common/turbine/core-oj.jar // -----> 正确的结果 java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/core-oj/android_common/withres/core-oj.jar java/lang/invoke/MethodHandle.class =====find class in jar: ./soong/.intermediates/libcore/core-oj/android_common/javac/core-oj.jar 一法通万法： 1、手机文件系统中直接搜 ------> 一般情况下，搜不出来 -技巧： 2、1如果不行，把 system/framework 、system/apex 拉出来放到 linux下 脚本二：TODO: 脚本有问题！！！！ #!/bin/sh find_dir=$1 find_key=$2 jars=`find $find_dir -name '*.jar'` for jar in $jars do ret=`jar tvf $jar | grep $find_key` if [ \"$?\" = \"0\" ]; then echo -e \"\\\\e[1;34m${jar}\\\\e[0m: \\\\n\\\\e[2;34m${ret}\\\\e[0m\" fi done wars=`find $find_dir -name '*.war'` for war in $wars do ret=`jar tvf $war | grep $find_key` if [ \"$?\" = \"0\" ]; then echo -e \"\\\\e[1;34m${war}\\\\e[0m: \\\\n\\\\e[2;34m${ret}\\\\e[0m\" fi done -----------------> 执行： ./find_class.sh ./com.android.art.debug MethodHandle 3.6. sed 批量替换多个文件中的字符串 原文： https://www.runoob.com/w3cnote/linux-findtoreplace.html 语法格式 sed -i \"s/原字符串/新字符串/g\" `grep 原字符串 -rl 所在目录` 例子： 在当前目录下查找包含 baidu 的字符串，并将字符串 baidu 替换为 runoob sed -i \"s/baidu/runoob/g\" `grep \"baidu\" -rl ./` 批量替换网址 libs.baidu.com 为 cdn.static.runoob.com： sed -i \"s/https:\\/\\/libs.baidu.com/https:\\/\\/cdn.static.runoob.com\\/libs/g\" `grep -rl \"libs.baidu.com\" ./` 3.7. 文件系统相关 df -a disk free 文件系统的free情况（空间使用情况）（虚拟文件系统，如proc和sysfs） df -T /dev/cpu T是Type 显示文件 所处的文件系统类型 mount 挂载文件系统 -------> 指定 目录 mount 显示已挂载的文件系统 mount /dev/sdb1 /mnt/data 挂设备 -----> 目录 -记忆：mount骑上 -----> 一个文件系统 “骑” 在另一个上面，即挂载 3.8. 自动换源 https://cloud.tencent.com/developer/article/1880981 3.9. Ubutu 安装可视化界面 ，win10远程 1、步骤 https://blog.csdn.net/qq_15211883/article/details/105314929 windows 远程 ubuntu 桌面,遇到花屏问题的解决方法 https://blog.csdn.net/badboy_1990/article/details/121412618 Ubuntu Server 20.04安装桌面(图形界面)以及远程桌面 2、远程连接 或直接用window的远程桌面登录:输入ip 用户名,密码 注意点：安装xfce4 TODO: 当docker宿主在window上，这样连不上 3.10. Linux 系统初始化 自动化执行脚本 注：以下都是 系统初始化 级别的，不是用户登录级别的（只有一个系统初始化，但是可以有很多个 用户登录） 参考： https://blog.csdn.net/weixin_43772810/article/details/126760777 Ubuntu 20.04 设置开机自启脚本 3.10.1. 正常linux启动 使用 systemctl： https://blog.csdn.net/ny19000314/article/details/128833491?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-128833491-blog-127485170.235%5Ev36%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-128833491-blog-127485170.235%5Ev36%5Epc_relevant_default_base3&utm_relevant_index=6 3.10.2. docker镜像下的linux 参考： https://www.jianshu.com/p/ba9860bec1d4 https://blog.csdn.net/qq_42926722/article/details/127052028 Docker容器进入的4种方式 无法使用systemctl，只能通过docker exec： docker run --detach ............. docker exec test_my /bin/bash /home/cjk/start.sh .......... //start.sh封装你想要 开机执行的一切操作 一个注意点： --detach https://blog.csdn.net/F7ANTY/article/details/112384645 docker run --detach 正常情况下，run之后直接attach，进入容器了（run之后的脚本没法执行）: --detach使得不进入容器 没有detach时，会attach： 3.11. Linux 用户登录 自动化执行脚本 注：以下都是 用户登录 级别的，即: 新增一个用户登录，执行一次 3.11.1. 自动执行 先科普下 Linux 系统的四（六）个类似却又不同的文件： /etc/profile：系统配置文件，用户登录时读取一次 /etc/bash.bashrc：系统配置文件 ，用户登录时读取一次，每次打开一个新终端会话时读取一次 ~/.profile（~/.bash_profile、~/.bash_login）：用户配置文件，用户登录时读取一次 ~/.bashrc：用户配置文件，用户登录时读取一次，每次打开一个新终端会话时读取一次 注意： 系统配置文件作用于全局，而用户配置文件仅针对当前登录的用户 先读取系统配置文件，再读取用户配置文件，用户配置文件的变量和表达式等都继承自系统配置文件 我是 Ubuntu OS，如果你是 Red Hat OS，请将 /etc/bash.bashrc 改成 /etc/bashrc Ubuntu 本身没有 ~/.bash_profile，需要你自己创建同名文件，它只对 bash 有效，而 ~/.profile 作用于任何绑定的 shell 终端 对于 ~/.bash_profile、~/.bash_login、~/.profile，如果终端绑定的是 bash，则按照我书写的顺序进行读取（如果存在，就不继续读取） - 出于个性化和最小干预原则考虑，通常我们只对 ~/ 目录下的终端配置文件进行读写操作，也就是 ~/.profile 每次登录只读取一次 ~/.bashrc 除了登录时读取，每次打开终端，执行 shell script 时都会读取一次 -----> 一句话总结：优先用~/.profile 和 ~/.bashrc 参考： https://blog.csdn.net/Jessie_Lian/article/details/107917658?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-107917658-blog-115304472.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-107917658-blog-115304472.pc_relevant_recovery_v2&utm_relevant_index=5 Linux开机自动化执行脚本的四种方法（真实案例分享） 3.12. 运行.sh 标准： sh hello.sh TODO: 如何双击执行呢？ 3.12.1. 自定义函数，待使用 source + .sh 例子： 见 TODO: 自定義的function，如何自动补全？ 3.13. 环境变量设置 临时 1、设置export export ALL_PROXY='socks5://172.20.224.1:15901' 2、查看当前环境变量env （自然） 3、删除 unset unset ALL_PROXY 永久： 通过软连接 ln -s -f /usr/local/python-2.7.16/bin/python /usr/bin/python 软链接 3.14. 环境path 设置 vim ~/.bashrc 加入 // 可执行文件 的环境变量 export PATH=/home/chen.gang42/workingspace/Sdk/platform-tools:$PATH // 动态库 的环境变量 export LD_LIBRARY_PATH=/home/chen.gang42/workingspace/software/QT5_6_2/5.6/gcc_64/lib 注意：动态库后面不需要加 :$LD_LIBRARY_PATH ​ 因为系统环境里，没有初始化这个值。加了，会导致 LD_LIBRARY_PATH=/home/chen.gang42/workingspace/software/QT5_6_2/5.6/gcc_64/lib: ----> 错误 3.15. win下 全面以linux 命令替代 cmd命令 利用mobaXterm中bash，可以找到win所有路径 ----> 所以，都可以替代 关键问题： //Windows路径----> Linux的路径 转化： function my_win2linux_path { # usage: my_win2linux_path \"C:\\Users\\asus\\Anaconda3\" win_path=$1 # 脚本的第一个参数就是windows路径 #win_path=\"C:\\Users\\asus\\Anaconda3\" # 一个示例路径 tmp_path=${win_path/:/} # 将冒号删掉 tmp_path=${tmp_path//\\\\/\\/} # 将\\\\替换为/ disk_id=${tmp_path:0:1} # 取出第一个字母，也就是C盘的C，冒号后面第一个0指的是从下标为0的地方开始提取，第二个冒号后面的1表示提取一个字母 disk_id=$(echo $disk_id | tr [:upper:] [:lower:]) # 大写转小写 #echo $disk_id other_path=${tmp_path:1} # 路径中除了磁盘以外的部分 linux_path=\"/drives/\"${disk_id}${other_path} # 需要将/mnt/接在路径最前方 echo \"windows path is \"${win_path} echo \"linux path is \"${linux_path} } 3.16. Linux设备间-----远程拷贝文件 - 从本地主机复制文件至远程节点 // 验证ok scp local_file remote_username@remote_ip:remote_folder scp local_file remote_username@remote_ip:remote_file scp local_file remote_ip:remote_folder scp local_file remote_ip:remote_file - 从远程节点复制文件至本地主机 scp remote_username@remote_ip:remote_file local_folder scp remote_username@remote_ip:remote_file local_file scp remote_ip:remote_file local_folder scp remote_ip:remote_file local_file - 从本地主机复制目录至远程节点 // 验证ok ----> 优选 scp -r local_folder remote_username@remote_ip:remote_folder scp -r local_folder remote_ip:remote_folder - 从远程节点复制目录至本地主机 scp -r remote_username@remote_ip:remote_folder local_folder scp -r remote_ip:remote_folder local_folder scp------------secure copy 安全拷贝 ​ 使用的是SSH协议 例子： scp -r alps2.tar non.jinxi@10.82.254.194:/home/non.jinxi/code/chenjinke 参考：https://blog.csdn.net/xuwenpeng/article/details/133338342 Linux学习之远程拷贝数据命令 3.17. 压缩 & 解压缩 //压缩： tar -cvf test.tar test/* 　 //归档test目录下所有文件 //解 tar -xvf test.tar tar -xvf test.tar -C ./laji //到特定目录 3.18. linux目录共享给 win-------Samba 3.18.1. Samba环境搭建： https://blog.csdn.net/weixin_44147894/article/details/130225195 笔记-Samba服务器的安装与配置 -------> 验证ok 3.18.2. linux 共享多个目录 给win 场景： linux有多个磁盘，没有挂在同一路径下面 参考： https://blog.csdn.net/qq_45875853/article/details/134601490#:~:text=%E6%96%87%E4%BB%B6%E5%A4%B9%E4%BA%86%E3%80%82-,%E5%85%B1%E4%BA%AB%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9,-%E5%85%B1%E4%BA%AB%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6 保存文件后，重启Samba服务使配置生效： sudo systemctl restart smbd sudo systemctl restart nmbd 3.19. linux1 目录共享给 linux2-------sshfs 注意： linux2可以是 win下的虚拟机 win里有个linux虚拟机， （1）在本地虚拟机敲入： 远程 本地 sudo sshfs -p 2002 -o cache=yes,allow_other non.jinxi@10.81.19.141:/data/non.jinxi /home/jx_nong/141server sudo sshfs -p 22 -o cache=yes,allow_other non.jinxi@10.85.251.194:/home/non.jinxi/code /home/chenjinke/workingSpace/nongRemote sudo sshfs -p 2002 -o cache=yes,allow_other chen.jinke42@10.81.19.141:/data/chen.jinke42/workingspace /home/chenjinke/workingSpace/chenjinke141 注意：原理是通过ssh链接的，所以 1、远端要有ssh服务 2、ssh的端口要对 （2）然后输入远程Linux密码 （如果sshfs找不到，换阿里源再sudo apt install sshfs） （3）刷新：cd上一级 ------------------> 本地PC任何写入加码， 如何绕过？ 方法一：思想：通过141绕过win对写的限制： （1）win对其他所有机器写有限制 （2）对linux141没有 ---->绕过点 （3）通过中间linux来同步linux141和linux_target 最终结果： 写入linux141代码，在linux_target上编译（通过中间linux同步） -------> 可见，各取所长 方法二：两个linux之间直接同步 -------> 前提：？？？？？？ 3.20. linux目录共享给win-------sshfs（效果类似于samba） 1、sshfs 2、Samba 1、 安装WinFsp 和 SSHFS-Win 2、添加映射： 例子：将docker容器内 文件夹分享给宿主win 验证OK： \\\\sshfs.r\\chenjinke@127.0.0.1!20000\\home\\chenjinke //特别注意： （1）端口号 前为！ // (2) 20000是因为 20000映射到linux 20 // 127.0.0.1!20000 是window ssh登录docker容器的入口 注意： inux不需要做任何事情------> 原因：原理基于ssh的，本来就OK 所以： samba搞不定的情况下，可以用sshfs 参考： https://blog.csdn.net/guyuealian/article/details/128790112 Windows sshfs挂载远程文件夹 https://blog.csdn.net/Jlcczhangxu/article/details/130642005?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-130642005-blog-130420133.235%5Ev40%5Epc_relevant_rights_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-130642005-blog-130420133.235%5Ev40%5Epc_relevant_rights_sort&utm_relevant_index=16 window映射带端口号的linux服务器到本地 3.21. del_linux与win传输文件（不优）------FileZilla： 即：异步共享 作用： 补充Samba、sshfs -------> 实时 教程：--------------> 验证ok 如果ssh功能ok，在新建站点时，协议选择 FTP-ssh ---------》 原理：基于ssh， 好处：不用在server端新配置FTP服务 参考： https://juejin.cn/post/7186588997664112696 FileZilla非实时性：手动上传与下载 参考：https://blog.csdn.net/m0_73192864/article/details/135271902 3.22. win下看linux桌面--------xrdp xrdp 的安装步骤： sudo apt-get install xrdp sudo adduser xrdp ssl-cert sudo systemctl restart xrdp 用Xterm的RDP接入，win与linux可以相互copy 3.22.1. 问题： 通过Xrdp 复制粘贴失效 问题： 本地电脑和服务器之间复制粘贴 本地电脑问题：1、未打开剪贴板功能 服务器问题：xrdp-chansrv 进程变成 进程STAT列会显示Z（僵尸进程） 方法一： 图形化注销用户Log out后重新登录 -----> 验证ok 方法二： 方法一 等价于 用户级(进程所属的用户)： sudo pkill -KILL -u chen 方法三： 自然，重启机器也是ok的 参考： Xrdp远程桌面链接登录ubuntu无法复制，解决方法_xrdp-chansrv-CSDN博客 https://blog.csdn.net/buzhidaoOWO/article/details/132197790 3.23. win下看linux桌面--------vnc 见《docker容器安装图形桌面》 3.24. linux突破物理内存的限制------swap分区 设置32G 原理： 当内存满了，把物理内存里的东西，换到swap分区（所以，必然硬盘？）里 -----> 不会OOM了 本质： 用物理磁盘替代 部分不用的物理内存 目标： 经操作系统调度，程序实际可使用的内存空间将远超过系统的物理内存 参考： https://zhuanlan.zhihu.com/p/535552414 实验：Linux的swap分区创建使用 https://cloud.tencent.com/developer/article/1622477 查看现有的swap swapon -s // 已经验证ok dd if=/dev/zero of=/opt/swapfile bs=1M count=40000 ------> 40000M, 大约40G mkswap /opt/swapfile //使用 mkswap 命令将文件转换为交换文件： swapon /opt/swapfile // 启用交换文件 持久化配置： vim /etc/fstab /opt/swapfile swap swap defaults 0 0 查看swap是否生效 swapon -s -----> 可能有多个swap分区，没关系（ free -h 显示总的） ---------------> 效果：利用这种方法 win10 笔记本 + cpu i7 12700 + virtualBox, 编译安卓代码还可以！！！！ 例外： docker内容器的swap大小是在docker外设置的 （上述容器内方法不适用！！！！） 见《突破docker的swap大小》 3.25. 磁盘的挂载 与卸载 磁盘 ---> 文件系统 ----> 挂载 linux磁盘挂载常用命令 lsblk：查看磁盘的情况（挂载 + 没挂载），添加参数-f，可具体查看磁盘挂载的相关信息 ---------> 记忆： list block devices 块设备（如硬盘、SSD、USB驱动器以及它们的分区） fdisk：对磁盘进行分区 -------> 注：如果是已经分区过的，不需要再分 mkfs：格式化分区磁盘 验证挂载后的结果 df -h 或者 lsblk 虚拟机磁盘挂载步骤： 1：VM虚拟机上面添加磁盘 2：使用fdisk对磁盘进行分区 3：格式化磁盘分区 mkfs -t ext4 /dev/sdb2 4：mkdir 创建准备用来挂载的目录 5：磁盘挂载命令 mount /dev/sdb2 /opt/newdir -----> linux磁盘挂载命令mount 6：使用命令行挂载，重启之后挂载关联关系会丢失 7：直接编辑etc/fstab的具体内容，可以实现磁盘的永久挂载 注意事项：fdisk命令只能对2T以下的磁盘进行分区。 参考：https://www.51cto.com/article/750361.html 3.26. 查看硬件固有信息 3.26.1. win cpu 物理核心数 -------> 设备管理器查看,12 core 逻辑处理器（物理核心数 + 线程数）------> 20线程（大core，两个线程） 3.26.2. win----wmic 命令 wmic diskdrive 查看磁盘信息： wmic diskdrive where index=0 wmic baseboard wmic memphysical wmic memphysical get maxcapacity 3.27. 查看 硬件当前使用量 3.27.1. 内存信息 free -h $ free -h total used free shared buff/cache available Mem: 27G 1.0G 6.4G 2.2M 20G 25G Swap: 3.5G 9.1M 3.5G 3.28. ls -h -la 这个命令，-h含义是什么 在Linux中，`ls` 是一个用于列出目录内容的命令。当你使用 `-la -h` 参数时： - `-l` 表示以长格式（long format）列出文件和目录信息，包括权限、链接数、所有者、组、大小、最后修改时间和文件名。 - `-a` 表示列出所有文件，包括隐藏文件（即以点 `.` 开头的文件）。 - `-h` 表示人性化显示文件大小，即将文件大小转换为KB、MB或GB等易读的单位，而不是默认的字节形式。 因此，`ls -la -h` 命令会列出当前目录下的所有文件和目录，并且文件大小将以更直观的形式展示。例如，原本可能显示为 `12345` 字节的文件大小，在使用 `-h` 后可能会显示为 `12.3K`（如果文件大小小于1MB）。 h 是 \"human-readable\" 的缩写。这个选项使得输出的文件大小更易于人类阅读，即它会以KB、MB或GB等单位来显示文件和目录的大小，而不是默认的字节形式。 3.29. 技巧之舍弃ls 尤其是当要cd下一级时 疯狂用Tab键： （1）自动补全命令 （2）自动补全路径 3.30. 进程status 为DN状态 查看： $ ps USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.2 168804 4256 ? Ss Apr08 0:13 /sbin/init root 2 0.0 0.0 0 0 ? S Apr08 0:00 [kthreadd] root 3 0.0 0.0 0 0 ? D Apr08 0:00 [ksoftirqd/0] -----------> S（status）为D 进程的D状态通常指进程处于不可中断的睡眠状态(uninterruptible sleep)，也称为“D（Disk）状态” 参考： Linux D 状态_linux进程中的d状态是什么-CSDN博客 https://blog.csdn.net/u013932687/article/details/69788366 结论： 无法打断。kill -9 也不行 场景： 磁盘损坏，等IO 补充：Linux进程有两种睡眠状态： 1、interruptible sleep，处在这种睡眠状态的进程是可以通过给它发信号来唤醒的。 2、uninterruptible sleep，状态的进程通常是在等待IO。 3.31. 命令化简之 alias 命令别名: 例子： alias godir='cd ~/workingSpace/mtk8675/yocto/build/tmp/work/aarch64-poky-linux/kwin' godir 可以拼凑：-------------> 因为alias本质是，字符串替换 alias adb='adb -s H0123456' godir //恢复 alias adb='adb' 3.32. ubuntu分享热点hotspot 1、 通过界面配置网络。但是存在问题： “打开 wifi 热点” 是灰的 参考： https://blog.csdn.net/lonnng2004/article/details/132118235 ubuntu搭建wifi热点 2、开启方法，用命令行： //开启热点 sudo nmcli device wifi hotspot 参考： 3.33. Linux系统连接手机USB网络共享后无法联网 现象： 看到有新增的适配器，但是没有新增ip 办法： sudo dhclient usb0 https://www.cnblogs.com/Mxy-cnblog/p/18086611 -------------------> 验证ok 适用条件： 纯linux系统，虚拟机linux 3.34. ubuntu物理机 usb线 adb连接手机 1、adb可以查看到设备 2、但是报错 （adb -- no permissions (user in plugdev group； are your udev rules wrong?）： 解决方案： sudo usermod -a -G plugdev $USER 参考： adb -- no permissions (user in plugdev group； are your udev rules wrong?)解决方案_no permissions (user in plugdev group; are your ud-CSDN博客 解决错误“failed to open device: Access denied (insufficient permissions)” - 简书 (jianshu.com) 3、报错： 解决错误“failed to open device: Access denied (insufficient permissions)” 解决：解决错误“failed to open device: Access denied (insufficient permissions)” - 简书 (jianshu.com) ------------------------> 验证ok 3.35. Ubuntu换源 20.04: https://blog.csdn.net/weixin_53000184/article/details/130782900 3.36. 续行符号 ： 注意：续行符号 \\ 后不能有空格！！！ gdb weston \\\\ -ex \"shell find ~workingspace/wayland_code/wayland/src -type d -exec echo directory {} \\\\; > /tmp/gdb_dirs.txt\" \\\\ -ex \"source /tmp/gdb_dirs.txt\" 3.37. TODO: 补充tty 4. Linux程序一定 可以在安卓上运行 TODO: 可以做很多扩展，比如： 见《本地GDB调试------安卓（安卓一定可以运行Linux程序）》 5. vim 5.1. 搜索： / 输入 /example 然后按 Enter，Vim 会找到第一个匹配的 example。 ----------> 注意：一定要输入 Enter 键 按 n 键，Vim 会跳转到下一个 example。 按 N 键，Vim 会跳转到前一个 example。 5.2. 显示行数 https://blog.csdn.net/qq_57492774/article/details/132169623 sudo vim /etc/vim/vimrc 6. shell 或 MobaXterm 6.1. shell中交互输入自动化 // .sh #! /bin/bash read -p \"enter number:\" no read -p \"enter name:\" name echo you have entered $no, $name 6.2. 单个函数的传参 #!/bin/bash my_rsync() { rsync -v -r -h --progress \"$1\" \"$2\" } ------------> 变为 my_rsync dir1 des2 6.3. wins 下shell自动化执行脚本 执行顺序： 6.4. shell 调用bat 注意：bat文件放在sh可以找到的目录下 6.5. Shell脚本之字符串操作 https://blog.csdn.net/xinfeismile123/article/details/119355401 7. flutter 1、trace：https://www.bilibili.com/video/av48772383 2、 8. 正则 匹配行: https://blog.csdn.net/billll/article/details/88370333 包含指定单词的行: 包含 单词1或单词2或 单词3 的行: 不包含指定单词 的行： 包含一组单词，并且不包含另一组: 9. github Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore. …or create a new repository on the command line echo \"# AospbaseForSelfish\" >> README.md git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin git@github.com:KentTJ/AospbaseForSelfish.git git push -u origin main …or push an existing repository from the command line git remote add origin git@github.com:KentTJ/AospbaseForSelfish.git git branch -M main git push -u origin main …or import code from another repository You can initialize this repository with code from a Subversion, Mercurial, or TFS project. Import code 10. GDB命令 见 《GDB》 11. jdb命令 11.1. 用threads查询所有线程： 命令： threads 11.2. 选择你感兴趣的线程 命令： thread 0xc1436dd9d0 11.3. 暂停线程 命令： suspend 0xc1436dd9d0 11.4. 显示调用堆栈 命令： wherei 结果显示示例： [1] java.lang.Object.wait (本机方法) [2] java.lang.Object.wait (Object.java：288), pc = 3 [3] android.os.MessageQueue.next (MessageQueue.java：148), pc = 153 [4] android.os.Looper.loop (Looper.java：110), pc = 8 [5] android.os.HandlerThread.run (HandlerThread.java：60), pc = 28 11.5. 切换调用堆栈的frame: 命令： up [n 帧] – 向上移动线程的堆栈 down [n 帧] – 向下移动线程的堆栈 11.6. 设置断点 命令： stop at : 或 stop in .[(参数类型,.. 结果显示示例： stop at com.example.BarrierFree_demo.MainActivity:85 设置断点com.example.BarrierFree_demo.MainActivity:85 含内部类时： stop at com.android.phone.SimContacts$ImportAllThread:124 设置 断点 com.android.phone.SimContacts$ImportAllThread:124 11.6.1. 显示某个类的信息。 有时要在嵌套类里设置断点，这个命令可能有帮助。 命令： class – 显示已命名的类的详细信息 结果显示示例： >class com.android.phone.SimContacts 类：com.android.phone.SimContacts 扩展： com.android.phone.ADNList 嵌套： com.android.phone.SimContacts$ImportAllThread 11.6.2. 显示变量信息： 查看局部变量，输入locals。 # 打印变量 print `基本类型` dump `对象` 11.6.3. 运行 命令： step – 进入方法 step up – 执行到当前方法返回到其调用程序 stepi – 执行当前指令 next – step over执行某一行 cont – 从断点处继续执行 9.清除断点 命令： clear .[(参数类型,...)] – 清除方法中的断点 clear : – 清除行中的断点 clear – 列出断点 11.6.4. 查看源代码 命令： list [line number|method] – 输出源代码 11.jdbshell命令缩写 command alias: c — cont l — list n — next r — run s — step si — stepi f — step up bt — wherei 11.6.5. 查看当前加载的所有类 classes 11.6.6. 其他 成功attach后，help一下，可以看到断点如何下等命令，注意class id 包括类的包名的！ 1 luogw@luogw-MacBook-Pro temp$ jdb -attach 127.0.0.1:7703 设置未捕获的java.lang.Throwable 设置延迟的未捕获的java.lang.Throwable 正在初始化jdb... help 命令列表 connectors -- 列出此 VM 中可用的连接器和传输 run [class [args]] -- 开始执行应用程序的主类 threads [threadgroup] -- 列出线程 thread -- 设置默认线程 suspend [thread id(s)] -- 挂起线程 (默认值: all) resume [thread id(s)] -- 恢复线程 (默认值: all) where [ | all] -- 转储线程的堆栈 wherei [ | all]-- 转储线程的堆栈, 以及 pc 信息 up [n frames] -- 上移线程的堆栈 down [n frames] -- 下移线程的堆栈 kill -- 终止具有给定的异常错误对象的线程 interrupt -- 中断线程 print -- 输出表达式的值 dump -- 输出所有对象信息 eval -- 对表达式求值 (与 print 相同) set = -- 向字段/变量/数组元素分配新值 locals -- 输出当前堆栈帧中的所有本地变量 classes -- 列出当前已知的类 class -- 显示已命名类的详细资料 methods -- 列出类的方法 fields -- 列出类的字段 threadgroups -- 列出线程组 threadgroup -- 设置当前线程组 stop in .[(argument_type,...)] -- 在方法中设置断点 stop at : -- 在行中设置断点 clear .[(argument_type,...)] -- 清除方法中的断点 clear : -- 清除行中的断点 clear -- 列出断点 catch [uncaught|caught|all] | -- 出现指定的异常错误时中断 ignore [uncaught|caught|all] | -- 对于指定的异常错误, 取消 'catch' watch [access|all] . -- 监视对字段的访问/修改 unwatch [access|all] . -- 停止监视对字段的访问/修改 trace [go] methods [thread] -- 跟踪方法进入和退出。 -- 除非指定 'go', 否则挂起所有线程 trace [go] method exit | exits [thread] -- 跟踪当前方法的退出, 或者所有方法的退出 -- 除非指定 'go', 否则挂起所有线程 untrace [methods] -- 停止跟踪方法进入和/或退出 step -- 执行当前行 step up -- 一直执行, 直到当前方法返回到其调用方 stepi -- 执行当前指令 下一步 -- 步进一行 (步过调用) cont -- 从断点处继续执行 list [line number|method] -- 输出源代码 use (或 sourcepath) [source file path] -- 显示或更改源路径 exclude [, ... | \"none\"] -- 对于指定的类, 不报告步骤或方法事件 classpath -- 从目标 VM 输出类路径信息 monitor -- 每次程序停止时执行命令 monitor -- 列出监视器 unmonitor -- 删除监视器 read -- 读取并执行命令文件 lock -- 输出对象的锁信息 threadlocks [thread id] -- 输出线程的锁信息 pop -- 通过当前帧出栈, 且包含当前帧 reenter -- 与 pop 相同, 但重新进入当前帧 redefine -- 重新定义类的代码 disablegc -- 禁止对象的垃圾收集 enablegc -- 允许对象的垃圾收集 !! -- 重复执行最后一个命令 -- 将命令重复执行 n 次 help (或 ?) -- 列出命令 version -- 输出版本信息 exit (或 quit) -- 退出调试器 : 带有程序包限定符的完整类名 : 带有前导或尾随通配符 ('*') 的类名 : 'threads' 命令中报告的线程编号 : Java(TM) 编程语言表达式。 支持大多数常见语法。 可以将启动命令置于 \"jdb.ini\" 或 \".jdbrc\" 中 位于 user.home 或 user.dir 中 12. 已经制作好的脚本 备份 12.1. 脚本制作的目标(重要！！): 1、复杂的命令，封装成简单的命令： my_rsync() { rsync -v -r -h --progress \"$1\" \"$2\" } ------------> 变为 my_rsync dir1 des2 2、如果不封装，要做到快速搜索： （1）方式一： 归类：linux_he （2）(优秀)方式二： cat myfucn.sh | grep \"dumpsystem\" ​ 可以比较精确 ​ 3、极优： 反向搜索历史记录 & 匹配 Ctrl + R ----> 反向搜索 连续 Ctrl + R -------> 循环浏览匹配 注：history只能查看。没有匹配（搜索） 4、利用ChatGPT了解 命令的含义 ---------> 可以根治记忆命令的难题！！！！！！！！！ 12.2. win下 myfun.sh 展开 #! /bin/bash echo \"cg, this is \\MobaXterm\\slash\\etc\\myDefinedfun.sh which is sourced by profile!!!\" function my_he { echo \"--------------真机环境信息------------------ 编译时间：adb shell getprop | findstr date adb shell dumpsys package com.byd.btsetting adb she11 dumpsys activity activities | findstr Resumed adb shell getprop ro.build.type\" echo \"=========================dump========================= 屏幕尺寸：adb shell um size adb shell dumpsys package com.tencent.mm 或 adb shell dumpsys-package | findstr SystemUI adb shell dumpsys SurfaceFlinger > SurfaceFlinger.txt , HWC l adb shell dumpsys display > display.txt, DisplayDeviceinto. displayld adb shell dumpsys window windows > windows.txt, Window #, touchableRegion adb shell dumpsys activity activities | findstr Resumed adb shell dumpsys input > input.txt | findstr touchableRegion adb shell uiautomator dump -d 0 --compressed /data/local/tmp/uidump.xml & adb pull /data/local/tmp/uidump.xml\" echo \"=========================adb============================== adb shell logcat -b events | findstr \"am_ wm_\" adb shell input keyevent KEYCODE_POWER 查看服务： adb shell service 1ist Di6切ivi: adb shell switchadb *#9352*232#* Di6切ivi: adb shell switchadb *#9352*232#* -s 0 python systrace.py -t 5 -o mynewtrace.html sched freq idle am wm view binder_driver hal dalvik camera input res #adb shell am force-stop com.tencent.mm #adb shell screencap -p /sdcard/app.png 5 adb pull/sdcard/app.png adb shell screencap pd2/sdcard/app2.png adb puadcard/app2.png #adb-shell cmd window tracing start & adb shell-su-root service call Surfaceplinger 1025 i32 1 && #adb shell screenrecord --time-limit 6 /sdcard/demo.mp4 && adb pull /sdcard/demo.mp4 screenRecord.mp4 # aub shell and window tracing stop's adb shell no-coot service call Surfaceringer 1025 132 0 #edb-poll /data/misc/umt.rece/vm trace winscope vm trace winscope & adh pull /data/misc/wmtrace/layers trace.winscope layers trace.wingcope & a startDocker.bat my_start; my_sleep_pc; my_restart_pc my_pause my_unpause docker_build_save_load.bat docker images -a docker rmi ee7cbd482336 docker ps -l docker pause 2619ca372120 docker commit 7a0d4b22ae06 cg, /ubuntu16.04_aosp1200_r28:vnc_ok docker load -i F:\\VirtualMachine\\Docker\\ubuntu.tar docker_build_save_load.bat 替代: docker save cg, /ubuntu16.04_aosp1000_r17:vnc_ok -o H:\\docker_jarFiles\\ubuntu16.04_aosp1000_r17_vnc_20221026.jar docker build --squash -t cg, /ubuntu16.04_aosp1200_r28:as_ok2 .\" echo \"=========================虚拟屏============================= adb shell settings put global overlay_display_devices \"1920x1080/320,secure\" adb shell am start --display 4 com.example.myapplication/.MainActivity (查diaplay1D: adb shell dumpays display | findstr \"1080\" ) adb shell input -d 4 tap 250 300 \" echo \"=========================分身============================= 创建：adb shell pm create-user --profileOf 0 --managed fensten ; adb shell pm remove-user 10 所有用户：adb shell pm list users 激活：adb shell am start-user 10 分身应用启动：adb shell am start --user 10 --display 2 -n \"com.example.myapplication/.MainActivity\" \" #adb shell am force-stop.com.tencent..mm #adb shell screencap p/sdcard/app.png & adb pull /sdcard/app.png #adh shell screencap -p-d 2/sdcard/app2.png adb pull/sdcard/app2.png #adb shell cmd window tracing startadh shell an root service call SurfaceFlinger 1025 132-1 & adb shell screenrecord --time-limit-fi/sdo #adb shell cmd window tracing stop s adb-shell su root service call Surfaceringer 1025-132 0 #adb pull-/data/misc/wmtrace/wm trace.Winscope wil trace.winscope & adb purl /data/misc/umtrace/layers trace.winscope layers trace, winscope i #echo \" =虚拟用: #adb shell settings put global overlay display devices \"1920x1080/320, secure\" adb shell am start display 4 com.example.myapplication/MainActivity 4diaplay Dr adb shell dumpsys display I findet: \"1000\" #adb shell input d 4 tap 250-300\" #Bladb shell pm create-user profileof-0--managed-fenshen adb shell to remove user 10 #: adb shell pm list users id:adb shell am start-user-10- #DA: adb shell am start user 20-display \"com.example.myapplication/ MainActivity\" #u10: adb shell dumpays package com.tengent.mt findste installed- #9 adb shell dumpsys package com.tencent..at findstr installed-\" #echo #\"s Protolog#: #adb shell wm logging enable-text WM_DEBUG_ORIENTATION #Log.i(TAG, \"chen, loadKeyboard\" + Log.getStackTraceString(new Throwable())); #echo #adb shell setenforce 0 # adb shell getenforce (196ermissive) #echo \" #Linux #adb shell ps -A > process.txt #pid Adb shell ps-findst fly adb shell pAT p 7209 pidi Tad shell pa AT F #动态标记(联合操作识别),线程维度: #adb shell top-top: Shift+ 被引用的 myStart.bat： echo \"this is C:\\Users\\24234\\Documents\\MobaXterm\\slash\\etc\\myStart.bat\" start E:\\Snipaste-2.7.3-Beta-x64\\Snipaste.exe start D:\\ddns-go_5.2.0_windows_x86_64\\ddns-go.exe start E:\\AutoHotKey\\myAutoHotKey.ahk ::启动另一个窗口； linux 连手机需要，adb start \"tom\" cmd /c \"timeout /t 2 && adbkit usb-device-to-tcp -p 7788 FA6930305260 \" ::\"E:\\Program Files\\TurboVNC\\vncviewerw.bat\" ::@ping -n 20 127.1>nul 2>nul 被引用的 myOpenWinPath.py： //myOpenWinPath.py #!/usr/bin/python # -*- coding: UTF-8 -*- import os import sys IDE_path = sys.argv[1] #映射map，需要维护 IDERoots=[r'I:\\working_pan\\Demo\\AOSPsourceCode2_win\\sourceroot'] remoteRoots=[r'I:\\dockerSharedFiles\\aosp_android1000_r17\\aosp_android1000_r17'] #IDE_path=r\"I:\\working_pan\\Demo\\AOSPsourceCode2_win\\sourceroot\\packages\\apps\\Launcher3\\iconloaderlib\\src\\com\\android\\launcher3\\icons\\BaseIconFactory.java\" def windows_to_linux(windowsPath): windowsPathTemp = windowsPath.split(':')[1] # /Code/Shell/test.txt diskDrive = windowsPath.split(':')[0] # e diskDrive = '/' + diskDrive # /e linuxPath = diskDrive + windowsPathTemp # /e/Code/Shell/test.txt print(linuxPath) for i in range(0, len(IDERoots)): if (IDE_path.find(IDERoots[i])) == 0: relativePath = IDE_path.split(IDERoots[i])[1] print(IDE_path.split(IDERoots[i])) print(\"relativePath:\" + relativePath) remotePath = remoteRoots[i] + relativePath print(\"remotePath: \" + remotePath) # 利用explorer.exe执行 os.system(\"explorer.exe %s\" % remotePath) else: continue 传参路径：shell ---> 命令my_linux2winPath ---> python 12.3. linux下 .myfunction.sh # .myfunction.sh #!/bin/bash echo -e \"hello,cg! this is myfunction.sh\" echo -e \"please enter： my_reStartVnc\" #为了linux能链接到手机 adb connect host.docker.internal:7788 && adb connect host.docker.internal:7788 echo -e \"It has been executed: adb connect host.docker.internal:7788\" function my_reStartVnc { vncserver -kill :1 vncserver -kill :2 vncserver -kill :3 rm -rf /tmp/.X1-lock vncserver :1 -localhost no -geometry=1920x1080 } function my_he { echo -e \"=============linux relative:======================== \\n\" echo -e \"vim ~/.myfunction.sh\" echo -e \"my_reStartVnc\" echo -e \"refresh linux sources: . ~/workingSpace/env-config/linux/ubuntu/sources/change-sources.sh\" echo -e \"Ubuntu version: cat /etc/issue\" echo -e \"grep \"baidu\" -rl ./\" echo -e \"kill process： ps -ef | grep android && kill -9 19703 \" echo -e \"=============adb relative:======================== \\n\" echo -e \"win: adbkit usb-device-to-tcp -p 7788 FA6930305260 ------> 与是否有手机无关\" echo -e \"linux: adb connect host.docker.internal:7788 ------> 与是否有手机无关，已经添加my_start\" echo -e \"=============aosp relative:======================== \\n\" echo -e \"source build/envsetup.sh && lunch aosp_sailfish-userdebug\" echo -e \"=============gdb relative:======================== \\n\" echo -e \"search PID: adb shell ps -ef | grep mediaserver\" echo -e \"Method1: gdbclient.py -p PID\" echo -e \"Method2: adb forward tcp:1235 tcp:1235 && adb shell gdbserver :1235 --attach pid\" echo -e \"breakpoint: (gdb) b android::MediaPlayerService::Client::start\" echo -e \"breakpoint: (gdb) b frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp:1072\" } 本地复制代码到远端 展开 #copyLocal2remote.py #!/usr/bin/python # -*- coding: UTF-8 -*- import os import shutil # 需要copy的文件，需要维护 IDEFilepaths = [ r\"I:\\working_pan\\Demo\\MyHandlerDemo\\app\\src\\main\\java\\com\\example\\myhandlerdemo\\MainActivity.java\", ] # 映射map，需要维护 IDERoot = r'I:\\working_pan\\Demo\\MyHandlerDemo\\app\\src\\main' remoteRoot = r'C:\\Users\\24234\\Desktop\\Newfolder' def cp_winFiles_to_linux(): for i in range(0, len(IDEFilepaths)): relativePath = IDEFilepaths[i].split(IDERoot)[1] print(\"relativePath:\" + relativePath) remotePath = remoteRoot + relativePath print(\"remotePath: \" + remotePath) # cmd = \"xcopy %s %s /s/y/h \" % (IDEFilepaths[i], remotePath) # os.system(cmd) shutil.copy(IDEFilepaths[i],remotePath) if __name__ == '__main__': cp_winFiles_to_linux() 12.4. 编译aosp相关命令的 封装 技巧： 所有的cd ，可以用 my_root= ./ 替换（用root路径定位其他路径） 不要cd到其他路径去执行 function my_rm { cp -r $master_root/out/release/java/graphic/* $master_root/interface/java/graphic/; cp -r $master_root/out/release/graphic/* $master_root/interface/sdk/graphic/; } function reposync { ~/bin/repo forall -c 'git clean -d -fx; git clean -df; git add .;git ~/bin/repo forall -c 'git clean -d -fx;git clean -df; git add ;git stash; git stash clear' ~/bin/repo forall -c 'git reset HEAD --hard' repo sync -c } 12.5. copy本地代码到remote copy2Remote.py #!/usr/bin/python # -*- coding: UTF-8 -*- import os import shutil # 需要copy的文件，需要维护 IDEFilepaths = [ r\"Y:\\workingspace\\mt8675\\code\\alps\\frameworks\\base\\core\\java\\android\\accessibilityservice\\AccessibilityService.java\", r\"Y:\\workingspace\\mt8675\\code\\alps\\frameworks\\base\\core\\java\\android\\accessibilityservice\\AccessibilityService.java\", ] # 映射map，需要维护 IDERoot = r'Y:\\workingspace\\mt8675\\code\\alps' remoteRoot = r'X:\\code\\chengang\\alps' def cp_winFiles_to_linux(): for i in range(0, len(IDEFilepaths)): relativePath = IDEFilepaths[i].split(IDERoot)[1] print(\"relativePath:\" + relativePath) remotePath = remoteRoot + relativePath print(\"remotePath: \" + remotePath) # cmd = \"xcopy %s %s /s/y/h \" % (IDEFilepaths[i], remotePath) # os.system(cmd) shutil.copy(IDEFilepaths[i],remotePath) print(\"copy end\") if __name__ == '__main__': cp_winFiles_to_linux() 13. 格式 忽略： 隐藏 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/debugSkills.html":{"url":"Tool/debugSkills.html","title":"Debug Skills","keywords":"","body":"1. 目录2. 技巧，工具层面：2.1. 断点调试技巧：2.1.1. 暂停等待attach2.1.2. 多线程2.1.3. 改写值之----Evaluate（或watchs）2.1.4. 改写值之----Evaluate and log2.1.5. 改写值之 反射2.1.6. 断点日志： 动态地 改写值、添加log （调用栈）2.1.7. 异常断点2.1.8. 方法断点2.1.9. 字段断点和方法断点2.1.10. 断点调试时，关闭ANR2.1.11. 过滤之 condition2.1.12. 过滤之watch2.1.13. 杀进程2.1.14. 改app代码，而非framework源码2.1.15. debug的遗憾2.1.16. 注意事项：2.2. IDEA DEBUG技巧整理2.3. AS断点调试 Build.gradle的详细配置2.4. 用源码搭建java断点调试环境----法一2.4.1. 新建一个空的工程2.4.2. 根目录下新建与app同级的module2.4.3. 删掉src、libs2.4.4. 为base下代码设置为source2.4.5. 同步，保证环境2.4.6. 配置跳转优先级 .iml文件：2.4.7. 最重要第二点：2.4.8. 不允许添加两个module2.4.9. 关于aidl的调试（万能调试）：2.4.10. 移除module2.4.11. 技巧：2.4.12. 方法一最大的痛点:代码同步 ---> 已解决2.5. 用源码搭建java断点调试环境----法二，不同盘有问题2.6. 用源码搭建java断点调试环境----法三，有问题2.7. framework java 断点调试 环境（jdb）2.7.1. 总结：2.7.2. 环境2.8. framework Native 断点调试 环境（GDB）2.9. framework Native Clion 跳转环境（linux下）2.9.1. 基本原理2.9.2. 具体步驟：2.9.3. 一些问题：2.9.4. 参考：2.10. 搜索能力：2.10.1. 搜索技巧之搜索同类2.10.2. aosp本地代码 全量搜索2.10.3. 对知识点的搜索途径2.11. 断点环境问题2.12. 断点调试失败的例子--------代码混淆2.13. debug环境规定：3. LOG3.1. system log3.1.1. ProtoLog动态log3.2. EventLog3.2.1. 参考3.3. kernel Log 驱动相关的log3.4. log环境规定3.5. 加log技巧3.6. view log维测技巧：3.7. AS 日志 过滤3.8. 日志问题----------丢日志4. 在源码中adb（dump、截图、ui、操作、、、）4.1. 权限问题的解决4.2. 应用之源码中截图，保存png4.3. 应用之源码中dump信息4.4. 一些注意点4.5. 精确时间点dump-------更好的选择：4.5.1. 精确dump时间优化4.5.2. 总之，所有改动点4.5.3. 技巧：4.6. 技巧4.7. TODO：其他方式4.8. 遇到的问题：4.9. 参考：5. 过滤之dump、log、断点debug6. 认识工具、发展工具6.1. TODO7. log、debug适用的场景8. dump8.1. 具体含义见各章节9. 如何定位bug？ 思路层面9.1. 定位bug总体原则9.2. 显示问题定位9.3. 闪屏问题定位：9.4. 缺少应用代码的情况下的定位 技巧，工具层面： 断点调试技巧： 暂停等待attach 多线程 改写值之----Evaluate（或watchs） 改写值之----Evaluate and log 改写值之 反射 应用一：修改debug开关 --------> 修改后，脱离断点调试 调用方法 技巧： .java反射 补充： 实例化Class类对象的三种方式 断点日志： 动态地 改写值、添加log （调用栈） 断点日志，最优实践 Evaluate and log之 写代码 异常断点 方法断点 字段断点和方法断点 断点调试时，关闭ANR 过滤之 condition 过滤之watch 杀进程 利用断点调试杀进程 利用命令行杀进程 改app代码，而非framework源码 debug的遗憾 注意事项： IDEA DEBUG技巧整理 AS断点调试 Build.gradle的详细配置 用源码搭建java断点调试环境----法一 新建一个空的工程 根目录下新建与app同级的module 删掉src、libs 为base下代码设置为source 同步，保证环境 配置跳转优先级 .iml文件： 最重要第二点： 不允许添加两个module 关于aidl的调试（万能调试）： 方法一：万能的classes.jar 方法二： 移除module 技巧： 同时调试 应用+ framework代码： iml本质 同包的两个类不能引用导致飘红 方法一最大的痛点:代码同步 ---> 已解决 用源码搭建java断点调试环境----法二，不同盘有问题 用源码搭建java断点调试环境----法三，有问题 framework java 断点调试 环境（jdb） 总结： 环境 附：可能的报错 framework Native 断点调试 环境（GDB） framework Native Clion 跳转环境（linux下） 基本原理 具体步驟： 一些问题： 参考： 搜索能力： 搜索技巧之搜索同类 aosp本地代码 全量搜索 对知识点的搜索途径 断点环境问题 断点调试失败的例子--------代码混淆 debug环境规定： LOG system log ProtoLog动态log EventLog 参考 kernel Log 驱动相关的log log环境规定 加log技巧 view log维测技巧： AS 日志 过滤 日志问题----------丢日志 在源码中adb（dump、截图、ui、操作、、、） 权限问题的解决 应用之源码中截图，保存png 应用之源码中dump信息 一些注意点 精确时间点dump-------更好的选择： 精确dump时间优化 总之，所有改动点 dump window dump activity 技巧： 技巧 TODO：其他方式 遇到的问题： 参考： 过滤之dump、log、断点debug 认识工具、发展工具 TODO log、debug适用的场景 dump 具体含义见各章节 如何定位bug？ 思路层面 定位bug总体原则 显示问题定位 闪屏问题定位： 缺少应用代码的情况下的定位 1. 目录 2. 技巧，工具层面： 2.1. 断点调试技巧： 1、可以复制调用栈！！！---->调用流程 2、 sdk或lib或dependency的jar文件，可以断点！ 3、基于2，可以做很多事情： 1）huawei改动了Google源码，导致真机与安卓sdk行数不一致 >方法： 复制源码，直接到.class文件里 注意：必须重新编译一次，不能破坏环境！！！！！ 2）对应Z代码，如何用AS调试？？？？同样道理， 编译Z的jar，添加到dependency里就OK了（也可以直接copy源码） 编好的jar，也可添加到SDK的source里！！！！！？？？ 更优秀 ​ 3） 极其优 利用云帆的方法， 将其他盘的java文件，通过gradle引入成source， 既然成source就会纳入调试的代码？？？？？？。而且在其他盘改动代码，自动同步过来！！！！ ​ 4）源码，copy到sdk的source目录下？？？（或者copy到工程目录下？？？） 4、如何配合log？？？各适合哪些场景？？？？ 5、回退：回到上一个函数状态（当然已经改变的值是不会恢复的） 6、条件断点 对于循环和有if的语句超级实用！！！ 2.1.1. 暂停等待attach 方法一： 手点击启动应用，但代码中加wait Debug.waitForDebugger() ===》暂停等待attach -------> 代码背后原理： 会让手机进程保持阻塞状态,直到连上调试器后,才会继续执行后续的代码 场景举例: ​ AS debug，无法对onCreate方法进行调试è点开，就执行完了 仍然存在的问题： 因为attach时必须绑定app进程名（包名），所以必须在Activity new之后，在APP应用侧代码容易添加waitForDebugger （如果想看activity起来之前加断点呢呢？？） 方法一：framework里添加Debug.waitForDebugger();---->编译framework 方法二；framework里添加log 方法三：在app起来后，销毁重建activty------>横竖屏切换 进入acitivy，1，wait 2 横竖屏切换。这个有个很大优点:可以解决activity之前的 方法四：（极优） 以debug模式启动应用，命令adb shell am start –D –n 包名/类名（包名和类名可以在反编译出的AndroidManifest.xml中找到，不详细介绍） 注： -D 是debug adb shell am start -D -n com.example.BarrierFree_demo/.MainActivity ------->可以做很多事情： 补充： 1、这个命令的等待点，实际上是launchActivity，此时应用已经起来了---> 所以，launchActivity之前的流程断点不上？ 2、没有-D，就是普通起一个MainActivity 方法三： 以debug模式启动应用，AS中Debug图标启动，是可以暂停的 2.1.2. 多线程 多进程之间切换调试 1、在代码中加断点(此时可能不知道是哪个线程会走这个代码) 2、打开app，启动主线程 多个线程设置debugger Intellij IDEA 的debug断点调试是有一个模式的选择的，就像下面这张图，平时我们都使用的是默认的 ALL（在Eclipse中默认是线程模式） ，这种模式我们只能将一个线程断下来，但其他线程却已经执行过了；而将其改为 Thread 后，就可以多个线程都断下来，并且可以很方便的切换线程的执行流程，这就是多线程调试。 在debug控制台能够很方便的查看线程的执行状态，也可以很方便的选择某个线程去执行： 2.1.3. 改写值之----Evaluate（或watchs） ----->极优！！！获取运行时信息 + 强制改变运行态的代码 Watchs中不仅可以观看值，也可以执行代码修改值，可以执行任意代码！！！！！！！！！ 同样的，Evaluate（更推荐！！！！！ 优点：只会执行一次） https://blog.csdn.net/Peng_Hong_fu/article/details/79994860 这个技巧非常有用，可以强制改变运行态的代码，场景： （1）用来阅读代码，要理解某个量的影响---->制造冲突：修改某个量，观察变化，从而理解代码 （2）用来写代码：当代码量比较小的时候，完全可以用Evaluate添加或者修改几行代码！！！！！！！极优！！！！不用编译，也不用导包重启 （3）用来解问题很适合，查看某些量，某些信息，尤其可以看到这个量周围量的信息！！！！！ watchs改变值：优点：更加图形化，不用写代码 2.1.4. 改写值之----Evaluate and log 见《断点日志》 2.1.5. 改写值之 反射 利用断调试 动态 反射修改final数据域 ---》 极优 参考： https://www.cnblogs.com/fudashi/p/6624379.html 注意： 修改后，就不依赖于 断点调试环境了，永远修改了！！！！！！！！ -----》 自然，除非重启手机 TODO: 能用反射，必然可以发挥的空间很大!! 应用一：修改debug开关 --------> 修改后，脱离断点调试 修改final数据域: // 构造一个Person类，里面有个final字段NAME Person p = new Person(); Field field = p.getClass().getDeclaredField(\"NAME\"); field.setAccessible(true); field.set(p,\"Hello\"); 修改static final数据域，比如： Class clz = ActivityTaskManagerDebugConfig.class; Field field = clz.getDeclaredField(\"DEBUG_STATES\"); field.setAccessible(true); field.set(new ActivityTaskManagerDebugConfig(),true); 效果： 实际上：DEBUG_STATES以及log都被编译器优化掉了（在编译后的jar） static final Boolean DEBUG_STATES = false; if (DEBUG_STATES) { // 【1】因为永远是false，所以被编译器优化掉了 ............. } 结论： 1、加DEBUG日志，相当于没加 2、即使final 动态修改也没用，被编译器优化掉了 调用方法 例2：以无参方法为例子： // 在view.java中 调用 Activity.java方法： Class clz = this.getContext().getClass(); Method method = clz.getMethod(\"dismissKeyboardShortcutsHelper\"); method.toString(); method.invoke(this.getContext()); //结果： public final void android.app.Activity.dismissKeyboardShortcutsHelper() 例3：以两参方法为例子： // 在view.java中 调用 Activity.java方法performResume： Class clz = this.getContext().getClass(); Method method = clz.getDeclaredMethod(\"performResume\",boolean.class,String.class); method.toString(); method.invoke(this.getContext()); //结果： -----》 Method threw 'java.lang.NoSuchMethodException' exception Class clz = this.getContext().getClass(); Method[] method = clz.getDeclaredMethods(); Arrays.toString(method); //本类方法 [static com.example.myhandlerdemo.MainActivity$MyHandler com.example.myhandlerdemo.MainActivity.access$000(com.example.myhandlerdemo.MainActivity), protected void com.example.myhandlerdemo.MainActivity.onCreate(android.os.Bundle), public void com.example.myhandlerdemo.MainActivity.testJump2anotherApp()] //view.java Class clz = this.getContext().getClass(); Method[] method = clz.getMethods(); Arrays.toString(method); 纵向横向： getMethods()：能够获取类的所有public方法，包括自身定义的以及从父类继承的。 -----> 即限制在public里（纵向） getDeclaredMethods()：能够获取类本身的所有方法，包括private方法，实现的接口方法，但是不能获取从父类继承的非public方法 ------> 即限制在本类里（横向） 如何调用父类的 private方法呢？ 只能用父类来调用，即 子.getSuperclass() 参考： https://blog.csdn.net/u013425438/article/details/92637055 所以： // 在view.java中 调用 Activity.java方法performResume： Class clz = this.getContext().getClass(); Method method = clz.getDeclaredMethod(\"performResume\",boolean.class,String.class); method.toString(); method.invoke(this.getContext()); 应该为： Class clz = this.getContext().getClass().getSuperclass().getSuperclass().getSuperclass().getSuperclass().getSuperclass(); 技巧： 一个复杂的代码/脚本，验证一点，添加一点 全量的东西是好的，万能的：比如 getMethods()先查看，有哪些方法 每一行提前验证，结果验证： Class clz = this.getContext().getClass().getSuperclass().getSuperclass().getSuperclass().getSuperclass().getSuperclass(); clz.toString(); //验证 Method[] methods = clz.getMethods(); Arrays.toString(methods); //全量，为后一步提供验证 Method method = clz.getDeclaredMethod(\"performResume\",boolean.class,String.class); method.toString(); //验证 //调用 method.invoke(this.getContext(), false, \"RESUME_ACTIVITY\"); method.invoke((Activity)this.getContext(), false, \"RESUME_ACTIVITY\"); ---------> 因为非公有方法，调用需要 method.setAccessible(true); 可以运行的最后脚本： Class clz = this.getContext().getClass().getSuperclass().getSuperclass().getSuperclass().getSuperclass().getSuperclass(); clz.toString(); Method method = clz.getDeclaredMethod(\"performResume\",boolean.class,String.class); method.setAccessible(true); method.invoke(this.getContext(), false, \"RESUME_ACTIVITY\"); 进一步优化，OK： //优化点，用while找到对应的类 Class clz = this.getContext().getClass(); Class superclass = clz.getSuperclass(); while (superclass != null) { if(superclass.getSimpleName().equals(\"Activity\")){ break; } superclass = superclass.getSuperclass(); } clz = superclass; clz.toString(); Method method = clz.getDeclaredMethod(\"performResume\",boolean.class,String.class); method.setAccessible(true); method.invoke(this.getContext(), false, \"RESUME_ACTIVITY\"); 参考：https://blog.csdn.net/huangxinyu_it/article/details/73499490 .java反射 https://blog.csdn.net/weixin_56442629/article/details/115430249 补充： 实例化Class类对象的三种方式 package HelloClass; class Hello { } public class GetClassDemo { public static void main(String[] args) throws ClassNotFoundException { Class c1 = null; Class c2 = null; Class c3 = null; //1. c1 = Class.forName(\"HelloClass.Hello\"); //2. c2 = new Hello().getClass(); //3. c3 = Hello.class; 2.1.6. 断点日志： 动态地 改写值、添加log （调用栈） 既然可以断点调试了，为啥还要log（调用栈）？------> 断点log，不要勾选Suspend！！！ 原因在于： 1、断点调试太慢，会将思路打断，消耗人的意志力 ------> 快速有快速的好处，整体 结构更强 2、有些流程，就不适合降速，比如有时间要求的 -极优： 1、断点日志 与 普通日志 没有任何区别（除了不用编译） 2、不会阻塞线程。很多流程不能阻塞 ​ 注意，不要勾选Suspend，不会阻塞线程 3、在attach过程中，还可以修改、添加log 4、一直attach，不会导致ANR 5、部分第三方jar，aar里面外面更是无法手动添加log代码---》 该方法OK 注意：最终结果，一定以string， 布尔型等的形式表达出来 常见的log： //当前线程名 \"Thread: \" + Thread.currentThread().getName() + \", \" + Thread.currentThread().getId() + \", \" + new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\").format(System.currentTimeMillis()); // 当前系统时间 new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\").format(System.currentTimeMillis()) //当前具体实例 \",\" + this; //当前函数名 \"func: \" + Thread.currentThread().getStackTrace()[2].getMethodName(); //调用栈 勾选 Stack trace 综合脚本： String s = \"Thread: \" + Thread.currentThread().getName() + \", \" + Thread.currentThread().getId() + \", \" + new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\").format(System.currentTimeMillis())+ \",\" + this.getSimpleName() + \", func: \" + Thread.currentThread().getStackTrace()[2].getMethodName(); 注意： 可以多行代码，比如： // 在view.java中 调用 Activity.java方法： Class clz = this.getContext().getClass(); Method method = clz.getMethod(\"dismissKeyboardShortcutsHelper\"); method.toString(); method.invoke(this.getContext()); -------> 只有最后一行结果，会被打印出来 调用栈 优点： 相当于目录+大纲： 1、方便快速跳转 2、不会 走到细节分支 3、观察触发点，触发点是锚点，建立记忆逻辑 断点日志，最优实践 不在debug里输出 ------> 缺点：（1）没有时间戳 （2）只能打印一个string 真正意义上在debug过程中使用 （1）log能做的事情，这里都能做 Evaluate and log之 写代码 TODO: 一个很可能的做法是，在这个框里写自己的需求代码。而不需要重新编译 -----> 极优 2.1.7. 异常断点 https://blog.csdn.net/weixin_35735663/article/details/114159806 捕获android运行的时候抛出的异常 ------> 给车祸的第一现场拍照 TODO: 啥区别 例子： 虽然看不到微信代码，但是可以看到它抛了异常 2.1.8. 方法断点 TODO: 好像没有什么价值 参考 https://blog.csdn.net/weixin_35735663/article/details/114159806 不需要关心这个方法里面的变量是怎么变化的时候？ 2.1.9. 字段断点和方法断点 2.1.10. 断点调试时，关闭ANR 断点调试，很耗费时间，安卓触摸事件等，有ANR机制，让进程挂了。 -----> 技巧：关闭ANR机制 https://www.coder.work/article/140491 https://qa.1r1g.com/sf/ask/3854914871/ TODO: 命令行如何关闭ANR? （有些阉割系统，设置里根本没有这个选项） 因为可以看到ANR代码机制，所以，理论上，一定可以调试时破坏这个机制 2.1.11. 过滤之 condition 过滤的重要性（一种化简）： 大量的log，必须过滤，1、否则没法看 2、断点次数会卡 condition断点： 2.1.12. 过滤之watch watch把自己要观察的多级内层的一个值，外提 -------》 以便于观察。断点 + 按F9, 当watch是自己想要的，停下---------> 过滤作用 2.1.13. 杀进程 利用断点调试杀进程 先attach，然后关闭attach 利用命令行杀进程 使用情况：经常需要杀进程 见《手机命令》 2.1.14. 改app代码，而非framework源码 很多时候，想要观察framework源码 ？？？？？？？？？？？？？ 2.1.15. debug的遗憾 只能修改值（内存里的值），无法给函数打桩 (无法直接return 或者 返回固定值)------------> 而C语言是可以的 ----> TODO 补充： idea是可以做到force return，并返回你设置的值.......很优，见 ： https://blog.jetbrains.com/idea/2015/09/intellij-idea-15-eap-improves-debugger-and-git-support/ https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fviews%2Fshared%2Fref-forcereturn.htm https://blog.csdn.net/u010675669/article/details/124225873 但是，idea的remote debug（即As）是不行的 2.1.16. 注意事项： 为了防止调试过程中应用被系统AMS干掉，先把开发者选项中的【显示所有应用程序无响应】开关打开，不打开的情况下断点调试过程中应用进程很容易挂掉。 2.2. IDEA DEBUG技巧整理 https://blog.csdn.net/weixin_43981673/article/details/106298812 TODO：视频教程 https://www.bilibili.com/video/BV1g4411k7UJ?p=15 技巧，搜索所有AS问题都可以搜索IDEA，更广泛！！！！ 2.3. AS断点调试 Build.gradle的详细配置 Build.gradle apply plugin: 'com.android.application'//说明module的类型，com.android.application为程序，com.android.library为库 android { compileSdkVersion 22//编译的SDK版本 buildToolsVersion \"22.0.1\"//编译的Tools版本 defaultConfig {//默认配置 applicationId \"com.nd.famlink\"//应用程序的包名 minSdkVersion 8//支持的最低版本 targetSdkVersion 19//支持的目标版本 versionCode 52//版本号 versionName \"3.0.1\"//版本名 manifestPlaceholders = [ UMENG_CHANNEL_VALUE:\"hsq\" ]//声明友盟渠道名是可变的 } sourceSets {//目录指向配置 main { manifest.srcFile 'AndroidManifest.xml'//指定AndroidManifest文件 java.srcDirs = ['src']//指定source目录 resources.srcDirs = ['src']//指定source目录 aidl.srcDirs = ['src']//指定source目录 renderscript.srcDirs = ['src']//指定source目录 res.srcDirs = ['res']//指定资源目录 assets.srcDirs = ['assets']//指定assets目录 jniLibs.srcDirs = ['libs']//指定lib库目录 } debug.setRoot('build-types/debug')//指定debug模式的路径 release.setRoot('build-types/release')//指定release模式的路径 } signingConfigs {//签名配置 release {//发布版签名配置 storeFile file(\"fk.keystore\")//密钥文件路径 storePassword \"123\"//密钥文件密码 keyAlias \"fk\"//key别名 keyPassword \"123\"//key密码 } debug {//debug版签名配置 storeFile file(\"fk.keystore\") storePassword \"123\" keyAlias \"fk\" keyPassword \"123\" } } buildTypes {//build类型 release {//发布 minifyEnabled true//混淆开启 proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'//指定混淆规则文件 signingConfig signingConfigs.release//设置签名信息 } debug {//调试 signingConfig signingConfigs.release } } packagingOptions { exclude 'META-INF/ASL2.0' exclude 'META-INF/LICENSE' exclude 'META-INF/NOTICE' exclude 'META-INF/MANIFEST.MF' } lintOptions { abortOnError false//lint时候终止错误上报,防止编译的时候莫名的失败 } //打包-渠道 productFlavors { hsq{} hsq_dx{} hsq_wx{} baidu{} yingyongbao{} ppzhushou{} anzhi{} zhushou360{} huawei{} lenovomm{} wandoujia{} mumayi{} meizu{} youyi{} sougou{} } //打包-防渠道代码重复处理 productFlavors.all { flavor -> flavor.manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name ] } } dependencies {//依赖 compile fileTree(dir: 'libs', exclude: ['android-support*.jar'], include: ['*.jar']) //编译lib目录下的.jar文件 compile project(':Easylink')//编译附加的项目 compile project(':ImageLibrary') compile project(':ImageResLibrary') compile project(':Ofdmtransport') compile project(':PullToRefreshLibrary') compile project(':RecorderLibrary') compile project(':WebSocket') compile project(':WidgetLibrary') compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'//编译来自Jcenter的第三方开源库 } 2.4. 用源码搭建java断点调试环境----法一 法一：copy aosp源码到工程目录 https://blog.csdn.net/Gsony6501/article/details/110139734 https://blog.csdn.net/qq_38998213/article/details/81907253 优点：本地代码，不受网速影响 缺点：服务器代码copy到 本地工程目录 2.4.1. 新建一个空的工程 保证可同步sync，可编译，可安装 2.4.2. 根目录下新建与app同级的module 选择： 并取名frameworks ---》后面代码导入该目录下 ----》加入module ，再次编译app，保证环境可编译，可安装 注意生成的module 级两个文件：frameworks.iml 与 build.gradle 2.4.3. 删掉src、libs 删掉frameworks下自动生成的文件夹：src、libs ，并copy代码到该目录下比如base目录下 2.4.4. 为base下代码设置为source // sourceSets{ //目录指向配置 main { manifest.srcFile 'AndroidManifest.xml' //指定AndroidManifest.xml文件 java.srcDirs = ['base'] //指定source目录 resources.srcDirs = ['base'] //指定source目录 aidl.srcDirs = ['base'] //指定source目录 renderscript.srcDirs = ['base'] //指定source目录 res.srcDirs = ['base/core/res/res']//指定资源目录 assets.srcDirs = ['base/core/res/res/assets']//指定assets目录 jniLibs.srcDirs = ['libs']//指定lib库目录 } } 2.4.5. 同步，保证环境 会出现 需要增加与base同级的AndroidManifest.xml ： 再同步，直到成功 ---》保证环境 2.4.6. 配置跳转优先级 .iml文件： 配置跳转优先级（点击鼠标左键时）：这里当然是把jdk和sdk的依赖放到最后---> 可以优先依赖到sourceFolder frameworks.iml 文件： 这样就完成了一个可断点调试的环境 补充：对于linux下 AS，该文件处于： 补充：如果idea没有自动生成，打开iml自动产生 参考：https://www.cnblogs.com/wanglongjiang/p/17315700.html 2.4.7. 最重要第二点： 避免attach的时候，优先attach到sdk里的代码。删除app.iml 中sdk依赖： 注意：只是临时删除。编译时还要加回来，不然编译不过 2.4.8. 不允许添加两个module 规定：不允许添加两个依赖。。。。只添加一个root（子目录framework、packages） 因为 两个依赖之间，无法跳转（飘红之 依赖间无法跳转） 例子： android { ............. sourceSets{ //目录指向配置 main { manifest.srcFile 'AndroidManifest.xml' //指定AndroidManifest.xml文件 java.srcDirs = ['frameworks','packages'] //指定source目录 resources.srcDirs = ['frameworks','packages'] //指定source目录 aidl.srcDirs = ['frameworks','packages'] //指定source目录 renderscript.srcDirs = ['frameworks','packages'] //指定source目录 res.srcDirs = ['frameworks/base/core/res/res']//指定资源目录 assets.srcDirs = ['frameworks/base/core/res/res/assets']//指定assets目录 jniLibs.srcDirs = ['libs']//指定lib库目录 } } } 2.4.9. 关于aidl的调试（万能调试）： 方法一：万能的classes.jar （优的方法，万能且可以包含所有类！！！！） framework.jar原始没有打包加密的jar路径： \\out\\target\\common\\obj\\JAVA_LIBRARIES\\framework_intermediates\\classes.jar 基于此，可以做很多事情： 1、依赖跳转 --》飘红问题 2、依赖编译 --》超越sdk编译 3、依赖断点调试 ---》aidl等调试 方法：1、classes.jar改名framework.jar，添加到依赖里 2、sync后，gradle里有： 3、class文件可以加断点调试（只是行号对不上，因为这是class文件） 注：IActivityTaskManager$Stub$Proxy 指的是IActivityTaskManager类里的Stub类里的Proxy类 方法二： 找到aidl编译出的源码java文件，IActivityTaskManager.java 在app的依赖framework里添加一个路径laji: 特别注意一点：要检查package android.app;没有被IDE修改为laji ----》否则无法断点上 方式三： aidl的理解 2.4.10. 移除module 不能直接删 2.4.11. 技巧： 同时调试 应用+ framework代码： demo和源码放到同一工程，作为不同module，可以同时调试 应用+ framework代码 iml本质 根据gradle中sourceSets生成的依赖关系集合（包括sourceFolder等） 同包的两个类不能引用导致飘红 同包却无法引用-------》 1、方法1：右键，将包名上一级即java作为source --->缺点：source里不能嵌套source，需要将base取消 2、方法2：修改iml文件，可以source嵌套source！ 添加： 技巧：方法2快速添加技巧: 右键java，exclude iml文件会新增： 修改为source-folder 3、方法3： 方法2的界面化操作： 先取消framework的，添加java为source，最后还原framework 图： 2.4.12. 方法一最大的痛点:代码同步 ---> 已解决 本地代码与服务器代码的 修改同步 如何解决？ 方法一：copyToRemote.py 方法二：FreeFileSync软件同步文件夹 方法三：利用FreeFileSync命令行解决代码同步问题 以及第一次copy问题，见 《FreeFileSync》 2.5. 用源码搭建java断点调试环境----法二，不同盘有问题 法二：修改app/build.gradle -----> 在android的域中添加sourcesets项, 指定JAVA的源码目录(java.srcDirs为服务器的java源码目录) 优点：1、服务器代码不用copy到 本地工程目录 2、可以引入多个，甚至不同盘之间 缺点：对网速要求高 #app/build.gradle android { compileSdkVersion 28 .......... sourceSets { main { java { // 在此处添加你需要的代码路径(注意是java目录) srcDirs = [ 'E:\\\\dockerSharedFiles_Gpan\\\\aosp12_r28\\\\frameworks', ] // // //在此处排除目录、文件 ----> 只是不进行打包,不代表不能跳转 // excludes = [ // 'zincStudy/*.java', // 'SoundPicker\\\\.*', // ] //为啥还有这个？ // includes = [\"com/zinc/gradlestudy/MainActivity.java\"] // 在此处添加你需要的资源路径 //resources.srcDirs = ['W:\\\\WCL_WorkSpase\\\\EMUI10.0_GP\\\\packages\\\\apps\\\\Settings\\\\app\\\\src\\\\main\\\\res'] // 清单文件路径 //manifest.srcFile = 'W:\\\\app\\\\src\\\\main\\\\ AndroidManifest.xml' } } } } 优点：保存了源码最原始的目录。。。。srcDirs为指定的 问题1：很大缺点：似乎把整个盘都index了，很慢！！！ -------> TODO: 以前似乎不是这样？？？？ ----------》 根本原因：工程和代码不同盘符造成的！ :解决方法： 把工程项目放到源码服务器内，保存同一个盘符 问题2： 服务器代码，可以跳转，但是显示的颜色没有区分，应该是服务器代码速度不及本地？。正常情况： 问题2解决办法：TODO 参考： 《源码导入IDE说明java_cpp跳转.pdf》 2.6. 用源码搭建java断点调试环境----法三，有问题 settings.gradle中添加： include ':Custom' project(\":Custom\").projectDir = new File(\"I:\\\\dockerSharedFiles\\\\aosp_1200_r28_sourceRoot\\\\frameworks\\\\base\\\\core\") include ':Custom2' project(\":Custom2\").projectDir = new File(\"I:\\\\dockerSharedFiles\\\\aosp_1200_r28_sourceRoot\\\\frameworks\\\\base\\\\services\") 优点：一行修改搞定 问题1： 很大缺点：一个projectDir会变成一个module -------> 左边目录，无法保持aosp源码目录，没有显示frameworks\\base目录（尤其只需要一部分代码时） ​ 两个module之间不能跳转！ 问题1解决办法： 把各个module的最近根目录添加 ----------> 注意：这个时候，文件不会加载到内存里（极优）。所以，按需添加标记source目录（大部分Java目录） 问题2：同方法二。服务器代码，大多时候，不区分颜色 利用iml来改进：按需放开的原则： app/build.gradle -----> 添加了 frameworks 作为source （注意，这个时候，把根目录加进去，不要分多个！！！！！！！！利用iml去分！！！） iml -----> excludeFolder排除整个 frameworks （即相当于整个工程啥也没引进来，然后按需放开） //先排除总的 进一步改进： 编程遍历所有含“Java”目录都放开为source ------> 永久保存对应.iml 复用 总结：优点： 无需copy代码，无需同步修改 2.7. framework java 断点调试 环境（jdb） 主要参考链接： https://developer.aliyun.com/article/24084 https://blog.csdn.net/SCHOLAR_II/article/details/81562459?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.control&spm=1001.2101.3001.4242 java jdb 命令行调试程序 https://blog.csdn.net/arkblue/article/details/39718947 2.7.1. 总结： 1、环境： adb shell am start -D -n com.example.BarrierFree_demo/.MainActivity && @ping -n 3 127.1>nul 2>nul && adb shell ------> 极优：以debug模式打开，给足够的时间attach。不限于jdb，任何调试环境都可以这样！GDB adb shell ps | findstr client adb forward tcp:9000 jdwp:27681 jdb -connect com.sun.jdi.SocketAttach:port=9000,hostname=localhost 2、jdb： stop at com.example.BarrierFree_demo.MainActivity:85 2.7.2. 环境 adb shell ps查看进程的信息： system 835 793 208564 29768 ffffffff afe0c57c S system_server radio 873 793 112816 21252 ffffffff afe0d674 S com.android.phone app_8 876 793 98044 17336 ffffffff afe0d674 S android.process.media app_7 879 793 123780 28452 ffffffff afe0d674 S android.process.acore app_0 926 793 104916 18372 ffffffff afe0d674 S com.google.process.gapps app_11 956 793 96008 16392 ffffffff afe0d674 S com.android.alarmclock app_16 989 793 105304 16772 ffffffff afe0d674 S com.android.mms app_23 999 793 96324 15552 ffffffff afe0d674 S org.broncho.powermonitor app_19 1010 793 98492 16044 ffffffff afe0d674 S com.android.setupwizard app_7 1022 793 106708 19204 ffffffff afe0d674 S com.android.inputmethod.pinyin 建立网络数据转发关系，pid 873 adb forward tcp:9000 jdwp:873 # 查看是否成功 adb forward --list 设置jdb源代码路径，这里设置了android系统内的JAVA路径，如果调试自己的应用程序 ，可以加在后面 set ANDROID_SRC=\"G:\\dockerSharedFiles\\aosp_android1000_r17\\aosp_android1000_r17\" set ANDROID_SRC_PATH=$ANDROID_SRC/frameworks/base/opengl/java:$ANDROID_SRC/frameworks/base/awt/java:$ANDROID_SRC/frameworks/base/core/java:$ANDROID_SRC/frameworks/base/location/java:$ANDROID_SRC/frameworks/base/sax/java:$ANDROID_SRC/frameworks/base/graphics/java:$ANDROID_SRC/frameworks/base/telephony/java:$ANDROID_SRC/frameworks/base/services/java:$ANDROID_SRC/frameworks/base/media/java:$ANDROID_SRC/frameworks/base/wifi/java:$ANDROID_SRC/frameworks/base/im/java:$ANDROID_SRC/dalvik/libcore/suncompat/src/main/java:$ANDROID_SRC/dalvik/libcore/nio_char/src/main/java:$ANDROID_SRC/dalvik/libcore/nio_char/src/main/java/java:$ANDROID_SRC/dalvik/libcore/security-kernel/src/main/java:$ANDROID_SRC/dalvik/libcore/security-kernel/src/main/java/java:$ANDROID_SRC/dalvik/libcore/security/src/main/java:$ANDROID_SRC/dalvik/libcore/security/src/main/java/java:$ANDROID_SRC/dalvik/libcore/archive/src/main/java:$ANDROID_SRC/dalvik/libcore/archive/src/main/java/java:$ANDROID_SRC/dalvik/libcore/awt-kernel/src/main/java:$ANDROID_SRC/dalvik/libcore/awt-kernel/src/main/java/java:$ANDROID_SRC/dalvik/libcore/luni/src/main/java:$ANDROID_SRC/dalvik/libcore/luni/src/main/java/java:$ANDROID_SRC/dalvik/libcore/math/src/main/java:$ANDROID_SRC/dalvik/libcore/math/src/main/java/java:$ANDROID_SRC/dalvik/libcore/x-net/src/main/java:$ANDROID_SRC/dalvik/libcore/openssl/src/main/java:$ANDROID_SRC/dalvik/libcore/dalvik/src/main/java:$ANDROID_SRC/dalvik/libcore/auth/src/main/java:$ANDROID_SRC/dalvik/libcore/concurrent/src/main/java:$ANDROID_SRC/dalvik/libcore/concurrent/src/main/java/java:$ANDROID_SRC/dalvik/libcore/sql/src/main/java:$ANDROID_SRC/dalvik/libcore/sql/src/main/java/java:$ANDROID_SRC/dalvik/libcore/prefs/src/main/java:$ANDROID_SRC/dalvik/libcore/prefs/src/main/java/java:$ANDROID_SRC/dalvik/libcore/xml/src/main/java:$ANDROID_SRC/dalvik/libcore/text/src/main/java:$ANDROID_SRC/dalvik/libcore/text/src/main/java/java:$ANDROID_SRC/dalvik/libcore/luni-kernel/src/main/java:$ANDROID_SRC/dalvik/libcore/luni-kernel/src/main/java/java:$ANDROID_SRC/dalvik/libcore/regex/src/main/java:$ANDROID_SRC/dalvik/libcore/regex/src/main/java/java:$ANDROID_SRC/dalvik/libcore/nio/src/main/java:$ANDROID_SRC/dalvik/libcore/nio/src/main/java/java:$ANDROID_SRC/dalvik/libcore/json/src/main/java:$ANDROID_SRC/dalvik/libcore/crypto/src/main/java:$ANDROID_SRC/dalvik/libcore/icu/src/main/java:$ANDROID_SRC/dalvik/libcore/annotation/src/main/java:$ANDROID_SRC/dalvik/libcore/annotation/src/main/java/java:$ANDROID_SRC/dalvik/libcore/junit/src/main/java:$ANDROID_SRC/dalvik/libcore/logging/src/main/java:$ANDROID_SRC/dalvik/libcore/logging/src/main/java/java:$ANDROID_SRC/dalvik/libcore-disabled/instrument/src/main/java:$ANDROID_SRC/dalvik/libcore-disabled/instrument/src/main/java/java:$ANDROID_SRC/dalvik/libcore-disabled/sound/src/main/java 启动jdb jdb -sourcepath $ANDROID_SRC_PATH -attach localhost:9000 这里的端口号9000，是由前面的tcp:9000决定 附：可能的报错 原因：Android Studio占用了jdb, 关闭Android Studio 重试 需要关闭AS。。。同时再次执行：adb forward tcp:9000 jdwp:17652 2.8. framework Native 断点调试 环境（GDB） 见《GDB》 章节 2.9. framework Native Clion 跳转环境（linux下） 2.9.1. 基本原理 跳转的基本原理：--------1、cmake链接文件正常。 注意：跳转不依赖符号表， 调试 依赖符号表 注：cmake链接文件正常实际上 即：没有飘红 2、index索引完 2.9.2. 具体步驟： 1、编译生成CMakeLists.txt： build目录下有文档build/soong/docs/clion.md // 打开开关，编译时生成CMakeLists.txt export SOONG_GEN_CMAKEFILES=1 export SOONG_GEN_CMAKEFILES_DEBUG=1 // 全编译 make -j32 // 或者编译单独模块 make frameworks/native/service/libs/ui // CMakeLists.txt会生成在 out/development/ide/clion/frameworks/native/libs/ui/libui-arm64-android/CMakeLists.txt 2、导入 新建总的CMakeLists.txt放到 源代码根目录上 具体CMakeLists.txt cmake_minimum_required(VERSION 3.6) project(AOSP-Native) #// CMAKE_HOME_DIRECTORY是系统给定的值 set(ANDROID_ROOT \"${CMAKE_HOME_DIRECTORY}\") set(CMAKE_DIRECTORY_FOR_CLION \"${ANDROID_ROOT}/out/development/ide/clion\") #// 导入各个子cmakeList。工程很多，用到了再导入: add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/art/dalvikvm/dalvikvm-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/art/libdexfile/libdexfile-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/art/runtime/libart-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/external/compiler-rt/lib/sanitizer_common/libsan-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/frameworks/av/media/libaaudio/src/libaaudio-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/frameworks/av/soundtrigger/libsoundtrigger-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/frameworks/base/core/jni/libandroid_runtime-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/frameworks/native/cmds/installd/installd-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/frameworks/native/cmds/servicemanager/servicemanager-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/frameworks/native/libs/binder/libbinder-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/libcore/libjavacore-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/libcore/libopenjdk-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/libnativehelper/libnativehelper-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/libnativehelper/libnativehelper_compat_libc++-arm-android) #// 内核的CMakeLists是自己写的，只导入了头文件，跳转还有问题 #//系统工具 add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/base/libbase-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/init/libinit-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/libziparchive/libziparchive-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/liblog/liblog-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/libcutils/libcutils-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/libutils/libutils-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/libprocessgroup/libprocessgroup-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/logcat/logcatd-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/logcat/logcat-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/logd/logd-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/logd/liblogd-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/lmkd/liblmkd_utils-arm-android) add_subdirectory(${CMAKE_DIRECTORY_FOR_CLION}/system/core/lmkd/lmkd-arm-android) 3、导入 打开CLion 选择「New CMake Project from Sources」 指定包含 CMakeLists.txt 4、 clion编译器配置： 技巧：选择aosp cmakeList指定的clang 。 用Ubuntu的gcc和clang，编译基本上有问题 -----------------> 配置: 编译结果： 2.9.3. 一些问题： 有时候自动生成出来的cmakeList是有问题的，需要手动修改(注意：必须用clion修改，这样clion会重新load project) 比如：导致.h没有进入，导致关联不上.h 2.9.4. 参考： https://blog.csdn.net/iamdy/article/details/106658583 build/soong/docs/clion.md 官方文档 art/tools/generate_cmake_lists.py ------》 自动生成cmakelist的脚本 TODO 2.10. 搜索能力： 1、代码方面： 2、Google方面 2.10.1. 搜索技巧之搜索同类 // Parcel.java private static native long nativeCreate(); .......... private static native boolean nativeHasFileDescriptors(long nativePtr); 比如想要在AOSP native代码中搜索nativeCreate，会很多，但是可以搜索比较独特的nativeHasFileDescriptors 搜索的核心在于，独特，唯一 2.10.2. aosp本地代码 全量搜索 在全量搜索的情况下，由于本地ide导入的代码量大，搜索很慢 -----> 全量搜索，用Android Code Search搜索，速度快，且全 之后，找到本地对应代码路径 在线 + 本地 2.10.3. 对知识点的搜索途径 Google、baidu、new Bing、bibili -技巧： 搜索关键词1-----> 结果，在结果1中找关键词2 以关键词2为base，搜索 .............. --------------> 1、可以扩大搜索范围。 2、应对智障的推荐 例子： 关键词1 ROOT应用 的搜索结果： 找到关键词2： 搜索commocap.c，得到 https://blog.csdn.net/SHH_1064994894/article/details/131966009 Android13 Root实现和原理分析 2.11. 断点环境问题 1、找不到system_process 2、system_process debug过程中，没有断到任何断点上 -------------> 先在APP进程上断点上，然后再尝试system_process 3、attach 上 system_process之后，直接重启 2.12. 断点调试失败的例子--------代码混淆 结论：某些目录下的文件 都没法断点调试，比如： frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/ 原因： 包名混淆了 package com.android.p032wm.shell.windowdecor; ----> 不重要 大量行的顺序变动了 根因：谁做的混淆？为什么做混淆？ 关键字段----proguard 混淆 /frameworks/base/packages/SystemUI/Android.bp 配置了混淆 defaults: [ ................... \"SystemUI_optimized_defaults\", // 【】 混淆配置封装 ], optimize: { proguard_flags_files: [\"proguard.flags\"], }, //frameworks/base/packages/SystemUI/proguard_common.flags 解决办法： 1、取消混淆（验证ok）： 以systemui.apk为例： workingspace/aosp14_0_0_28/frameworks/base/packages/SystemUI/Android.bp systemui_optimized_java_defaults { name: \"SystemUI_optimized_defaults\", soong_config_variables: { SYSTEMUI_OPTIMIZE_JAVA: { optimize: { //enabled: true, 启用了优化 //optimize: true, 设置为优化代码 //shrink: true, 代码缩减 //shrink_resources: true, 资源缩减 //proguard_compatibility: false, // 【】 修改后 enabled: false, // 【】决定性作用 optimize: false, // 【】决定性作用 shrink: false, // 【】决定性作用 shrink_resources: false, // 【】决定性作用 proguard_compatibility: true, }, conditions_default: { optimize: { proguard_compatibility: false, // 兼容性配置，不重要 }, }, }, }, } android_app { name: \"SystemUI\", defaults: [ ................... \"SystemUI_optimized_defaults\", // 【】 混淆配置封装 ], ................... optimize: { proguard_flags_files: [\"proguard.flags\"], // 【】例外情形（类）配置，不重要 }, ................... } 参考（实际都没用上）： Android 代码混淆 proguard.flags proguard 和 proguard.flags文件 mk错误：Verification error in 和Had a hard failure verifying all classes 2、断点在其他类里：(可行，速度快) ​ 向下查找调用，走出/com/android/wm/shell/ 路径 setCornerRadius:3189, SurfaceControl$Transaction (android.view) // 【】比如SurfaceControl，不在 relayout:74, WindowDecoration (com.android.wm.shell.windowdecor) relayout:20, CaptionWindowDecoration (com.android.wm.shell.windowdecor) createWindowDecoration:89, CaptionWindowDecorViewModel (com.android.wm.shell.windowdecor) onTaskChanging:48, CaptionWindowDecorViewModel (com.android.wm.shell.windowdecor) dispatchReady:282, Transitions (com.android.wm.shell.transition) onTransitionReady:118, Transitions (com.android.wm.shell.transition) run:13, Transitions$TransitionPlayerImpl$$ExternalSyntheticLambda0 (com.android.wm.shell.transition) handleCallback:958, Handler (android.os) dispatchMessage:99, Handler (android.os) loopOnce:205, Looper (android.os) loop:294, Looper (android.os) run:67, HandlerThread (android.os) 2.13. debug环境规定： 1、ANR显示crash对话、show后台ANR 2、关闭动画？ 方法一：设置中关闭 方法二：代码里关闭动画： 3、select an APP可以不ANR的 4、次要环境：显示点击的位置 5、加log 或 TAG， 规定： 目的：为了行号一致性，加log不允许增加行数！！！！！！ void relayout(RelayoutParams params) { Log.e(TAG, \"Trying to convert unknown rotation=\" + rotation); ........... } ----------------------> 极优：两份代码不一样，但断点可以同时匹配！ 3. LOG 3.1. system log 作用： 记录手机android上层app以及framework相关活动的log，比如你写的app打印的log，就在这里面 adb shell logcat -v 3.1.1. ProtoLog动态log Android ProtoLog动态开启相关wm logging源码分析补充 https://blog.csdn.net/liaosongmao1/article/details/130597983?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-130597983-blog-110820407.235^v38^pc_relevant_default_base3&spm=1001.2101.3001.4242.1&utm_relevant_index=3 3.2. EventLog 作用： 非常简洁明了地展现当前Activity各种状态 -----》 状态性日志，而不是流程性 ActivityManager、powerManager等相关的log adb shell logcat -b events adb shell logcat -b events | findstr \"am_ wm_\" // 同时过滤AMS与Wms ---------> 注意：普通的adb shell logcat 日志里没有 event log 涉及的源码类： EventLog.java, EventLogTags.java 3.2.1. 参考 http://gityuan.com/2016/05/15/event-log/ Android EventLog含义 ----> 详细 https://blog.csdn.net/junjle/article/details/87184120?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-87184120-blog-117734286.235^v38^pc_relevant_default_base3&spm=1001.2101.3001.4242.2&utm_relevant_index=4 3.3. kernel Log 驱动相关的log ctrl+alt+shift+i 3.4. log环境规定 规定： 1、永远不允许用AS抓log （日志过多，AS端日志会冲掉） 用 adb logcat -c && adb logcat -v time > logcat.txt 2、log buffer选择最大 -----> 否则，有可能丢日志 3.5. 加log技巧 1、log也要注意判断null，否则直接crash，浪费编译时间 ​ 加log，可能导致attach system_process挂了 ​ ------> 规定： ​ （1）每次加完，验证一下 ​ （2）加log要谨慎，判空要做好 2、log和调用栈一起使用 3、避免一行超长，notePad看不方便： // 换行 Log.d(TAG, \"child.mAttachInfo.mTmpInvalRect \" + child.mAttachInfo.mTmpInvalRect + \"\\\\n\" + \"child.getId(): \"+ child.getId() + \"\\\\n\" + \"child.getAccessibilityViewId(): \"+ child.getAccessibilityViewId() + \"\\\\n\" + \"child.getWindowId(): \"+ child.getWindowId()); 4、技巧之： 针对（关键指标，要非常显眼）、差异化对待： （1）比如关注某个接口的时间差 ----------> 如果打印频繁，不好一直做差 ​ 即用Error 打印出来差值（Error自带红色） （2）我们只对时间差高的关心，更进一步 差异化： if （差值 > 70ms ）{ log.e() } else { log.d() } 3.6. view log维测技巧： TODO： 特点：多而杂乱 方法一：以偏概全 ---------------打印含有文字的控件，然后基本知道所有控件的布局（对应关系） ​ -------------> 抓住一点，不及其余 方法二： 直观画图：-----> 也是有文字的才画 直观画图 // 将矩形的数组合并到大数组中 private char[][] mergeArrays(char[][] screen, char[][] rectangle) { int row = rectangle.length; int col = rectangle[0].length; for (int i = 0; i 3.7. AS 日志 过滤 https://blog.csdn.net/qq_38909786/article/details/134416770 日志 过滤 过滤包名加两个字段 package:org.sipdroid.sipua message:=alarm message:600 3.8. 日志问题----------丢日志 AS 或者 logcat发现有丢日志，根因： 日志缓冲区过小 方法一： 缓冲区，直接在配置中，改大：------------------> 防止日志丢失 P13_5G:/system # cat build.prop | grep logd persist.logd.size=8M adb pull /system/build.prop ---> 修改 特别注意： 不能修改 build.prop 的权限（方法：pull & push，不要直接vi修改） 方法二： 参考： https://blog.csdn.net/zhangxu1024/article/details/121374807 报错： logcat: Unexpected EOF! This means that either the device shut down, logd crashed, or this instance of logcat was unable to read log messages as quickly as they were being produced. If you have enabled significant logging, look into using the -G option to increase log buffer sizes. 最终生效： D:\\\\\\\\work\\\\\\\\test\\\\\\\\log>adb shell logcat -g main: ring buffer is 256 KiB (3 MiB consumed), max entry is 5120 B, max payload is 4068 B system: ring buffer is 256 KiB (251 KiB consumed), max entry is 5120 B, max payload is 4068 B crash: ring buffer is 256 KiB (15 KiB consumed), max entry is 5120 B, max payload is 4068 B kernel: ring buffer is 256 KiB (245 KiB consumed), max entry is 5120 B, max payload is 4068 B 修改： adb shell logcat -G 5M --------------------> 很多时候，方法一不生效！！！！！！！！！！！！ ---------------------> TODO: 找到持久化的文件，写成脚本。每次导入jar时执行 方法三：万能方法（验证ok）： 在logd处限制 -----------> 只允许打印E 及以上的日志（其他日志不打印，自然不会过频） setprop persist.log.tag E 参考： Android logcat log输出控制_persist.log.tag-CSDN博客 TODO： log框架： APP 通过UDP---------> logd服务 通过TCP-----------> logcat终端 打印，指的是logd打印；logcat只是取日志 4. 在源码中adb（dump、截图、ui、操作、、、） 打通了源码中执行adb -----> 极其优，可以做的事情非常非常多 精髓： -可以精确的保存当时案发现场 两种方式： // 法一： Runtime.getRuntime().exec(\"screencap -p /data/local/tmp/1111.png\"); // 法二： TODO：com -特别注意的点： 命令不能用重定向，比如 dumpsys display > /data/local/tmp/display.txt 4.1. 权限问题的解决 1、即使在系统进程里，代码里也申请不了su权限，linux侧安卓做了严格校验。。。TODO 2、关闭selinux权限后，代码里可以申请sh权限： ------》 规定：统一不管，用system权限。文件夹也用system Runtime.getRuntime().exec(\"sh\") ----> adb shell setenforce 0 3、------> 其实可以不用申请。直接运行cmd命令。比如截图：Runtime.getRuntime().exec(\"screencap -p /data/local/tmp/1111.png\"); 4、操作相关的文件夹权限也要放开： （1）所有者以及用户不能是root。system和shell似乎都可以？ chmod 777 /data/local/tmp chown -R system /data/local/tmp chgrp -R system /data/local/tmp 补充：见com的《写文件权限》 注： 断点调试下，可以在window下cmd执行。也可以利用Runtime执行cmd 但是注意：当断点系统进程时，am pm等被卡住了，不一定能执行出结果；window下cmd也如此 4.2. 应用之源码中截图，保存png 精确保存当时的图片。注意点： 抛到子线程操作，不要影响主要流程 TODO：《com》 方法一：adb截图 方法二：surfacecontrol 4.3. 应用之源码中dump信息 具体代码 Log.d(TAG, \"start dump:\" + getSystemTime()); myDump(\"dumpsys SurfaceFlinger\",\"/data/local/tmp/sf.txt\"); myDump(\"dumpsys window windows\",\"/data/local/tmp/window.txt\"); myDump(\"screencap -p /data/local/tmp/app.png\",null); myDump(\"uiautomator dump --compressed -d 0 /data/local/tmp/uidump.xml\",null); private static void myDump(String cmd, String outPath) { new Thread(new Runnable() { @Override public void run() { java.io.FileOutputStream fileOutputStream = null; java.io.InputStream fileInputStream = null; try { // 执行CMD命令 Slog.d(TAG,\"cmd start: \" + getSystemTime() + \" \" + cmd); java.lang.Process process = Runtime.getRuntime().exec(cmd); Slog.d(TAG,\"cmd exec done\" + getSystemTime()); if (outPath != null) { fileOutputStream = new java.io.FileOutputStream(outPath); // 获取命令的输出流, line用来观察中间数据！！！ // BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream())); // String line; // while ((line = reader.readLine()) != null ) { // line = line + System.getProperty(\"line.separator\");//换行符 // byte[] bytes = line.getBytes(StandardCharsets.UTF_8); // fileOutputStream.write(bytes); // } // Slog.d(TAG,\"fileOutputStream.write down:\" + getSystemTime()); fileInputStream = process.getInputStream(); byte[] buffer = new byte[2048]; //这里需要足够大，否则数据会丢失 while ((fileInputStream.read(buffer)) != -1) { fileOutputStream.write(buffer); } // 等待命令执行完成:提早关闭，会拿不到数据 int waitValue = process.waitFor();// -----> 有时候会卡, 怎么办？ Slog.d(TAG,\"waitValue:\" + waitValue + getSystemTime()); fileOutputStream.flush(); fileOutputStream.close(); fileInputStream.close(); } else { int waitValue = process.waitFor(); Slog.d(TAG,\"waitValue:\" + waitValue + getSystemTime()); } } catch (IOException | InterruptedException e) { try { fileOutputStream.close(); fileInputStream.close(); } catch (Exception e1) { e.printStackTrace(); Slog.d(TAG, \"chen, out3: e:\" + e1); Slog.d(TAG, \"chen, out3: e:\" + e1.getStackTrace()); } e.printStackTrace(); Slog.d(TAG, \"chen, out3: e:\" + e); Slog.d(TAG, \"chen, out3: e:\" + e.getStackTrace()); } Slog.d(TAG,\"cmd end\"); } }).start(); } static java.text.SimpleDateFormat mdateFormat = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\"); private static String getSystemTime() { long currentTimeInMillis = System.currentTimeMillis(); return \" \" + mdateFormat.format(currentTimeInMillis); } 系统时间currentTimeMillis作为整个trace、log、dump的唯一统一者 具体每个dump中修改： wms： Runtime.getRuntime().exec注意： 加上路径后，会执行成功，但是没有输出文件 -----> 没有报错， 很难定位 java.lang.Process process2 = Runtime.getRuntime().exec(\"dumpsys display > /data/local/tmp/display.txt\"); 很神奇的一个点： String cmd = \"uiautomator dump --compressed -d 0 /data/local/tmp/uidump.xml\"; java.lang.Process process = Runtime.getRuntime().exec(cmd); 在断点下，执行后，没有任何输出。在代码里，可以 4.4. 一些注意点 （1）log不阻塞情况下，log时间戳 = 系统时间（真正dump时间） ----------> 结论：log时间点，暂时可以替代 抛出dump的时间点 时间戳的加法： Log.d(TAG, \"screencap -p end\" + getSystemTime()); 时间戳的最终呈现： （1）log形式 、 直接加在dump.txt中 ------> 会更加精细 （2） @Override void dump(PrintWriter pw, String prefix, boolean dumpAll) { //cg add if (!(toString().contains(\"myapplication\") || toString().contains(\"InputMethod\"))) { Log.d(TAG, toString() + \"dump in\" + getSystemTime()); return; } pw.print(prefix + \"formattedDate=\" + getSystemTime()); // 写进dump里 （2）要非常清楚耗时段在哪里： 规定: 大耗时必须有日志夹出时间段 1、抛出dump 时刻 与 dump真正执行时刻 ----> 大耗时，加日志 2、新起线程，不阻塞，1ms时间差，不用前后都加日志 3、 dump windows 耗时 6ms ----> 一般情况下可以忽略 （3）抛出dump 时刻 与 dump真正执行时刻 ，是有差距的，大概40ms ------> 如何解决这个问题？ 方法一： -将调用点往前挪动，直至log 时间点 与 dump时间点比较接近！！ 技巧： 当前函数，向上两个函数都要加log 方法二：精确做法：见下 4.5. 精确时间点dump-------更好的选择： // dumpsys window windows 对应代码 java.io.FileOutputStream fileOutputStream= new java.io.FileOutputStream(\"/data/local/tmp/111.txt\"); com.android.internal.util.FastPrintWriter pw = new com.android.internal.util.FastPrintWriter(fileOutputStream); //new java.io.PrintWriter(fileOutputStream); WindowManagerService.this.dumpWindowsLocked(pw, true, null); ----------------> 验证ok 优点： 时间很精确（shell dump做不到） 调用点，和执行开始点是一个。 缺点： 限于在系统源码中任意调用（**shell dump可以任意位置，甚至APP侧！**） TODO： 要不要反射？ 要不要启动新线程？ 总耗时不可控： 比如商业应用整个display 的 window过多 需要50ms。但demo只需要5ms --------> 这是最大的问题： 造成调用点的精确，无意义 最终封装， 系统进程任意可用： // wms.LocalService:(WindowManagerInternal也要改) public void dumpWindowsLocked(String outFile) { new Thread(new Runnable() { @Override public void run() { try { java.io.FileOutputStream fileOutputStream= new java.io.FileOutputStream(outFile); com.android.internal.util.FastPrintWriter pw = new com.android.internal.util.FastPrintWriter(fileOutputStream); WindowManagerService.this.dumpWindowsLocked(pw, true, null); pw.flush(); pw.close(); fileOutputStream.close(); } catch (Exception e){ Log.d(TAG, \"dumpWindowsLocked: Exception\" + Arrays.toString(e.getStackTrace())); } } }).start(); } //精确使用： Slog.e(\"chen\", \"chen dumpWindowsLocked start\"); LocalServices.getService(WindowManagerInternal.class).dumpWindowsLocked(\"/data/local/tmp/windows_All.txt\"); 4.5.1. 精确dump时间优化 1、过滤，减少dump的window个数，我们关注的，一般也就一两个，因为io非常耗时 ------> 规定：减少至1~2个，这样便一刻完成 static java.text.SimpleDateFormat mdateFormat = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\"); private static String getSystemTime() { long currentTimeInMillis = System.currentTimeMillis(); return \" \" + mdateFormat.format(currentTimeInMillis); } // WindowState.java @Override void dump(PrintWriter pw, String prefix, boolean dumpAll) { //cg add if (!(toString().contains(\"myapplicat\") || toString().contains(\"InputMet\"))) { // 过滤 Log.d(TAG, toString() + \"dump in\" + getSystemTime()); return; } 2、稍稍提前5ms TODO： 1、推广至AMS： 4.5.2. 总之，所有改动点 dump window // WindowState.java 过滤 + dump时间写入 static java.text.SimpleDateFormat mdateFormat = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\"); private static String getSystemTime() { long currentTimeInMillis = System.currentTimeMillis(); return \" \" + mdateFormat.format(currentTimeInMillis); } @Override void dump(PrintWriter pw, String prefix, boolean dumpAll) { //cg add String name = toString(); if (!(name.contains(\"myapplication\") || name.contains(\"InputMethod\"))) { Log.d(TAG, name + \"dump in\" + getSystemTime()); return; } pw.print(prefix + \"formattedDate=\" + getSystemTime()); // wms.LocalService添加:(WindowManagerInternal也要改) public void dumpWindowsLocked(String outFile) { new Thread(new Runnable() { @Override public void run() { try { java.io.FileOutputStream fileOutputStream= new java.io.FileOutputStream(outFile); com.android.internal.util.FastPrintWriter pw = new com.android.internal.util.FastPrintWriter(fileOutputStream); WindowManagerService.this.dumpWindowsLocked(pw, true, null); // true区分 dump window与dump window Windows pw.flush(); pw.close(); fileOutputStream.close(); } catch (Exception e){ Log.d(TAG, \"dumpWindowsLocked: Exception\" + Arrays.toString(e.getStackTrace())); } } }).start(); } //系统进程任意点，精确使用： Slog.e(\"chen\", \"chen dumpWindowsLocked start\"); LocalServices.getService(WindowManagerInternal.class).dumpWindowsLocked(\"/data/local/tmp/windows_All.txt\"); dump activity 4.5.3. 技巧： 模仿源码是怎么调用的！找到上游调用 4.6. 技巧 可以在debug下先验证代码是否可以运行 对于要经常复制到陌生环境的代码，不要import： 4.7. TODO：其他方式 https://zhaoyf.cn/2021/01/21/selinux-shell-cmd/ https://blog.csdn.net/liaosongmao1/article/details/130502382 安卓车机系统adb shell cmd 源码原理分析 TODO：连续执行多个cmd命令呢？ 4.8. 遇到的问题： “java.io.IOException: Cannot run program \"/system/xbin/su\": error=13, Permission denied -------->selinux权限、文件权限 没有文件输出： 找命令执行的脚本---> 对应代码 dump时刻与调用点时刻的差距： 4.9. 参考： https://blog.csdn.net/qq_37858386/article/details/125002811 2022-05-27 Android Android getRuntime()、exec 执行命令（linux 下的bin文件等）并解得到返回值、执行ping命令 5. 过滤之dump、log、断点debug 循环之恶： log循环造成log疯狂打印 -----> 跟踪耗费精力 dump 循环多个window，造成io时间过长，难以抓第一现场 断点debug ：造成一直停顿-----> 跟踪耗费精力 对付循环的技巧： 过滤 --------> 注意力 配置合理化 ---规定： ​ （1）频繁打印的log。。。。。。一定要加if 过滤 ​ （2）dump内容，加if过滤 只打印自己关注的window ​ （3）debug，条件断点 if 过滤 if过滤技巧： toString + 模糊匹配 // 模糊匹配com.example.myapplication 和 InputMethod输入法两个应用 if (!(toString().contains(\"myappli\") || toString().contains(\"InputMet\"))) { Log.d(TAG, toString() + \"dump in\" + getSystemTime()); return; } 6. 认识工具、发展工具 这是一个思想： -见到任何工具，规定： 1、了解背后的原理, 拆开来看 -----> 定位工具bug、扩展功能 比如： 2、了解背后的思想 -------------> 才可以拓展自己的 6.1. TODO 安卓的很多工具都在这里： 比如截图、 TODO： 如何破坏各种权限？ 7. log、debug适用的场景 1、对于复杂问题，log是最终手段，疯狂加log 2、debug适合一次调用 ​ 适合看变量的值 ​ 看调用栈（一次调用） 循环调用的函数（for遍历的、多次调用的）-------> 适合用log来看 生命周期这种（循环分发的）-------> log TODO: log与debug结合？ log的分层模型设计 log如何处理多线程？ log与trace的结合 ​ 8. dump 8.1. 具体含义见各章节 9. 如何定位bug？ 思路层面 9.1. 定位bug总体原则 原则1：最好的情况，能找到一个没有bug的环境（如何能找到，已经成功了一大半）： ​ 比如： 其他设备、其他仓代码、其他应用、其他人的环境 原则2：在定位问题之前，先初步界定 问题的范围（目的在于：正向定位太细太耗时间，缩小范围可以大大缩短时间）： ​ 比如显示问题，是Activity级别的，window级别的，还是view级别的 原则3：第一要义是改值坐实，最后的最后才分体深层次原因 --------> 目的：还是缩小范围，不浪费正向定位的精力 ​ 比如：弹框没谈出来，涉及到很多状态。可以直接debug动态修改标志数值，来验证哪一个影响了。最后才追溯 标志值的来源，为什么是这个值，以及判定的代码逻辑（一般很长，没必要读） 原则:4：正向定位时，先从主干、核心节点入手。看流程是否完整。 ​ 比如显示问题，首要的是：activiy生命周期是否完整 原则5：解耦 + 化简。我们永远不可能理解复杂的东西。 ​ 化简之排除干扰------------闪屏问题：关闭动画 ​ ------------ 抓log，先清一把； debug时，先把之前应用杀掉，从头再来（保证环境一致） 原则6： 尽量做化简，无论是不是问题的根因、无论是否有影响： ​ 先列举所有可能影响因素 ​ 为啥我想不到要关闭动画？ 原则7：断点和log，作为定位的第一步，是灾难性质的 ​ 因为纵向，陷入细节，太费精力 9.2. 显示问题定位 上面总体原则 显示问题，关键点： 1、layer的层级位置： TaskDisplayArea.adjustRootTaskLayer() 2、surface可见性决定的地方： surfaceControl.hide 或者 cpp surfaceFlinger的入口， SurfaceComposerClient.setFlag ​ TODO: 按道理，所有的窗口级别的hide，都会走到这里 3、看一下生命周期是否紊乱 9.3. 闪屏问题定位： 1、化简之排除干扰 ---------> 关闭动画： 法一：开发者选项里，关闭动画 法二： 反射方法，破坏系统动画功能 ----------> 这是一种万能方法 # 在WMS流程中 2、winscope，见winscope章节 9.4. 缺少应用代码的情况下的定位 1、反编译 TODO: 反编译技能 2、framework ap层本身就可以断点 3、纯APP进程的APP层代码，可否无源码调试？ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/Docker.html":{"url":"Tool/Docker.html","title":"Docker","keywords":"","body":"1. 目录2. docker2.1. docker账号：2.2. 目前使用的版本2.2.1. images版本2.2.2. docker版本2.3. docker安装配置2.3.1. Docker Desktop 安装2.3.2. 安装后，修改docker的镜像目录 2.3.3. 源的配置---> 可选2.4. 教程链接2.5. docker 代理配置2.5.1. 法一： Ubuntu内部设置代理2.5.2. 法二： 宿主win给 Ubuntu共享代理网络2.6. docker命令2.6.1. docker启动：2.6.2. 挂载磁盘2.6.3. ssh链接2.6.4. 账号2.6.5. docker commit（禁止使用）2.6.6. Dockerfile 定制镜像2.6.7. 合并镜像层 squash2.6.8. Docker 容器连接的优化：2.6.9. 远端2.6.10. 根据镜像id修改镜像tag名2.6.11. docker网站，2.6.12. 下载别人的镜像2.6.13. 镜像保存成jar到本地2.6.14. 镜像保存成tar到本地2.7. 优化2.7.1. 配置修改优化2.7.2. 突破docker的swap大小2.8. CPU使用率优化 docker pause2.9. 文件系统过大优化2.9.1. 优化之 只保存系统文件到 jar2.9.2. 保存到tar文件2.9.3. 时间优化之 两份aosp同时解压2.9.4. 时间优化之 build squash 时，容器可用2.9.5. 优化之 任何差异保存到window路径下----减少commit2.9.6. 镜像优化之合并镜像层 squash2.9.7. docker rmi 删除镜像2.9.8. 磁盘overlay满了 docker system prune2.9.9. img优化 & DockerDesktop.vhdx优化 --------> docker的最大难题2.9.10. 优化之 复制 DockerDesktop.vhdx----->save jar的保底2.9.11. 优化之 保存jar 与 进入容器使用 并行2.9.12. 积木化思想2.9.13. 总结所有优化2.10. 技巧之保存 每个特性代码2.11. error2.11.1. docker报错:图标变红 方法1：2.11.2. 启动异常报错-->方法2:2.11.3. 启动异常报错 方法3:（优）2.11.4. 启动异常报错 方法4:（极优）2.11.5. build或者保存jar，no space2.12. docker连 主机pc连的安卓设备2.13. docker容器安装图形桌面2.13.1. 问题1：VNC连不上的2.13.2. 关于VNC 客户端的选择2.14. 剪切板复制 docker与win2.14.1. 报错与解决办法2.15. 一些环境规定：2.16. 关于docker网络的几个概念区分：2.17. 优化2.18. docker目前存的的问题与不便2.19. docker挂载解决IO速度慢的问题2.20. 共享之 docker 内配置samba ----> TODO: 未成功2.20.1. 进展：2.21. 共享之 利用 sshfs挂载远程文件夹3. wsl3.1. wsl 安装到e盘3.2. 使用wsl安装ubuntu3.3. wsl挂载 硬盘（硬件接在win上）3.3.1. 步骤3.3.2. win下如何看linux磁盘(ext4)文件？3.4. 在win资源管理器访问wsl中Ubuntu------类似于samba3.5. wsl从tar安装ubuntu3.6. 其他认知3.7. WSL2 使用相关 参考3.8. 当前wsl账号:4. VirtualBox4.1. VirtualBox安装Debian11/Ubuntu4.2. VirtualBox Ubuntu无法复制粘贴以及无法安装增强功能：4.3. VitrualBox中备份Ubuntu4.4. VirtualBox 扩容4.5. del_VirtualBox 扩容 反操作：4.6. VirtualBox共享目录4.7. virtualbox中ubuntu 磁盘满了，无法开机4.8. virtualbox中ubuntu启动失败4.9. 如何配置virtualbox 处理器核心数？4.10. virutualBox快捷键4.11. ubuntu设置分辨率4.12. Windows无法ssh连接Virtualbox（VMware）4.13. Virtualbox 网络连接----很优4.14. virutualBox 连手机5. virtualbox安装 macOS5.1. 步骤：5.2. 关键问题：5.3. 系统快照----备份5.4. 共享目录/共享剪切板5.5. 其他参考6. wmWare6.1. wmWare优缺点：6.2. wmWare联网6.3. wmWare下ubuntu 访问外网（宿主win 代理网络）6.3.1. 结构：6.3.2. win侧设置：6.3.3. Ubuntu设置:6.3.4. 问题：以上步骤都执行了，仍然无网6.3.5. 参考：6.4. wmWaressh6.5. wmWare 挂载 物理硬盘（物理分区）-----扩容6.6. adb连手机6.7. ssh远程连接到VMware虚拟主机6.8. 虚拟机和主机共享文件夹步骤：6.9. 扩容6.10. 一些问题 & 报错6.10.1. linux adb连接手机报错：6.10.2. “拍摄快照” 无法使用 docker docker账号： 目前使用的版本 images版本 docker版本 docker安装配置 Docker Desktop 安装 安装后，修改docker的镜像目录 源的配置---> 可选 教程链接 docker 代理配置 法一： Ubuntu内部设置代理 方法一步骤 配置核心执行文件 订阅配置 最终结果： 遇到的问题： 基于方法一，给Ubuntu配置系统全局代理---一个终端(临时) 基于方法一，给Ubuntu配置系统全局代理---持久化 基于方法一，Ubuntu下浏览器链接代理 基于方法一，Ubuntu下clion链接代理 法二： 宿主win给 Ubuntu共享代理网络 docker命令 docker启动： 挂载磁盘 ssh链接 账号 docker commit（禁止使用） Dockerfile 定制镜像 关于Dockerfile详细说明： 合并镜像层 squash Docker 容器连接的优化： 远端 docker账号登录：docker login docker push 根据镜像id修改镜像tag名 docker网站， 下载别人的镜像 镜像保存成jar到本地 镜像保存成tar到本地 优化之 保存jar 优化 配置修改优化 突破docker的swap大小 CPU使用率优化 docker pause 文件系统过大优化 优化之 只保存系统文件到 jar 保存到tar文件 时间优化之 两份aosp同时解压 时间优化之 build squash 时，容器可用 优化之 任何差异保存到window路径下----减少commit 镜像优化之合并镜像层 squash docker rmi 删除镜像 磁盘overlay满了 docker system prune img优化 & DockerDesktop.vhdx优化 --------> docker的最大难题 优化之 复制 DockerDesktop.vhdx----->save jar的保底 优化之 保存jar 与 进入容器使用 并行 积木化思想 总结所有优化 技巧之保存 每个特性代码 error docker报错:图标变红 方法1： 启动异常报错-->方法2: 启动异常报错 方法3:（优） 启动异常报错 方法4:（极优） build或者保存jar，no space docker连 主机pc连的安卓设备 docker容器安装图形桌面 问题1：VNC连不上的 关于VNC 客户端的选择 剪切板复制 docker与win 报错与解决办法 一些环境规定： 关于docker网络的几个概念区分： 优化 docker目前存的的问题与不便 docker挂载解决IO速度慢的问题 共享之 docker 内配置samba ----> TODO: 未成功 进展： 共享之 利用 sshfs挂载远程文件夹 wsl wsl 安装到e盘 使用wsl安装ubuntu wsl挂载 硬盘（硬件接在win上） 步骤 win下如何看linux磁盘(ext4)文件？ 在win资源管理器访问wsl中Ubuntu------类似于samba wsl从tar安装ubuntu 其他认知 WSL2 使用相关 参考 当前wsl账号: VirtualBox VirtualBox安装Debian11/Ubuntu VirtualBox Ubuntu无法复制粘贴以及无法安装增强功能： VitrualBox中备份Ubuntu VirtualBox 扩容 del_VirtualBox 扩容 反操作： VirtualBox共享目录 virtualbox中ubuntu 磁盘满了，无法开机 virtualbox中ubuntu启动失败 如何配置virtualbox 处理器核心数？ virutualBox快捷键 ubuntu设置分辨率 Windows无法ssh连接Virtualbox（VMware） Virtualbox 网络连接----很优 virutualBox 连手机 virtualbox安装 macOS 步骤： 关键问题： 系统快照----备份 共享目录/共享剪切板 其他参考 wmWare wmWare优缺点： wmWare联网 wmWare下ubuntu 访问外网（宿主win 代理网络） 结构： win侧设置： Ubuntu设置: 问题：以上步骤都执行了，仍然无网 参考： wmWaressh wmWare 挂载 物理硬盘（物理分区）-----扩容 adb连手机 ssh远程连接到VMware虚拟主机 虚拟机和主机共享文件夹步骤： 扩容 一些问题 & 报错 linux adb连接手机报错： “拍摄快照” 无法使用 1. 目录 2. docker 官方文档是学习一门新技术的灯塔 官方用户手册 https://docs.docker.com/docker-for-windows/#file-sharing 2.1. docker账号： ID chen85 账号 1519........ 2.2. 目前使用的版本 2.2.1. images版本 每个版本增加什么功能！！！！！ 2.2.2. docker版本 原始安装版本以及更新后的版本： docker version 2021年10月： 2022年11月： 2.3. docker安装配置 2.3.1. Docker Desktop 安装 分为WSL2方式和 Hyper-v方式 注意：install required windows components for WSL 2 不要勾选 原因在于：上面勾选了WSL 2, 后面 setting中配置 resources只能用 .wslconfig 文件来配置了 ​ 1、不勾选 WSL 2 --->使用的是Hyper-V ---> 界面配置： ​ 2、勾选 ---> 使用的是WSL 2 ---> .wslconfig 文件配置 2.3.2. 安装后，修改docker的镜像目录 跟版本有关！！！！！！！ 其他版本可能可以用： mklink /J \"C:\\Users\\Public\\Documents\\Hyper-V\\Virtual Hard Disks\" E:\\docker\\Hyper-V docker的配置文章： https://www.it610.com/article/1290832596699258880.htm https://www.runoob.com/docker/docker-mirror-acceleration.html https://blog.csdn.net/whatday/article/details/86770609 https://www.cnblogs.com/brock0624/p/9792203.html 2.3.3. 源的配置---> 可选 { \"builder\": { \"gc\": { \"defaultKeepStorage\": \"20GB\", \"enabled\": true } }, \"registry-mirrors\": [ \"https://registry.docker-cn.com\", \"http://hub-mirror.c.163.com\", \"https://docker.mirrors.ustc.edu.cn\" ], \"debug\": true, \"experimental\": true, \"features\": { \"buildkit\": true } } 2.4. 教程链接 https://yeasy.gitbook.io/docker_practice/image/build docker入门到实践 https://docs.docker.com/engine/reference/commandline/image_build/ 官方文档，包括所有命令参数 https://docs.docker.com/desktop/ 2.5. docker 代理配置 2.5.1. 法一： Ubuntu内部设置代理 （与宿主win无关） docker run ^ -p 127.0.0.1:10000:22 ^ -p 127.0.0.1:15901:5901 ^ --cap-add SYS_ADMIN --device /dev/fuse ^ -t -i -v I:\\dockerSharedFiles:/home/cg, /workingSpace/local ^ -v H:\\dockerSharedFiles_Gpan\\dockerSharedFiles_Gpan:/home/cg/workingSpace/local2 %imagesId% /bin/bash // --cap-add SYS_ADMIN --device /dev/fuse 作用： qv2ray会使用到fuse，见 https://stackoverflow.com/questions/48402218/fuse-inside-docker https://stackoverflow.com/questions/51263555/riofs-fuse-device-not-found 教程：TODO: 完善自己的 https://bwfish.xyz/archives/linux%E4%B8%AD%E5%8F%AF%E7%94%A8%E7%9A%84%E6%9C%BA%E5%9C%BA%E5%B7%A5%E5%85%B7qv2ray. https://www.zsxcool.com/7137.html 方法一步骤 配置核心执行文件 订阅配置 最终结果： 注意：方法一的关键点：ping的时间在100ms左右。否则，打开Google非常卡，有时候打不开；Clion用不了 遇到的问题： 脚本执行后，卡在这个位置 解决办法：新开一个terminal， 再次执行： sudo ./Qv2ray-v2.7.0-linux-x64.AppImage # if clinet UI does apper, try sudo ./Qv2ray-v2.7.0-linux-x64.AppImage again 有时候遇到界面没有跳出来，需要手动点开： 基于方法一，给Ubuntu配置系统全局代理---一个终端(临时) todo： 是不是clion和浏览器就不用配置了？-----> 测试浏览器不是 参考：Ubuntu设置全局socks代理 https://blog.csdn.net/weixin_45033342/article/details/118075525?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-118075525-blog-128040047.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-118075525-blog-128040047.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2 export ALL_PROXY='socks5://127.0.0.1:1089' //验证 curl http://www.baidu.com curl http://www.google.com curl https://www.google.com 取消设置的代理 unset ALL_PROXY 基于方法一，给Ubuntu配置系统全局代理---持久化 # 配置代理 编辑vi ~/.bashrc，增加代理配置 ----> 持久化 export http_proxy=\"127.0.0.1:8889\" export https_proxy=\"127.0.0.1:8889\" 或 export ALL_PROXY='socks5://127.0.0.1:1089' 注意： 此处在bashrc中配置了HTTP代理，但它可能会影响那些需要访问本地网络的bash命令行工具的使用。譬如：kubernetes集群客户端工具kubectl。在开启代理的情况下，kubectl无法顺利连接到APIServer，需要unset http_proxy和https_proxy两个环境变量，才可恢复正常。 基于方法一，Ubuntu下浏览器链接代理 基于方法一，Ubuntu下clion链接代理 2.5.2. 法二： 宿主win给 Ubuntu共享代理网络 ----> TODO: 不知道怎么用的 VMware是成功了的，见相关章节 2.6. docker命令 2.6.1. docker启动： docker images -a 暂时不用： docker run -t -i eca1757c6d5c /bin/bash 2.6.2. 挂载磁盘 主机F:\\shareFiles挂载到/home/chen目录下 docker run -t -i -v F:\\shareFiles:/home/chen/workingSpace/local f2bab1877e15 /bin/bash 前提： 下面命令，包括：挂载，以及ssh ------------>常用链接 需修改： 13874e71186c docker run -p 10000:22 -t -i -v G:\\dockerSharedFiles:/home/chen/workingSpace/local -v H:\\dockerSharedFiles_Gpan\\dockerSharedFiles_Gpan:/home/chen/workingSpace/local2 403c641a0264 /bin/bash ---->目前：10000需要改成20000 注意：需设置 2.6.3. ssh链接 关于ssh链接： https://blog.csdn.net/Leo_csdn_/article/details/96150534?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param https://blog.csdn.net/qq_37955980/article/details/83044482 docker学习之ssh连接 https://blog.csdn.net/vincent2610/article/details/52490397?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param ssh远程连接docker中的container 主机端口：10000 使用MobaXterm远程连接步骤： （1）进入容器并重新开启ssh ----> 每次都需要 [root@68e7598797d7 /] # /usr/sbin/sshd -D & （2）使用MobaXterm远程连接 通过xshell或者其他连接工具进行远程连接了，记住，ip是宿主机的IP地址，端口号宿主机上的端口，=即上面端口映射命令中的10000 ！ 注意:主机ip很容易变动！！！！ MobaXterm设置：框内是主机的ip，即是IPV4 2.6.4. 账号 user：cheng 密码：151937Cgkent. root账号密码：151937Cgkent. 注意：最初cmd窗口就是root 2.6.5. docker commit（禁止使用） docker ps -l docker commit 7a96e91 newName: v2 Ubuntu镜像 规定提交的格式为： 1、 docker tag 1be049d70e93 chen85/ubuntu16.04_aosp1000_r17:v1 --->这个是docker hub push识别的格式 2、或：docker commit 7a96e91 chen/ubuntu16.04_aosp1000_r17:v1 禁止原因： docker commit 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿 2.6.6. Dockerfile 定制镜像 docker build使用 Dockerfile 定制镜像 ---> 防止image臃肿 #H:\\docker_anzhuang2\\Dockerfile FROM chen85/ubuntu16.04_aosp1000_r17:v1 RUN echo '这是一个本地构建的nginx镜像' > /home/chen/index.html 在 Dockerfile 文件所在目录执行： docker build -t chen85/ubuntu16.04_aosp1000_r17:v2 . 关于Dockerfile详细说明： 概念： 技巧：用一个RUN命令替代多个 ---> 产生一个层 FROM debian:stretch RUN apt-get update RUN apt-get install -y gcc libc6-dev make wget RUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" RUN mkdir -p /usr/src/redis RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 RUN make -C /usr/src/redis RUN make -C /usr/src/redis install 正确： FROM debian:stretch RUN set -x; buildDeps='gcc libc6-dev make wget' \\ && apt-get update \\ && apt-get install -y $buildDeps \\ && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\ && mkdir -p /usr/src/redis \\ && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\ && make -C /usr/src/redis \\ && make -C /usr/src/redis install \\ && rm -rf /var/lib/apt/lists/* \\ && rm redis.tar.gz \\ && rm -r /usr/src/redis \\ && apt-get purge -y --auto-remove $buildDeps 到这一组命令的最后添加了清理工作的命令，清理了所有下载、展开的文件，并且还清理了apt 缓存文件 2.6.7. 合并镜像层 squash --squash --> Squash newly built layers into a single new layer 优点：1、把Image多层变成一层，合并多个commit，有效减小体积！ docker build --squash -t chen85/ubuntu16.04_aosp1000_r17:v4 . --->默认使用了Dockerfile，需要修改 2、docker history 076f7dad0851 信息并没有减 查看层数： -注意： squash 能生效是有前提的： 至少： \"experimental\": true, \"buildkit\": true 对应设置界面： 2.6.8. Docker 容器连接的优化： 原始： docker run ^ -p 10000:22 ^ -p 15901:5901 ^ -t -i -v G:\\dockerSharedFiles:/home/cg, /workingSpace/local ^ -v H:\\dockerSharedFiles_Gpan\\dockerSharedFiles_Gpan:/home/cg, /workingSpace/local2 4753178ab18f /bin/bash MobaXterm链接时的ip使用主机的： 对应运行的 优化： docker run ^ -p 127.0.0.1:10000:22 ^ -p 127.0.0.1:15901:5901 ^ -t -i -v G:\\dockerSharedFiles:/home/cg, /workingSpace/local ^ -v H:\\dockerSharedFiles_Gpan\\dockerSharedFiles_Gpan:/home/cg, /workingSpace/local2 4753178ab18f /bin/bash MobaXterm链接时的ip使用主机的127.0.0.1，固定！！！！ 相当于有一层代理，具体使用时，不用管具体ip是多少 对应运行的 2.6.9. 远端 docker账号登录：docker login chen85 docker push docker push tag 1be049d70e93 chen85/ubuntu16.04_aosp1000_r17:v1 见：https://www.cnblogs.com/kevingrace/p/9599988.html 通过容器提交镜像（docker commit）以及推送镜像（docker push）笔记 下载 2.6.10. 根据镜像id修改镜像tag名 修改镜像tag： docker tag $IMAGE_ID : docker tag 194d8716 cg, /ubuntu16.04_aosp1200_r28:last 2.6.11. docker网站， 类似gitHub https://hub.docker.com/ 2.6.12. 下载别人的镜像 docker pull wangshibo/myubuntu:v1 2.6.13. 镜像保存成jar到本地 https://blog.csdn.net/qq_37797234/article/details/103660748 保存镜像到本地！！！！ docker save ubuntu16.04_0902 -o E:\\docker\\ubuntu16.04_0902.jar docker save cheng/ubuntu16.04_aosp1000_r17:vnc_ok -o H:\\docker_jarFiles\\ubuntu16.04_aosp1000_r17_vnc_20221026.jar 加载本地镜像 C:\\Users\\xixi>docker load -i F:\\VirtualMachine\\Docker\\ubuntu.jar 2.6.14. 镜像保存成tar到本地 docker save ubuntu16.04_0902 -o E:\\docker\\ubuntu16.04_0902.tar docker save cheng/ubuntu16.04_aosp1000_r17:vnc_ok -o H:\\docker_jarFiles\\ubuntu16.04_aosp1000_r17_vnc_20221026.tar 加载本地镜像 C:\\Users\\xixi>docker load -i F:\\VirtualMachine\\Docker\\ubuntu.tar 优化之 保存jar 规定（优）： 1、在物理磁盘小的情况下，build+ 保存jar，先删除源码 --------> 节省最终存储jar的空间 2、保存jar时，如果出现no space。见《build或者保存jar，no space> 2.7. 优化 2.7.1. 配置修改优化 原则： 1、从配置文件修改（优），而不是界面操作 ​ 没启动docker时，从配置文件修改，只需要启动一次 比如： \"dataFolder\": \"D:\\\\programFiles\\\\dockerDesktop\\\\DockerDesktop\", 对应设置： 对应设置界面： 2.7.2. 突破docker的swap大小 问题： 1、 settings中最大4GB 2、无法在Ubuntu容器内 扩展 swap分区： ----------------------> 用dd 和 swapn命令，不能应用于overlay类型文件！！！！ $ df -h Filesystem Size Used Avail Use% Mounted on overlay 1.2T 291G 867G 26% / -----> overlay!!!!! tmpfs 64M 0 64M 0% /dev 解决办法： 从配置文件中修改： C:\\Users\\Administrator\\AppData\\Roaming\\Docker\\settings.json \"swapMiB\": 4096, -------> \"swapMiB\": 32768, 参考： https://stackoverflow.com/questions/60325478/how-to-increase-swap-size-on-docker-for-windows 2.8. CPU使用率优化 docker pause docker pause/unpause 不用时，docker puase ---> sleep 容器内所有进程 ------> 极大的降低CPU使用率 2.9. 文件系统过大优化 2.9.1. 优化之 只保存系统文件到 jar 规定： 1、导出jar时，只保存系统，不保存代码 -------> 背后思想，提取重复 方法：squash过程中删除代码 2、代码+系统的演进，仍然用squash之前的 ------> 因为包含代码 ​ squash后的img导出jar后，就删除！ 关系如图： 演进的始终是一个东西 版本只是一个时间点的快照 大大减小了系统版本快照大小。且不影响 演进 2.9.2. 保存到tar文件 ---------> 可以给wsl使用 2.9.3. 时间优化之 两份aosp同时解压 基于《优化之 只保存系统文件到 jar》 ---------> aosp用压缩包解压策略： 可以两份同时解压，但cpu也只用到了10% 2.9.4. 时间优化之 build squash 时，容器可用 实际上，只有commit时，容器不能用，其他都可以 ------> 所以，基于容器角度，结论： build squash以及保存jar等，不影响我们的正常工作（在容器内） 2.9.5. 优化之 任何差异保存到window路径下----减少commit -极优 目的：减少commit 步骤： 1、 把变化保存在windows里，不进行commit 比如 .myfunction.sh .my_start.sh 2、在启动时候，从win复制过去 ----------------------> 此方法问题： 如果改动在越来越多文件里扩散，就比较麻烦 总结： 在常用的文件里可以如此改动 减少commit，可以用squash方法替代 2.9.6. 镜像优化之合并镜像层 squash 方法见上 优点： 1、压缩到一层：减小 2、独立性： 压缩后的镜像不依赖其他镜像，其他可删 2.9.7. docker rmi 删除镜像 方法一：通过imageID： docker rmi ee7cbd482336 删除镜像难以删除的情况： 1、一个ImageID 对应多个 repositories： 删除方法（优）： 注意：不能在cmd下运行 docker rmi chen85/ubuntu16.04_aosp1000_r17:v1 2、被正在运行的容器关联了： container 368027944f2e is using its referenced image 方法：删除所有容器，再删image docker stop $(docker ps -a -q) #全关 docker rm $(docker ps -a -q) #删除全部容器 docker rmi ubuntu16.04_aosp1000_r17:latest #删除image 2.9.8. 磁盘overlay满了 docker system prune docker system prune ----> 已经验证，十分有用： 清除不用的镜像和缓存 https://www.cnblogs.com/wswang/p/10736726.html 例子： docker system prune 之后： （3)删？？？？‪ (2) https://segmentfault.com/q/1010000020545464 https://www.jianshu.com/p/9174914ec07d 2.9.9. img优化 & DockerDesktop.vhdx优化 --------> docker的最大难题 img大小（即保存的jar大小） ------ > 可以由squash优化压缩 -DockerDesktop.vhdx 大小 一般会大于 最大img大小（即使只有一个img） 根本原因： .vhdx 大小 是历史上最大的文件系统（即使后面删除很多文件，也不会减小） -------------------------> 针对于docker这些特性： （1）在linux侧，不保存差异 （2）差异保存在win侧：每次启动的 img都一样，DockerDesktop.vhdx 大小 也都一样（即保证永远不会恶化） ​ 即： 重启一致性 （3）观察df -h，avail的存储指标。小，则会报错no space （4）优化df -h： 长时间没有关闭linux，这个很容易被用完。利用重启一致性，来恢复avail 区域大小 ​ ---------------> 这反而成为docker的优点 2.9.10. 优化之 复制 DockerDesktop.vhdx----->save jar的保底 目的： 1、尽管减少commit，但是随着演进，img越来越大。最终导致磁盘太小，无法save jar，需要挪盘----->save jar的保底 2、做备份 -移动文件需要everyone权限 2.9.11. 优化之 保存jar 与 进入容器使用 并行 这个两个 可以并行：docker 与 容器内，可以并行 -----> 节省时间 2.9.12. 积木化思想 ubuntu纯净系统： -----> squash时，删除aosp代码 优点： 保存的jar包很小 经常变化的文件： 存储于win文件系统。开机后，sync过去 aosp代码： 过大，可以以zip压缩形式，存储于win。然后解压到linux中 -------------------> 总结： 积木化思想 2.9.13. 总结所有优化 docker容器内文件系统过大表现： （1）容器内部看：overlay used很大 （2）从win来看： --------------------> overlay used很大根因： （1）文件系统包括了 aosp代码 --------> 没必要保存，squash时+ 保存jar 时，删掉 （2）即使没有aosp代码，有时候也很大 ------> 因为历史镜像最大值 + 缓存造成的 ​ a. squash压缩得到一个新的独立镜像 ------> 因为独立，可以删除其他所有镜像 ​ b. docker system prune 清除缓存 ​ -技巧： ​ 先删除大文件，比如aosp，然后docker system prune 清除缓存 时间优化， 总结： 1、 2、 2.10. 技巧之保存 每个特性代码 2.11. error 2.11.1. docker报错:图标变红 方法1： cmd报错：open //./pipe/docker_engine: The system cannot find the file specified. 解决方法： 重置配置，，，，再重启电脑 reset to factory defaults ----> 规定：后面不准用这种方法，会造成setting改变 2.11.2. 启动异常报错-->方法2: 运行docker出现System.InvalidOperationException错误 解决办法： 1.管理员方式运行cmd 2.输入命令：netsh winsock reset 3.重新启动Docker 4.重新switch to Linux Containers 5.成功 技巧，特别注意： 此时，应该所有的image都没有了。尽量不要重新load image，应该把这个文件复制到setting目录下面 移动文件需要everyone权限 2.11.3. 启动异常报错 方法3:（优） reset to factory defaults仍然报错 ----> 规定：后面不准用这种方法，会造成setting改变 --->技巧：不要重新装docker软件 关闭docker，重启win，删除DockerDesktop.vhdx，启动docker ---->docker会自动生成 优点：不用重新装docker，setting不会变 2.11.4. 启动异常报错 方法4:（极优） 1、备份好的DockerDesktop.vhdx 2、基于方法3，恢复环境 3、copy .vhdx至目录下，重启 ----> 优化了load jar的时间 TODO: 以后备份都用.vhdx？ 而不是jar？ 2.11.5. build或者保存jar，no space 报错： Error response from daemon: write /var/lib/docker/tmp/docker-export-1172560351/26512da3e9ed0583440e8dee1123b7548cef5b82a5cc9954ba36e354a 3db6e57/layer.tar: no space left on device 问题根因： 这里给docker的空间小了（相比于已经存在的img） 办法： 设置扩大diskSizeMiB --------------> 如果物理磁盘不够了，就挪动到其他盘。方法，见《docker优化之 复制 DockerDesktop.vhdx> 参考： https://devpress.csdn.net/cloud-native/645cf29477f0ca41cb317090.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDUyNjk2LCJleHAiOjE2OTUzMTIzMDQsImlhdCI6MTY5NDcwNzUwNCwidXNlcm5hbWUiOiJ3ZWl4aW5fMzgxOTkzODEifQ.xIBvzCJnk72YDqUIB6k1ZsDN6yx0IlPq-bCs7XSvrr0 2.12. docker连 主机pc连的安卓设备 1、宿主为windows： https://testerhome.com/topics/8049 https://blog.csdn.net/qq_42693848/article/details/109505849 使用方法 ​ 宿主windows侧：起服务 安装 nodejs 推荐使用 nvm 安装： http://events.jianshu.io/p/5db570f53e6a win10中使用nvm安装nodejs遇到的坑整理 ------> ==很好的教程== 安装 adbkit $ npm i -g adbkit 启动 usb 转 tcp 服务 $ adbkit usb-device-to-tcp -p $port $serial // serial是手机序列号 比如：adbkit usb-device-to-tcp -p 7788 FA6930305260 docker侧：连接服务 在docker侧（装有 adb 的机器上）进行设备的连接 假设启动 adbkit 服务的机器 ip 是 10.0.0.1 端口是 15555 ----> ip试了HOST的真实ip，以及 $ adb connect 10.0.0.1:7788 ​ -万能方法： 为了方便docker提供了专门的标志表示母机的ip：host.docker.internal ​ 见：https://blog.csdn.net/qq_42693848/article/details/109505849 adb connect host.docker.internal:$port adb connect host.docker.internal:7788 其他注意事项 adb连接手机默认使用的是5037，母机与容器交互的接口无法在使用该端口，需要选择其他端口。 2、宿主linux：https://stackoverflow.com/questions/29563183/connecting-to-a-usb-android-device-in-a-docker-container-via-adb 2.13. docker容器安装图形桌面 VNC远程win： tigervncserver -vncClient 参考： https://blog.csdn.net/lxyoucan/article/details/121679346 视频教程：https://www.bilibili.com/video/BV1mL41177Av 总之，使用： docker run ^ -p 10000:22 ^ -p 15901:5901 ^ -t -i -v G:\\dockerSharedFiles:/home/chen/workingSpace/local ^ -v H:\\dockerSharedFiles_Gpan\\dockerSharedFiles_Gpan:/home/chen/workingSpace/local2 8ea41f5aa2f9 /bin/bash :: /usr/sbin/sshd -D & :: -p 10000:22 用于ssh登录 --->使用win ip + 10000 ： 192.168.1.4:10000 :: -p 15901:5901 用于VNC界面登录 --->使用win 的Ethernet adapter ip + 15901: 172.18.28.1:15901 或 127.0.0.1::15901 ----> 永恒不变 注意点： 1、关于vnc链接的ip ： 使用win 的Ethernet adapter ip 登录： 2.13.1. 问题1：VNC连不上的 报错：connection closed 操作方法： // 1、重启一下服务试试 vncserver -kill :1 vncserver -kill :2 vncserver -kill :3 vncserver -kill :4 vncserver :1 -localhost no -geometry=1920x1080 // 2、如果上述不行，看有没有提示： Warning: 4fcb1df56031:1 is taken because of /tmp/.X1-lock ---->删掉这个文件 Remove this file if there is no X server 4fcb1df56031:1 2.13.2. 关于VNC 客户端的选择 1、TurboVNC Viewer（优） 可以双屏 全屏切换快捷键 ALT + Enter 2、集成了TurboVNC Viewer的 MobaXterm 有些问题：必须全屏 + stay on TOP 有些快捷键才生效； 复制粘贴 偶现问题 2.14. 剪切板复制 docker与win https://zhuanlan.zhihu.com/p/518188941 VNC 复制粘贴中文乱码问题及解决方案 https://unix.stackexchange.com/questions/35030/how-can-i-copy-paste-data-to-and-from-the-windows-clipboard-to-an-opensuse-clipb 结合两个帖子： vim ~/.vnc/xstartup #加入： # win --> docker vncconfig -nowin & vncconfig -iconic & autocutsel -fork& 注意： 1、重启一个vnc服务 2.14.1. 报错与解决办法 vnc: failed to open clipboard https://blog.csdn.net/qq_39590599/article/details/116228624 2.15. 一些环境规定： docker 命令必须在bash环境下执行，不能用cmd（除了启动的） 2.16. 关于docker网络的几个概念区分： 1、使用的网络类型是bridge，桥接的宿主网络(组成局域网) （1）在容器外使用时： moba连接时，用的127.0.0.1，为啥？ -----> 因为原先用的宿主的ip，宿主ip对于寄生的docker就是127.0.0.1 （2）在容器内使用时： 必须用宿主机的绝对ip，不能是127.0.0.1？-----> 因为在内部，相对ip172是其自己 2、使用--network=host，这样的话使用 -p 参数映射端口就没用了， 即所有端口都是开放和宿主机共享的 （2）在容器内使用时： 能用127.0.0.1 -----> 因为127是自己 ，也是host，共享的端口 代理软件： 本地 关系：AS对win是本地的关系; AS对docker 容器 moba对win是本地的关系 局域网关系： docker内部对win 2.17. 优化 自动保存 DockerDesktop.vhdx 脚本 ：vhdx_backup.bat ---> 不影响docker 容器unbuntu正常工作的，可以白天经常做 自动build、save、load脚本：docker_build_save_load.bat ---> 必须晚上 2.18. docker目前存的的问题与不便 1、docker不能直接挂载其他硬盘，作为其文件系统一部分 -------> linux 识别 linux文件系统，很快 docker与win只能共享文件夹（传输效率极低） 问题： 造成docker安装在D盘，文件系统不能放在其他大的硬盘里 -----> 难以实现： 系统 与 文件系统 分离到两个盘上 2、docket安装到移动硬盘上，会经常发生start failed -------> 很奇怪，需要一个固定的盘 ------------> 与1,矛盾： 2 需要将docker安装到 固定的d盘 但是因为文件系统过大，需要1，分离 docker安装与文件系统盘 3、暂时不能用samba 4、难以直接连手机？？？ 5、每次新增文件，都要commit 系统-------> 浪费时间 6、docker挂载 ------> 文件IO速度慢： 2.19. docker挂载解决IO速度慢的问题 TODO：待验证 https://www.kancloud.cn/luke8327/phpwolf/3121911 【Windows Docker】docker挂载解决IO速度慢的问题 https://blog.just4test.net/performance-loss-of-docker-desktop-bind-mounts Docker Desktop的挂载性能损失 2.20. 共享之 docker 内配置samba ----> TODO: 未成功 可能： 方法1？：一个适配器绑定多个IP 参考“： https://blog.csdn.net/m0_37902494/article/details/128322049?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-128322049-blog-132381489.235%5Ev40%5Epc_relevant_rights_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-128322049-blog-132381489.235%5Ev40%5Epc_relevant_rights_sort&utm_relevant_index=9 windows10环境下宿主机无法打通到容器ip https://blog.csdn.net/qq_42362605/article/details/124898062 https://qinfeng.blog.csdn.net/article/details/132609787?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-132609787-blog-108300589.235%5Ev40%5Epc_relevant_rights_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-132609787-blog-108300589.235%5Ev40%5Epc_relevant_rights_sort&utm_relevant_index=9 win10 ping不通 Docker ip(解决截图) https://zhuanlan.zhihu.com/p/656521191?utm_id=0&wd=&eqid=d2260df60001fa10000000036575d6fa Win11系统同一网卡设置使用多个IP地址的方法教程 # 添加一个网卡 netsh interface ip add address \"vEthernet (WSL)\" 192.168.50.93 255.255.255.0 netsh interface ip show config ---》 OK，查看当前所有適配器配置 netsh interface ip add address \"vEthernet (WSL (Hyper-V firewall))\" 172.17.0.2 255.255.240.0 ----》 ok netsh interface ip delete address \"vEthernet (WSL (Hyper-V firewall))\" address=172.17.0.2 ----》 ok // smbd启动 service smbd status sudo service smbd start 方法2？：增加路由 route add 172.17.0.2 mask 255.255.0.0 192.168.137.1 route add 172.17.0.2 mask 255.255.0.0 192.168.137.1 route print 路由表 参考： https://blog.csdn.net/m0_60861848/article/details/132381489?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-132381489-blog-132609787.235%5Ev40%5Epc_relevant_rights_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-132381489-blog-132609787.235%5Ev40%5Epc_relevant_rights_sort&utm_relevant_index=6 https://blog.csdn.net/zhongliang415/article/details/108300589?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-108300589-blog-124612501.235%5Ev40%5Epc_relevant_rights_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-108300589-blog-124612501.235%5Ev40%5Epc_relevant_rights_sort&utm_relevant_index=5 windows宿主机访问docker容器ip无法ping通 好像就是不OK： https://docs.docker.com/desktop/networking/ xplore networking features on Docker Desktop https://blog.csdn.net/qq_45380083/article/details/124612501?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-124612501-blog-108582185.235%5Ev40%5Epc_relevant_rights_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-124612501-blog-108582185.235%5Ev40%5Epc_relevant_rights_sort&utm_relevant_index=6 https://forums.docker.com/t/unable-to-access-my-first-container-on-172-17-0-2/54106 Unable to access my first container (on 172.17.0.2) - General Discussions - Docker Community Forums 补充知识： https://blog.csdn.net/2302_77582029/article/details/132106721 Docker网络模式详解 2.20.1. 进展： docker对应的是 \"vEthernet (WSL (Hyper-V firewall))\" 适配器：！！！！！！！！ 此时容器内部： 下面切到了window Containers 2.21. 共享之 利用 sshfs挂载远程文件夹 实在搞不定的问题，就想办法绕过去！！！！！！！！（既然samba 一直以来在window dcoker里无法配置成功） 见《linux挂载到win-------sshfs（效果类似于samba）》章节 3. wsl 3.1. wsl 安装到e盘 http://www.huazhaox.com/article/7981 把WSL安装到指定目录下的简易完美方法 3.2. 使用wsl安装ubuntu 安装指定版本ubuntu wsl --list --online //查看线上有哪些版本 wsl --install -d Ubuntu-22.04 // 安装指定版本 启动 & 关闭： wsl -l -v // 查看已经安装 wsl -d Ubuntu-22.04 // 启动 wsl -t Ubuntu-22.04 //关闭 参考：https://www.cnblogs.com/AJun816/p/16214924.html#%E8%BF%81%E7%A7%BB%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95 删除已经安装的ubuntu： wsl -l -v // 查看已经安装 wsl --unregister Ubuntu-18.04 3.3. wsl挂载 硬盘（硬件接在win上） 3.3.1. 步骤 参考： https://zhuanlan.zhihu.com/p/557082235 在Windows11上利用WSL挂载 linux硬盘 ​ https://learn.microsoft.com/en-us/windows/wsl/wsl2-mount-disk Get started mounting a Linux disk in WSL 2 | Microsoft Learn 1、powershell中查看硬盘信息 GET-CimInstance -query \"SELECT * from Win32_DiskDrive\" 输出： PS C:\\Users\\scelt> GET-CimInstance -query \"SELECT * from Win32_DiskDrive\" DeviceID Caption Partitions Size Model -------- ------- ---------- ---- ----- \\\\.\\PHYSICALDRIVE1 Force MP600 4 1000202273280 Force MP600 \\\\.\\PHYSICALDRIVE0 WDC WD80EFZX-68UW8N0 1 8001560609280 WDC WD80EFZX 2、裸挂载（可以显示该盘但还不能访问） wsl --mount \\\\.\\PHYSICALDRIVE0 --bare 转到WLS终端： lsblk My output: NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 256G 0 disk sdb 8:16 0 256G 0 disk / sdc 8:32 0 7.3T 0 disk └─sdc1 8:33 0 7.3T 0 part 其中的sdc1就是我们需要挂载的设备了 3、 识别文件系统 WLS终端： blkid /dev/sdc1 /dev/sdc1: UUID=\"ce35a569-9e17-4a83-b468-9d14fea9983e\" TYPE=\"ext4\" PARTLABEL=\"part1\" PARTUUID=\"bb1a9b80-27d9-4b32-8cd1-51f71cb48252\" 其中的 TYPE=“ext4”就告诉了我们这是一块ext4格式的硬盘。 如果用blkid回车后没有任何输出，可以尝试加上sudo后重试。我当时就疑惑了久为什么它没有任何输出…… 4. 真·挂载（可以访问内容了） 方法一：已验证ok 在ubuntu内部mount： sudo mount /dev/sdc2 /home/chenjinke/workingspace/yingpan 151937Cgkent. ----------> 验证ok： lsblk 方法二： 注意，此时又要回到Powershell中进行操作： wsl --mount \\\\.\\PHYSICALDRIVE0 --partition 1 --type ext4 此时该硬盘会自动挂载到WSL系统中的/mnt/wsl目录中。 如果想从资源管理器访问，可以在地址栏输入\\\\wsl$\\Ubuntu-20.04\\mnt\\wsl\\。 记得替换Ubunto-20.04 为实际使用的版本。如果不确定也可以先输入wsl$打开WSL目录逐级进入。 5、卸载 在powershell中操作： wsl --unmount \\\\.\\PHYSICALDRIVE0 3.3.2. win下如何看linux磁盘(ext4)文件？ 上面方法 3.4. 在win资源管理器访问wsl中Ubuntu------类似于samba \\\\wsl$\\Ubuntu-22.04\\mnt\\wsl\\ \\\\wsl$\\Ubuntu-22.04 3.5. wsl从tar安装ubuntu tar来源： 1、可以是docker保存的 2、也可以是wsl之前保存的： wsl --export debian e:\\debian.tar 导入tar： wsl --import ubuntu18.04_fromDocker E:\\programFiles\\wsl_ubuntu\\ubuntu_18_fromDocker E:\\docker_install\\docker_jarFiles_backup\\ubuntu18.04_aosp1200_r28_0923_2023_10_14.tar --import [选项] 将指定的 tar 文件作为新分发版导入。 文件名可以是 - for stdin。 选项: --version 指定要用于新分发的版本。 --vhd 指定所提供的文件是 .vhdx 文件，而不是 tar 文件。 此操作在指定的安装位置创建 .vhdx 文件的副本。 --import-in-place 将指定的 .vhdx 文件作为新分发版导入。 必须使用 ext4 文件系统类型设置此虚拟硬盘的格式。 参考： http://www.huazhaox.com/article/7981 把WSL安装到指定目录下的简易完美方法 3.6. 其他认知 windows是无法识别ext4 格式的硬盘的(ext4是linux文件系统格式) 3.7. WSL2 使用相关 参考 https://blog.csdn.net/justforacm/article/details/130614760 WSL2 使用相关 -------> 好文 图形化： https://mp.weixin.qq.com/s/42R7vn8mA0nX3Ipg8Zt5Iw https://blog.csdn.net/Jasonkun_3/article/details/119135374 3.8. 当前wsl账号: cheng.... 151.......... 4. VirtualBox 先安装 VirtualBox 参考： 使用VirtualBox安装Ubuntu系统-CSDN博客 4.1. VirtualBox安装Debian11/Ubuntu 在 VirtualBox 中构建 Debian11 虚拟电脑 : https://blog.csdn.net/ForestK/article/details/125198556?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-125198556-blog-127320725.235^v38^pc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-125198556-blog-127320725.235^v38^pc_relevant_sort_base1&utm_relevant_index=5 -----------------> 验证ok。注意：系统镜像可以是ubuntu的iso 使用VirtualBox安装Ubuntu系统: https://blog.csdn.net/abc6368765/article/details/125819966 4.2. VirtualBox Ubuntu无法复制粘贴以及无法安装增强功能： 方法一： https://blog.csdn.net/subtitle_/article/details/132032433?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-132032433-blog-131377973.235^v38^pc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-132032433-blog-131377973.235^v38^pc_relevant_sort_base1&utm_relevant_index=5 -----------------> 验证有效 方法二： 安装nvc，通过MobaXterm查看图形界面。自然，可以复制粘贴 4.3. VitrualBox中备份Ubuntu https://blog.csdn.net/mo_sss/article/details/132856647 ------> 验证ok 4.4. VirtualBox 扩容 1、添加磁盘 https://blog.csdn.net/xiaoxiangzi520/article/details/111291634?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-111291634-blog-120908556.235^v39^pc_relevant_anti_vip&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-111291634-blog-120908556.235^v39^pc_relevant_anti_vip&utm_relevant_index=2 :://查看虚拟磁盘空间信息，确认确实是需要扩容的虚拟硬盘。 \"D:\\\\Program Files\\\\Oracle\\\\VirtualBox\\\\VBoxManage.exe\" showhdinfo \"D:\\\\Program Files\\\\ubuntu\\\\ubuntu\\\\ubuntu.vdi\" :://计算要扩容的空间大小，我这里是要扩展到100G(1024*1024*1024*100)。 set/a 1024*1024*1024 :://扩展虚拟硬盘空间，最后的数字替换成上面计算出的硬盘空间大小。 \"D:\\\\Program Files\\\\Oracle\\\\VirtualBox\\\\VBoxManage.exe\" modifymedium \"D:\\\\Program Files\\\\ubuntu\\\\ubuntu\\\\ubuntu.vdi\" --resizebyte 386547056640 pause 进入虚拟机： sudo fdisk -l -------------> 查看有磁盘 2、分区扩容（纳入新磁盘）可视化工具 Linux系统sda1分区扩容_linux扩容sda1-CSDN博客 https://blog.csdn.net/hgchshs/article/details/131900472 ----------> 验证ok： 可视化工具，合并分区 gparted 4.5. del_VirtualBox 扩容 反操作： VirtualBox 释放虚拟磁盘文件的大小: 问题： ubuntu.vdi 会动态增大，但不会动态减小 办法： 参考：https://blog.csdn.net/ai2000ai/article/details/122988211 -------------> 验证ok sudo dd if=/dev/zero of=/EMPTY bs=1M && rm -f /EMPTY C:\\\\Users\\\\lenovo>vboxmanage modifyhd E:\\\\install\\\\VM\\\\ubuntu20.04.vdi --compact 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100% 是否生效： ubuntu.vdi 的大小 是否变小 其他参考： https://blog.csdn.net/qq_35743870/article/details/122914298?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-122914298-blog-122988211.235^v43^pc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.1&utm_relevant_index=3 4.6. VirtualBox共享目录 1、设置共享文件夹 1 选择路径 2 填写自定义的共享名称（在后面需要与挂载路径相对应） 3 设置自动挂载/固定分配 D:\\\\Program Files\\\\ubuntu\\\\ubuntuShare ubuntuShare /home/chenjinke/workingSpace/AOSP 注意：无需重启VirtualBox （或ubuntu） 2、挂载共享文件夹：参考： 详解VirtualBox中与主机共享文件夹的方法（图文）-云搜网 (27ka.cn) https://www.27ka.cn/120058.html sudo mount -t vboxsf ubuntuShare /home/chenjinke/workingSpace/AOSP 4.7. virtualbox中ubuntu 磁盘满了，无法开机 -----> 只是图形界面进不去 https://www.jianshu.com/p/9e0214059487 下数据硬盘满，无法启动（Ubuntu）处理 总结一句话： ctrl + F2 进入命令行界面 清理磁盘 4.8. virtualbox中ubuntu启动失败 参考： https://blog.csdn.net/beihuanlihe130/article/details/122728594 How To Fix Busybox Initramfs Error On Ubuntu 启动后，问题： 1 BusyBox v1.30.1 (Ubuntu 1:1.30.1-4ubuntu6.1) built-in shell (ash)2 Enter 'help' for a list of built-in commands.3 4 (initramfs) 问题原因： 1 (initramfs) exit2 /dev/sda1 contains a file system with errors, check forced. // ----------> /dev/sda1文件系统出了问题3 Inode 4326476 extent tree (at level 1) could be narrower, IGNORED.4 /dev/sda1: Inode 4326843 extent tree (at level 1) could be narrower, IGNORED.5 /dev/sda1: Inode 4327012 extent tree (at level 1) could be narrower, IGNORED.6 /dev/sda1: Inode 4329004 extent tree (at level 1) could be narrower, IGNORED.7 /dev/sda1: Inodes that were part of a corrupted orphan linked list found.8 9 /dev/sda1: UNEXPECTED INCONSISTENCY; RUN fsck MANUALLY.10 (i.e., without -a or -p options)11 fsck exited with status code 4.12 The root filesystem on /dev/sda1 requires a manual fsck.13 14 BusyBox v1.30.1 (Ubuntu 1:1.30.1-4ubuntu6.1) built-in shell (ash)15 Enter 'help' for a list of built-in commands.16 17 (initramfs) 修复repair the filesystem： (initramfs) fsck /dev/sda1 -y (initramfs) reboot ------> 不限于 virtualbox 4.9. 如何配置virtualbox 处理器核心数？ virtualbox 在设置里给虚拟机开的处理器核心数，不要大，1个就好 ------> 多了反而不流畅。。1个很流畅 4.10. virutualBox快捷键 1、退出全屏： 右ctrl + F 注意：需要在桌面内使用（不能在AS内使用，被AS识别消费了） https://blog.csdn.net/qq_15138049/article/details/125666050 4.11. ubuntu设置分辨率 参考： https://blog.51cto.com/u_15057807/4126233 sudo xrandr --newmode \"1920x1080\" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync sudo xrandr --addmode Virtual1 \"1920x1080\" xrandr -s 1920x1080 // 设置 -----> 验证ok 4.12. Windows无法ssh连接Virtualbox（VMware） 参考： https://blog.csdn.net/XASDASDAS/article/details/136690427?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-136690427-blog-127801394.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-136690427-blog-127801394.235%5Ev43%5Econtrol&utm_relevant_index=9 -------------------> 已验证OK 做到的功能： （1）Virtualbox内部可以访问外网（百度） --------> NAT网络保证： （2）外部网络可以访问Virtualbox内部： ​ 方法：端口转发：win的端口与ubuntu端口映射 ---------> 登录时，通过前者 其中：win侧ip： linux侧ip： 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:e1:35:ec brd ff:ff:ff:ff:ff:ff inet 10.0.2.15/24 metric 100 brd 10.0.2.255 scope global dynamic enp0s3 ----------> //【】这里 valid_lft 85251sec preferred_lft 85251sec inet6 fe80::a00:27ff:fee1:35ec/64 scope link valid_lft forever preferred_lft forever 最终：ssh登录，用 Host的IP + Host的 port 4.13. Virtualbox 网络连接----很优 -同时设置多网卡，同时多个用途： 网卡1设置： 网络地址转换NAT ------> 端口转发（教程：Windows无法ssh连接Virtualbox） --------> win ssh访问 linux 缺点： win无法ping通 网卡1的ip！！！！ 用途： 访问外网 ssh 网卡2设置：仅主机（Host-only）网络。。。。。 用途： win通过samba访问Linux ssh直连 效果： 1 $ ip addr2 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default qlen 10003 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:004 inet 127.0.0.1/8 scope host lo5 valid_lft forever preferred_lft forever6 inet6 ::1/128 scope host7 valid_lft forever preferred_lft forever8 2: enp0s3: mtu 1500 qdisc fq_codel state UP group default qlen 10009 link/ether 08:00:27:a0:df:fc brd ff:ff:ff:ff:ff:ff10 inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic noprefixroute enp0s3 // ------> 网卡1 （win无法ping通）11 valid_lft 86077sec preferred_lft 86077sec12 inet6 fe80::b5c6:64da:44a1:4e83/64 scope link noprefixroute13 valid_lft forever preferred_lft forever14 3: enp0s8: mtu 1500 qdisc fq_codel state UP group default qlen 100015 link/ether 08:00:27:83:07:ad brd ff:ff:ff:ff:ff:ff16 inet 192.168.56.103/24 brd 192.168.56.255 scope global dynamic noprefixroute enp0s8 ------> 网卡217 valid_lft 576sec preferred_lft 576sec18 inet6 fe80::ec6a:eacd:7014:66d4/64 scope link noprefixroute19 valid_lft forever preferred_lft forever20 4.14. virutualBox 连手机 https://www.cnblogs.com/manmande/p/17329504.html 虚拟机Virtualbox 识别不到USB设备 的解决办法 5. virtualbox安装 macOS 视频参考： VirtualBox7中安装macOS Big Sur，在windows10&11上【保姆级教程】哔哩哔哩bilibili https://www.bilibili.com/video/BV1nY411d7Di/?spm_id_from=333.337.search-card.all.click&vd_source=3eebd10b94a8a76eaf4b78bee8f23884 文字教程： https://www.bilibili.com/read/cv20248224/ VirtualBox7中安装macOS big sur，在windows10&11上【保姆级教 5.1. 步骤： 1、安装virtualBox 2、镜像下载：https://www.freedidi.com/6584.html 3、安装教程：https://www.bilibili.com/read/cv20248224/ VirtualBox7中安装macOS big sur，在windows10&11上【保姆级教 关键步骤0（已经确认）： 安装virtualBox Extension扩展包 ： 工具------> 安装 关键步骤1（已经确认）： D:\\\\Program Files\\\\Oracle\\\\VirtualBox>VBoxManage modifyvm \"macOS\" --cpuidset 00000001 000106e5 00100800 0098e3fd bfebfbff D:\\\\Program Files\\\\Oracle\\\\VirtualBox>VBoxManage setextradata \"macOS\" \"VBoxInternal/Devices/efi/0/Config/DmiSystemProduct\" \"iMac11,3\" D:\\\\Program Files\\\\Oracle\\\\VirtualBox>VBoxManage setextradata \"macOS\" \"VBoxInternal/Devices/efi/0/Config/DmiSystemVersion\" \"1.0\" D:\\\\Program Files\\\\Oracle\\\\VirtualBox>VBoxManage setextradata \"macOS\" \"VBoxInternal/Devices/efi/0/Config/DmiBoardProduct\" \"Iloveapple\" D:\\\\Program Files\\\\Oracle\\\\VirtualBox>VBoxManage setextradata \"macOS\" \"VBoxInternal/Devices/smc/0/Config/DeviceKey\" \"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" D:\\\\Program Files\\\\Oracle\\\\VirtualBox>VBoxManage setextradata \"macOS\" \"VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC\" 0 关键步骤2（已经确认）： cpu核数和内存配置不能过高 ---------->已经验证，cpu最多4个是根本原因： 中间有看到log里有VirtualBox VT-x is not available，尝试过 关闭Hyper-V （已经验证，跟这个无关） （1）启用或关闭windows功能里关闭 （2）bcdedit /set hypervisorlaunchtype off 参考：https://blog.csdn.net/weixin_42140580/article/details/103235619/ TODO: bcdedit 是一个启动选项编辑工具，用来管理启动设置。 TODO: win10下docker和虚拟机无法同时启动时问题： 启动虚拟机时，需要把hypervisorlaunchtype改为off bcdedit /set hypervisorlaunchtype off 启动docker时，需要把hypervisorlaunchtype改为on bcdedit /set hypervisorlaunchtype on bcdedit /set hypervisorlaunchtype auto 参考： https://blog.csdn.net/qiling_70/article/details/115341957?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-115341957-blog-123500614.235^v43^pc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.1&utm_relevant_index=3 先抹除磁盘，之后才在磁盘上安装系统 调整分辨率： cd \"C:\\Program Files\\Oracle\\VirtualBox\\\" VBoxManage setextradata \"macOS big sur\" CustomVideoMode1 1900x1200x32 VBoxManage setextradata \"macOS big sur\" VBoxInternal2/EfiGraphicsResolution 1900x1200 VBoxManage setextradata \"macOS\" CustomVideoMode1 1920x1080x32 VBoxManage setextradata \"macOS\" VBoxInternal2/EfiGraphicsResolution 1920x1080 // 参考：https://www.bilibili.com/read/cv20248224/ 出处：bilibili 5.2. 关键问题： 启动时： （1）刷屏日志卡住了 （2）屏幕报错 bootstrap path:path = Library/Apple/Syste/Library/LaunchDa Failed to bootstrap path: path =/System/Library/LaunchDaemons/com.apple （3）日志 // macOS\\\\macOS\\\\Logs\\\\VBox.log.1 00:00:03.822918 ERROR [COM]: aRC=VBOX_E_IPRT_ERROR (0x80bb0005) aIID={6ac83d89-6ee7-4e33-8ae6-b257b2e81be8} aComponent={ConsoleWrap} aText={The VBoxGuestPropSvc service call failed with the error VERR_HGCM_SERVICE_NOT_FOUND}, preserve=false aResultDetail=-2900 //【】 ERROR [COM]: aRC=VBOX_E_IPRT_ERROR 00:00:03.958945 TM: GIP - u32Mode=3 (Invariant) u32UpdateHz=93 u32UpdateIntervalNS=10741500 enmUseTscDelta=2 (Practically Zero) fGetGipCpu=0x1b cCpus=20 00:00:03.958967 TM: GIP - u64CpuHz=2 688 011 164 (0xa037cb9c) SUPGetCpuHzFromGip => 2 688 011 164 00:00:03.958971 TM: GIP - CPU: iCpuSet=0x0 idCpu=0x0 idApic=0x0 iGipCpu=0x1 i64TSCDelta=0 enmState=3 u64CpuHz=2688016583(*) cErrors=0 00:00:03.958974 TM: GIP - CPU: iCpuSet=0x1 idCpu=0x1 idApic=0x1 iGipCpu=0x2 i64TSCDelta=0 enmState=3 u64CpuHz=2688001900(*) cErrors=0 00:00:03.958976 TM: GIP - CPU: iCpuSet=0x2 idCpu=0x2 idApic=0x8 iGipCpu=0xc i64TSCDelta=0 enmState=3 u64CpuHz=2688011157(*) cErrors=0 00:00:03.958978 TM: GIP - CPU: iCpuSet=0x3 idCpu=0x3 idApic=0x9 iGipCpu=0x10 i64TSCDelta=0 enmState=3 u64CpuHz=2688016583(*) cErrors=0 00:00:03.958980 TM: GIP - CPU: iCpuSet=0x4 idCpu=0x4 idApic=0x10 iGipCpu=0xa i64TSCDelta=0 enmState=3 u64CpuHz=2688011096(*) cErrors=0 00:00:03.958982 TM: GIP - CPU: iCpuSet=0x5 idCpu=0x5 idApic=0x11 iGipCpu=0x13 i64TSCDelta=0 enmState=3 u64CpuHz=2688016583(*) cErrors=0 00:00:03.958984 TM: GIP - CPU: iCpuSet=0x6 idCpu=0x6 idApic=0x18 iGipCpu=0xd i64TSCDelta=0 enmState=3 u64CpuHz=2688011146(*) cErrors=0 00:00:03.958986 TM: GIP - CPU: iCpuSet=0x7 idCpu=0x7 idApic=0x19 iGipCpu=0x7 i64TSCDelta=0 enmState=3 u64CpuHz=2688011112(*) cErrors=0 00:00:03.958988 TM: GIP - CPU: iCpuSet=0x8 idCpu=0x8 idApic=0x20 iGipCpu=0xb i64TSCDelta=0 enmState=3 u64CpuHz=2688011168(*) cErrors=0 00:00:03.958990 TM: GIP - CPU: iCpuSet=0x9 idCpu=0x9 idApic=0x21 iGipCpu=0xf i64TSCDelta=0 enmState=3 u64CpuHz=2688016583(*) cErrors=0 00:00:03.958992 TM: GIP - CPU: iCpuSet=0xa idCpu=0xa idApic=0x28 iGipCpu=0x4 i64TSCDelta=0 enmState=3 u64CpuHz=2688010864(*) cErrors=0 00:00:03.958994 TM: GIP - CPU: iCpuSet=0xb idCpu=0xb idApic=0x29 iGipCpu=0x8 i64TSCDelta=0 enmState=3 u64CpuHz=2688011138(*) cErrors=0 00:00:03.958996 TM: GIP - CPU: iCpuSet=0xc idCpu=0xc idApic=0x30 iGipCpu=0x5 i64TSCDelta=0 enmState=3 u64CpuHz=2688010939(*) cErrors=0 00:00:03.958998 TM: GIP - CPU: iCpuSet=0xd idCpu=0xd idApic=0x32 iGipCpu=0x11 i64TSCDelta=0 enmState=3 u64CpuHz=2688016583(*) cErrors=0 00:00:03.959000 TM: GIP - CPU: iCpuSet=0xe idCpu=0xe idApic=0x34 iGipCpu=0x12 i64TSCDelta=0 enmState=3 u64CpuHz=2688016583(*) cErrors=0 00:00:03.959002 TM: GIP - CPU: iCpuSet=0xf idCpu=0xf idApic=0x36 iGipCpu=0xe i64TSCDelta=0 enmState=3 u64CpuHz=2688011164(*) cErrors=0 00:00:03.959004 TM: GIP - CPU: iCpuSet=0x10 idCpu=0x10 idApic=0x38 iGipCpu=0x6 i64TSCDelta=0 enmState=3 u64CpuHz=2688011075(*) cErrors=0 00:00:03.959006 TM: GIP - CPU: iCpuSet=0x11 idCpu=0x11 idApic=0x3a iGipCpu=0x3 i64TSCDelta=0 enmState=3 u64CpuHz=2688010559(*) cErrors=0 00:00:03.959009 TM: GIP - CPU: iCpuSet=0x12 idCpu=0x12 idApic=0x3c iGipCpu=0x0 i64TSCDelta=0 enmState=3 u64CpuHz=2688011164(*) cErrors=0 00:00:03.959014 TM: GIP - CPU: iCpuSet=0x13 idCpu=0x13 idApic=0x3e iGipCpu=0x9 i64TSCDelta=0 enmState=3 u64CpuHz=2688011187(*) cErrors=0 ................. 00:00:01.720624 CPUM: No hardware-virtualization capability detected //【】 解决办法： On a Windows host I would recommend reducing VM RAM to 6GB (6144MB). On a MacOS host... I'm not entirely sure how much free RAM it likes, but you can certainly start with 6GB. Reduce CPU cores to 2 as well. // 减少cpu和mem // 参考： https://forums.virtualbox.org/viewtopic.php?t=107319&start=45 TODO: 为啥配置cpu核数多，不行呢？ （1）英语英语英语 （2）安装软件的log！！！！！！(3) difficult Problem只能英语解决！！！！ 5.3. 系统快照----备份 控制---生成备份 5.4. 共享目录/共享剪切板 -------------------> 以上两者都没搞定 -万能方法： ssh登录（共享） 具体步骤： （1）保证window宿主能ping容器 ​ 桥接网络 （2）参考：https://support.apple.com/zh-cn/guide/mac-help/mchlp1066/13.0/mac/13.0 ssh登录mac 5.5. 其他参考 https://leon1741.blog.csdn.net/article/details/80910244?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-80910244-blog-129246509.235^v43^pc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-80910244-blog-129246509.235^v43^pc_blog_bottom_relevance_base7&utm_relevant_index=9&ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzMxNTIxL2FydGljbGUvZGV0YWlscy8xMjkyNDY1MDk%3D https://blog.csdn.net/jimmyleeee/article/details/114627727 https://blog.csdn.net/lb245557472/article/details/103565752 6. wmWare 6.1. wmWare优缺点： wmWare优点十分明显： 1、比docker： （1）可以动态化挂载物理硬盘 ​ 可以挂多个硬盘！！！ ​ SSD + 普通硬盘 --------> 快慢相宜 （2）文件系统可以是split files ----------> copy快很多 （3）不需要每次修改都要commit！！！！！ 2、virtualBox性能太差 6.2. wmWare联网 联网: (1) 外网baidu (2) 主机网 参考： https://blog.csdn.net/zhangxm_qz/article/details/122612605 vmware虚拟机三种网络模式及配置详解 ----> 好文，图文原理详解 其中 NaT模式 -----> 验证ok 其中：Ubuntu配置DHCP配置： https://blog.csdn.net/dacming/article/details/121188742 # Let NetworkManager manage all devices on this system network: version: 2 renderer: NetworkManager ethernets: enp4s0: dhcp4: true 6.3. wmWare下ubuntu 访问外网（宿主win 代理网络） 6.3.1. 结构： 图：《VMWareNet.eddx》 6.3.2. win侧设置： 1、win为 局域网内其他设备代理，开启： 用户名、密码不填 会新增： win软件的代理都是走的： 本地， 127.0.0.1：10810 vMware软件走的代理是：局域网 ， winIP:10813 6.3.3. Ubuntu设置: 1、全局代理设置： ip即win的ipv4： 2、配置浏览器 很奇怪，每个软件需要单独配置？？？？ ---------------> 验证：可以打开youtube网站 3、给Terminal配置(可能需要)： 在全局代理设置后，看一下Terminal环境变量，是否有： $ export declare -x ALL_PROXY=\"socks://192.168.1.4:10812/\" declare -x HTTPS_PROXY=\"http://192.168.1.4:10813/\" declare -x HTTP_PROXY=\"http://192.168.1.4:10813/\" declare -x all_proxy=\"socks://192.168.1.4:10812/\" declare -x http_proxy=\"http://192.168.1.4:10813/\" declare -x https_proxy=\"http://192.168.1.4:10813/\" -----------> OK 没有的话，需要配置环境变量： 临时： $ export http_proxy=http://192.168.1.4:10813 $ export https_proxy=http://192.168.1.4:10813 4、Android studio配置代理 5、 git软件配置代理 --------> 没验证 git config --global http.proxy 'socks5://127.0.0.1:1080' git config --global https.proxy 'socks5://127.0.0.1:1080' 6、SNAP使用代理 --------> 没验证 snap set system proxy.http=\"http://:\" snap set system proxy.https=\"http://:\" 7、APT使用代理 --------> 没验证 TODO: 这个应该非常有用！！！ vim /etc/apt/apt.conf.d/proxy.conf Acquire::http::Proxy \"http://username:password@proxy-IP-address:proxyport\"; Acquire::https::Proxy \"http://username:password@proxy-IP-address:proxyport\"; 参考： Linux配置代理的方法 6.3.4. 问题：以上步骤都执行了，仍然无网 方法一： 需要重启window侧的本地代理服务： 方法二： 重启windows 6.3.5. 参考： VMware虚拟机使用主机代理 6.4. wmWaressh 前提：wmWare联网 其他同正常ssh登录 6.5. wmWare 挂载 物理硬盘（物理分区）-----扩容 ----------------------> wmWare 非常大的优点：动态化扩容 lsblk sudo mount -t ext4 /dev/sdb2 /home/chengang/workingspace_disk2 -----> 注意，必须指定类型，否则失败！！！！！ 步骤： 1、win格式化出一个分区出来（最好是Ext4，linux格式，linux下读写快！！！） 2、以管理员方式打开 VMware Workstation Pro应用 3、设置 扩展：TODO： 整个硬盘，不同的磁盘分区，容器都能看到 ----------> 意味着可以看到所有的win下所有路径 如果看不到新增的物理磁盘，重启Linux 6.6. adb连手机 https://blog.csdn.net/lspqq10086/article/details/127447126?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-127447126-blog-123850238.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-127447126-blog-123850238.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=2 6.7. ssh远程连接到VMware虚拟主机 https://blog.csdn.net/lsgzn/article/details/130199569 实现局域网内ssh远程连接到VMware虚拟主机 -----> 验证 ok 关键步骤： win转 容器 win下ssh连 容器linux： 容器ip（ip add） + 容器内22 6.8. 虚拟机和主机共享文件夹步骤： 1.1右键虚拟机--设置---选项--共享文件夹--选择总是启用---添加一个盘 1.2ubuntu中进入/mnt/hgfs/目录查看是否有共享文件夹（也可以放在home目录下自己创建一个文件夹如/home/feng/work） 1.3 若没有hgfs存在则按以下步骤操作： sudo apt-get install open-vm-tools cd /mnt/ sudo passwd root su root mkdir hgfs sudo vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other 或sudo vmhgfs-fuse .host:/ /home/feng/work -o allow_other 其中/mnt/hgfs/文件夹目录可以自行修改 再到/mnt/下看就会有 hgfs文件夹了，里面有共享文件夹目录存在 这里是有个空格的 解决 虚拟机和主机共享文件夹 失败问题： 方法一（验证OK）： sudo chmod 777 /mnt/hgfs vmhgfs-fuse .host:/ /mnt/hgfs 方法二（验证OK）： 解决重启后共享文件夹失效 sudo vim /etc/fstab 在最后添加一行： .host:/ /mnt/hgfs fuse.vmhgfs-fuse allow_other 0 0 ----------> 以后重启都会自动挂载 参考：https://juejin.cn/post/7249297734867943479 Ubuntu 20.04 /mnt/hgfs/下不显示共享文件夹的处理办法 6.9. 扩容 https://blog.csdn.net/qq_37140721/article/details/125619393 6.10. 一些问题 & 报错 6.10.1. linux adb连接手机报错： adb 出现 insufficient permissions for device: user in plugdev group； are your udev rules wrong? no permissions (user in plugdev group; are your udev rules wrong?) 解决方法：https://blog.csdn.net/witch23333/article/details/131107097 -------------------------> 验证OK 6.10.2. “拍摄快照” 无法使用 办法：先移除，之后再添加： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/gdb.html":{"url":"Tool/gdb.html","title":"Gdb","keywords":"","body":"1. 目录2. 本地GDB调试-------linux2.1. 本地GDB调试结构2.2. 步骤：2.3. 补充 控制2.4. 编译带调试信息的程序 或 so2.4.1. gcc直接编译2.4.2. cmake2.4.3. meson.build 编译2.5. 源码环境中如何找符号表？2.5.1. 符号表的可替换性2.6. 引入符号表 TODO2.7. 引入文件3. 远程GDB调试-----安卓3.1. 远程GDB的结构3.2. framework Native 断点调试 环境（GDB）3.3. 法一：gdbclient.py方法步骤（优秀）3.3.1. docker容器（linux）与手机adb 连接3.3.2. linux初始化 gdbclient.py 环境3.3.3. gdbserver/gdbserver64提供服务3.3.4. gdbserver 与 gdbclient 网络链接---端口转发方式（优）3.3.5. gdbserver 与 gdbclient 网络链接---局域网指定ip方法（次要）3.3.6. GDB操作3.3.7. 判断是否环境OK3.3.8. 要点：关于gdbserver 与 gdbserver64的选择：3.3.9. 要点：break函数，必须加namesapce3.3.10. 技巧之，避免watdog影响杀进程3.3.11. 补充3.4. 法二：通用GDB方法的步骤（TODO:验证补充）3.4.1. 注意：3.4.2. 参考3.4.3. 待整理3.5. 法三：framework Native Clion 调试环境（linux下）3.5.1. clion配置3.5.2. clion端开始debug3.5.3. 技巧：3.5.4. 参考3.6. 断点调试环境 lib64 、lib 区分3.6.1. 解决办法：3.6.2. 以上所有判断 环境OK不OK的办法4. del_aosp14进入lldb （与aosp10进入gdb 基本一样）5. 本地GDB调试------安卓（安卓一定可以运行Linux程序）5.1. 具体步骤5.2. 总结：6. 安卓，之前其他尝试6.1. gdbserver文件调试（google已经废弃）7. GDB命令大全7.1. Tutorial7.2. 时机：7.3. 启动gdb7.4. 控制7.4.1. 断点相关：7.4.2. 阻塞线程7.5. 变量操作7.6. 显示7.7. gdb调试异常8. ldd 查看so依赖结构----so tree8.1. 查看缺少9. 问题9.1. 问题： /lib64/libc.so.6: version GLIBC_2.XX' not found10. weston目前比较好的gdb环境： 目录 本地GDB调试-------linux 本地GDB调试结构 步骤： 补充 控制 编译带调试信息的程序 或 so gcc直接编译 cmake meson.build 编译 源码环境中如何找符号表？ 符号表的可替换性 引入符号表 TODO 引入文件 远程GDB调试-----安卓 远程GDB的结构 framework Native 断点调试 环境（GDB） 法一：gdbclient.py方法步骤（优秀） docker容器（linux）与手机adb 连接 linux初始化 gdbclient.py 环境 gdbserver/gdbserver64提供服务 gdbserver 与 gdbclient 网络链接---端口转发方式（优） gdbserver 与 gdbclient 网络链接---局域网指定ip方法（次要） GDB操作 判断是否环境OK lib lib64 要点：关于gdbserver 与 gdbserver64的选择： 要点：break函数，必须加namesapce 技巧之，避免watdog影响杀进程 补充 法二：通用GDB方法的步骤（TODO:验证补充） 注意： 参考 待整理 法三：framework Native Clion 调试环境（linux下） clion配置 clion端开始debug 技巧： 参考 断点调试环境 lib64 、lib 区分 解决办法： 方法一（天然ok）： 方法二： 方法三：强制APK底层调用bit32库（优） 以上所有判断 环境OK不OK的办法 del_aosp14进入lldb （与aosp10进入gdb 基本一样） 本地GDB调试------安卓（安卓一定可以运行Linux程序） 具体步骤 总结： 安卓，之前其他尝试 gdbserver文件调试（google已经废弃） GDB命令大全 Tutorial 时机： 启动gdb 控制 断点相关： 阻塞线程 变量操作 显示 gdb调试异常 ldd 查看so依赖结构----so tree 查看缺少 问题 问题： /lib64/libc.so.6: version GLIBC_2.XX' not found weston目前比较好的gdb环境： 1. 目录 2. 本地GDB调试-------linux 2.1. 本地GDB调试结构 图：https://zhuanlan.zhihu.com/p/336922639 2.2. 步骤： symbol-file /usr/lib64/libkwin.so.5 技巧之，利用gdb查找调用栈 --------> 环境里看调用 添加符号： symbol-file /usr/lib64/libkwin.so.5 add-symbol-file /usr/lib64/plugins/kwin/effects/plugins/kwin4_effect_shapecorners.so add-symbol-file /usr/lib64/plugins/kwin/effects/configs/kwin_shapecorners_config.so add-symbol-file /usr/lib64/libwayland-server.so.0 add-symbol-file /usr/lib64/libkwin.so.5 -----------------------> 后面需要用add-symbol-file // 查看结果 (gdb) info sharedlibrary ------------------> TODO: 添加断点： b Shadow::init b ShapeCornersShader::Bind attach进程： ps -ef | grep wayland 635 kde 20 0 898M 104M 77M S 9.0 4.1 0:28.27 kwin_wayland --wayland-fd 8 --socket wayland-0 (gdb) attach 635 方式一： so里已经有行号信息了。这时候需要指定源码： 运行中指定源码路径： (gdb) dir ./temp Thread 1 \"kwin_wayland\" hit Breakpoint 3, ShapeCornersShader::Bind (this=0x556df6e2a8, w=0x556de3cf90, scale=1, isTiled=72) at /usr/src/debug/KDE-Rounded-Corners/1.0-r0/git/src/ShapeCornersShader.cpp:54 54 /usr/src/debug/KDE-Rounded-Corners/1.0-r0/git/src/ShapeCornersShader.cpp: No such file or directory. 参考： GDB学习笔记_gdb 指定源码路径-CSDN博客 2.3. 补充 控制 继续执行到下一个断点-continue (gdb)c (gdb)c 3 #跳过三次断点 继续运行到指定位置-until (gdb)u 29 #运行到29行停住，利用的是临时断点 2.4. 编译带调试信息的程序 或 so 在编译程序时，需要使用-g选项来添加调试信息。 2.4.1. gcc直接编译 gcc -g main.c xxx 2.4.2. cmake cmake编译时，添加参数 set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g -O0\") set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -O0\") // -g 选项告诉编译器生成调试信息 // -O0 选项告诉编译器禁用所有优化 2.4.3. meson.build 编译 W:\\workingspace\\frameworks\\window\\windowmanager\\weston\\meson.build add_project_arguments(global_args, language: 'c') #add by cg add_global_arguments('-O0', language: 'c') add_global_arguments('-g', language: 'c') 2.5. 源码环境中如何找符号表？ 万能的暴力方法： 在根目录下，暴力find_ -----------> 最大的so，就是符号表！！！！ find_ ./ libwayland-server.so.0.21.0 注意：我们很难确定 目标so 是不是某个模块编译出来的： 即使 bitebake kwin后，发现kwin下有 --------> 实际上是因为kwin依赖，编译时copy过来的 最后验证： $ file ./1.21.0-r0/image/usr/lib64/libwayland-server.so.0.21.0 ./1.21.0-r0/image/usr/lib64/libwayland-server.so.0.21.0: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, with debug_info, not stripped ---> 没有strip 一般情况下： 工程里，一定会有 中间产物 符号表 2.5.1. 符号表的可替换性 #6 0x0000007f97e8c6a8 in ?? () from /usr/lib64/libwayland-server.so.0 #7 0x0000007f97e8743c in ?? () from /usr/lib64/libwayland-server.so.0 // ?? 代表不含符号表！！！！！！ 用一个含符号表的 libwayland-server.so.0文件，可以直接替换 上述系统文件 --------------------> 1、系统可以正常运行！！！！ 2、利于GDB 的debug 2.6. 引入符号表 TODO symbol-file /usr/lib64/libkwin.so.5 add-symbol-file /usr/lib64/plugins/kwin/effects/plugins/kwin4_effect_shapecorners.so add-symbol-file /usr/lib64/plugins/kwin/effects/configs/kwin_shapecorners_config.so sysroot GDB中set sysroot作用是什么 (gdb) show sysroot ---------> https://chat.openai.com/c/dae87696-c095-44b3-85cd-8b7fbfb93357 2.7. 引入文件 gdb报错： KWin::Window::updateShadow (this=this@entry=0x55958cb570) at /usr/src/debug/kwin/5.27.4-r0/kwin-5.27.4/src/window.cpp:439 439 /usr/src/debug/kwin/5.27.4-r0/kwin-5.27.4/src/window.cpp: No such file or directory. // 【】提示需要新增源文件 (gdb) l 方法： adb push \\kwin\\\\5.27.4-r0\\\\kwin-5.27.4\\\\src /usr/src/debug/kwin/5.27.4-r0/kwin-5.27.4/ adb push \\KDE-Rounded-Corners\\\\1.0-r0\\\\git\\\\src /usr/src/debug/KDE-Rounded-Corners/1.0-r0/git/ 新增源文件的好处： b KWin::WorkspaceSceneOpenGL::createShadow 即使无法找到符号表，也可以在.cpp中断点 3. 远程GDB调试-----安卓 TODO：安卓为啥不能本地调试？必须 server + gdb 3.1. 远程GDB的结构 GDB与GdbServer之间联系： 通过网络或者串口进行通讯 ---------> TODO：所以，不需要adb？？？？ 参考：https://zhuanlan.zhihu.com/p/336922639 原来gdb的底层调试原理这么简单 TODO： GDB如何调试已经执行的服务进程？ https://zhuanlan.zhihu.com/p/336922639 偷窥GDB如何实现断点指令？ https://zhuanlan.zhihu.com/p/336922639 偷窥GDB如何实现单步指令next？ https://zhuanlan.zhihu.com/p/336922639 3.2. framework Native 断点调试 环境（GDB） 參考: https://blog.csdn.net/weixin_34419326/article/details/90306477 GDB在线调试Android Framework Native C/C++代码 -------------> 好文 使用调试程序 | Android 开源项目 | Android Open Source Project (google.cn) gdb+gdbserver远程调试-CSDN博客 见下面 法一、法二、法三 3.3. 法一：gdbclient.py方法步骤（优秀） linux下 gdbclient.py ---> GOOGLE封装好的断点脚本 （GOOGLE放弃了 gdbclient，主要使用gdbclient.py） /home/cg/workingSpace/aosp_android1000_r17/development/scripts/gdbclient.py /gdbclient 3.3.1. docker容器（linux）与手机adb 连接 见《docker连 主机pc连的安卓设备》 即： 宿主windows侧： adbkit usb-device-to-tcp -p 7788 FA6930305260 docker容器一侧 adb connect host.docker.internal:7788 TODO：这一步是必要的 ：GDB与GdbServer之间是网络连接，但是脚本里有用到adb 3.3.2. linux初始化 gdbclient.py 环境 # 运行shell脚本，配置环境 $ source build/envsetup.sh # 然后选择自己要调试的编译版本 $ lunch aosp_sailfish-userdebug --->作用： gdbclient.py 在根目录下，可以索引到所有变量，比如gdb、gdbclient等 3.3.3. gdbserver/gdbserver64提供服务 gdbserver（和gdbserver64）环境的准备： 是push进手机里的 自然，windows侧： adb push G:\\dockerSharedFiles\\aosp_android1000_r17\\aosp_android1000_r17\\prebuilts\\misc\\gdbserver\\android-arm64\\gdbserver64 /system/bin/ adb push G:\\dockerSharedFiles\\aosp_android1000_r17\\aosp_android1000_r17\\prebuilts\\misc\\gdbserver\\android-arm64\\gdbserver /system/bin/ // ----------> 似乎主要是gdbserver？gdbclient 在linux里，google封装的gdbclient.py 这里采用网络来搭建linux与手机之间的桥梁，所以用ip：（而不是，端口转发adb forward） adb root adb remount // ----------> 注意：需要这个！！！【】 后续GDB会copy东西给GDBserver adb shell ps -ef | grep mediaserver adb shell gdbserver :12345 --attach pid 或 gdbserver64 // 待调试的pid -要点： 手机内部使用 gdbserver， 用gdbserver64导入符号表不生效。而使用 gdbserver64， linux侧显示找不到符号表 自然，我们set solib-search-path /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/ ------> 用的lib TODO：怎么确定手机里到底用的是lib还是lib64？ gdbserver64+ lib64组合会怎么样？ 补充： gdbserver :12345 --attach pid gdbserver 192.168.1.0:12345 --attach pid // ip是server的ip。不是必须项 程序未启动时： gdbserver [设备ip]:[端口] [需要运行的程序] $ gdbserver 192.168.1.0:8000 test 3.3.4. gdbserver 与 gdbclient 网络链接---端口转发方式（优） 手机侧： adb forward tcp:1235 tcp:1235 && adb shell gdbserver :1235 --attach pid ------------------------> 技巧： 虽然命令是执行的手机侧命令，也可以直接在linux侧执行（因为docker容器（linux）已经与手机adb 连接 ） linux侧： gdbclient.py默认不指定ip： gdb.execute(\"target extended-remote \" + target) gdbclient.py --port 1235 -p 864 优： 1、不需要两个设备连同一局域网 2、不需要修改 修改gdbclient.py （指定手机ip） 3.3.5. gdbserver 与 gdbclient 网络链接---局域网指定ip方法（次要） 网络环境准备： 1、手机、linux连同一局域网 2、linux可以ping手机ip -修改gdbclient.py 中连接remote方式，指定手机ip： #gdb.execute(\"target extended-remote \" + target) ------> 修改为：gdb.execute(\"target remote 192.168.1.6\" + target) 启动gdbclient.py （封装了先启动gdbserver，后gdbclient），命令： gdbclient.py --port 12345 -p PID 其中，进程PID获取： adb shell ps -ef | grep mediaserver 3.3.6. GDB操作 1、设置断点： (gdb) b android::MediaPlayerService::Client::start (gdb) b frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp:1072 2、设置continue：(gdb) c ------------> 必须设置，不然进程会卡主 3、操作手机： android::MediaPlayerService::Client::start 触发点：设置 ------- 声音 -------- 媒体音量 然后就断点住了 3.3.7. 判断是否环境OK (gdb) info shared 标准: 显示共享库 -----------> 看是否有结果 lib hideContent (gdb) info shared From To Syms Read Shared Object Library 0xef8bb000 0xef951a50 Yes (*) /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/bin/linker 0xef03a000 0xef06262c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libbinder.so 0xeea59000 0xeea62e28 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/liblog.so 0xef09c000 0xef0abb70 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libmediadrm.so 0xee95a000 0xee962288 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libutils.so 0xeee02000 0xeee4a984 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libhidlbase.so 0xeeae8000 0xeeae8b78 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libhidlmemory.so 0xeea29000 0xeea290bc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libhidltransport.so 0xef340000 0xef36ea70 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hardware.drm@1.0.so 0xef1de000 0xef1f87e8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hardware.drm@1.1.so 0xeef38000 0xeef5ffb0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hardware.drm@1.2.so 0xef0fd000 0xef1494a4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libc++.so 0xeebd5000 0xeec59094 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib/bionic/libc.so 0xef198000 0xef1ad484 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib/bionic/libm.so 0xef24e000 0xef24e138 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib/bionic/libdl.so 0xeed86000 0xeed8c5c0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libbase.so 0xee9dd000 0xee9e2128 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libcutils.so 0xeeb1c000 0xeeb1cc58 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libbinderthreadstate.so 0xef2ee000 0xef2f9544 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libmediadrmmetrics_lite.so 0xee8d4000 0xee8d6c34 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libmediametrics.so 0xeefe4000 0xeefe8a6c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libmediautils.so 0xeefa2000 0xeefaef74 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libstagefright_foundation.so 0xef426000 0xef426160 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libhidlallocatorutils.so 0xef3dd000 0xef3f5760 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libprocessgroup.so 0xef388000 0xef388218 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libvndksupport.so 0xeed3a000 0xeed3a0bc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libhwbinder.so 0xeeb4f000 0xeeb5b22c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hidl.memory@1.0.so 0xee98f000 0xee994524 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hidl.memory.token@1.0.so 0xef299000 0xef2afaf0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libprotobuf-cpp-lite.so 0xeeee2000 0xeeef22e8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libmemunreachable.so 0xeee97000 0xeeeaf408 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hardware.graphics.bufferqueue@1.0.so 0xef219000 0xef2198e8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hidl.token@1.0-utils.so 0xeecc9000 0xeecc9874 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libcgrouprc.so 0xeec93000 0xeec9305a Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libdl_android.so 0xeeaba000 0xeeaba0bc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfis---Type to continue, or q to quit--- h/symbols/system/lib/android.hardware.graphics.common@1.0.so 0xeed4f000 0xeed4f0dc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hardware.media@1.0.so 0xee935000 0xee93bdc4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/android.hidl.token@1.0.so 0xee8a2000 0xee8a3410 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib/libnetd_client.so lib64 hideContent (gdb) info share From To Syms Read Shared Object Library 0x00000079db618000 0x00000079db6e9528 Yes (*) /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/bin/linker64 0x00000079d93c8000 0x00000079d94cfdac Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libandroid_runtime.so 0x00000079d686c000 0x00000079d68a903c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbinder.so 0x00000079d6633000 0x00000079d663a7a4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcutils.so 0x00000079d8e45000 0x00000079d8eaa4e4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidlbase.so 0x00000079d6daa000 0x00000079d6db7510 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/liblog.so 0x00000079d609a000 0x00000079d60a5944 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libutils.so 0x00000079d6717000 0x00000079d67365c4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libwilhelm.so 0x00000079d5f97000 0x00000079d60078b0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libc++.so 0x00000079d83cb000 0x00000079d847205c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/bionic/libc.so 0x00000079d7d19000 0x00000079d7d3c470 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/bionic/libm.so 0x00000079d8a53000 0x00000079d8a531cc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/bionic/libdl.so 0x00000079d8ee2000 0x00000079d8ee90b4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbpf_android.so 0x00000079d5c62000 0x00000079d5c66fe8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnetdbpf.so 0x00000079d92a9000 0x00000079d92b1bbc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnetdutils.so 0x00000079d8cb4000 0x00000079d8cb4e00 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmemtrack.so 0x00000079d89be000 0x00000079d89f1e98 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libandroidfw.so 0x00000079d71d8000 0x00000079d71ddafc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libappfuse.so 0x00000079d7fee000 0x00000079d7ff5ef8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbase.so 0x00000079d6a76000 0x00000079d6b205c4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcrypto.so 0x00000079d6968000 0x00000079d6969a60 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libdebuggerd_client.so 0x00000079d6fdd000 0x00000079d6ff1150 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libui.so 0x00000079d5c26000 0x00000079d5c2a030 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libgraphicsenv.so 0x00000079d5cf8000 0x00000079d5d5b144 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libgui.so 0x00000079d8356000 0x00000079d835c50c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsensor.so 0x00000079d6163000 0x00000079d6177fb8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libinput.so 0x00000079d61b0000 0x00000079d61e9994 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcamera_client.so 0x00000079d90ef000 0x00000079d90f1f6c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcamera_metadata.so 0x00000079d5aed000 0x00000079d5be4d9c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsqlite.so 0x00000079d7194000 0x00000079d71aae50 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libEGL.so 0x00000079d8b64000 0x00000079d8b659f8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libGLESv1_CM.so 0x00000079d68f4000 0x00000079d68f910c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libGLESv2.so 0x00000079d5a6f000 0x00000079d5a7410c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libGLESv3.so 0x00000079d69d2000 0x00000079d69e5f3c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libvulkan.so 0x00000079d65af000 0x00000079d65b63ec Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libziparchive.so 0x00000079d8f9c000 0x00000079d8f9d6e4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libETC1.so 0x00000079d890b000 0x00000079d890b610 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhardware.so 0x00000079d7261000 0x00000079d7262874 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhardware_legacy.so 0x00000079d8122000 0x00000079d8131030 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libselinux.so 0x00000079d804f000 0x00000079d80a208c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia.so 0x00000079d8b2e000 0x00000079d8b37d68 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia_helper.so 0x00000079d65ed000 0x00000079d65f2f48 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmediametrics.so 0x00000079d6515000 0x00000079d651a844 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmeminfo.so 0x00000079d7e3b000 0x00000079d7e9cdc0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libaudioclient.so 0x00000079d6ee7000 0x00000079d6ee966c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libaudiopolicy.so 0x00000079d91da000 0x00000079d922086c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libjpeg.so 0x00000079d6ebb000 0x00000079d6ebcae0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libusbhost.so 0x00000079d8d70000 0x00000079d8deca20 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libharfbuzz_ng.so 0x00000079d5ed1000 0x00000079d5ee04f4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libz.so 0x00000079d9a2d000 0x00000079d9c4bc78 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpdfium.so 0x00000079d7d59000 0x00000079d7d69484 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libimg_utils.so 0x00000079d92c3000 0x00000079d92c4b3c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnetd_client.so 0x00000079d6e2f000 0x00000079d6e32a7c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsoundtrigger.so 0x00000079d7153000 0x00000079d716f0d0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libminikin.so 0x00000079d7a56000 0x00000079d7a788a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libprocessgroup.so 0x00000079d80fb000 0x00000079d80fc0e0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnativebridge_lazy.so ---Type to continue, or q to quit---return 0x00000079d5e99000 0x00000079d5e99770 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnativeloader_lazy.so 0x00000079d9254000 0x00000079d926f7a4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmemunreachable.so 0x00000079d7a32000 0x00000079d7a32014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidltransport.so 0x00000079d9512000 0x00000079d9512014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhwbinder.so 0x00000079d8c1b000 0x00000079d8c6714c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libvintf.so 0x00000079d8f04000 0x00000079d8f0584c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnativewindow.so 0x00000079d742c000 0x00000079d78c4268 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhwui.so 0x00000079d703a000 0x00000079d703a0ac Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libdl_android.so 0x00000079d894f000 0x00000079d89706a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstatslog.so 0x00000079d7f50000 0x00000079d7f5b6c8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/server_configurable_flags.so 0x00000079d7ab3000 0x00000079d7ab42d0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbinderthreadstate.so 0x00000079d5f17000 0x00000079d5f171e0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libvndksupport.so 0x00000079d82ef000 0x00000079d830d8b8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia_omx.so 0x00000079d5e2d000 0x00000079d5e2db80 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libaudiomanager.so 0x00000079d9602000 0x00000079d9712cd8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright.so 0x00000079d60dd000 0x00000079d60f87a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_foundation.so 0x00000079d6c8c000 0x00000079d6c8d044 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_http_support.so 0x00000079d6c2a000 0x00000079d6c2d598 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbpf.so 0x00000079d8f58000 0x00000079d8f5f9cc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.memtrack@1.0.so 0x00000079d6cde000 0x00000079d6cdec88 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libprocinfo.so 0x00000079d7121000 0x00000079d7130394 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.frameworks.bufferhub@1.0.so 0x00000079d5dda000 0x00000079d5de2a58 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.allocator@2.0.so 0x00000079d88d8000 0x00000079d88e0a58 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.allocator@3.0.so 0x00000079d6660000 0x00000079d666002c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.common@1.2.so 0x00000079d86e1000 0x00000079d86eb9a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.mapper@2.0.so 0x00000079d6b4f000 0x00000079d6b59ed0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.mapper@2.1.so 0x00000079d7914000 0x00000079d79209a0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.mapper@3.0.so 0x00000079d5e51000 0x00000079d5e517e0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsync.so 0x00000079d9759000 0x00000079d9779b74 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.bufferqueue@1.0.so 0x00000079d8add000 0x00000079d8af8728 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.bufferqueue@2.0.so 0x00000079d6e43000 0x00000079d6e43014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.common@1.1.so 0x00000079d7063000 0x00000079d7063bcc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hidl.token@1.0-utils.so 0x00000079d6de4000 0x00000079d6deb560 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbufferhub.so 0x00000079d9195000 0x00000079d91a4864 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbufferhubqueue.so 0x00000079d9ca1000 0x00000079d9cb3778 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpdx_default_transport.so 0x00000079d8a1e000 0x00000079d8a2bb08 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbacktrace.so 0x00000079d7fa7000 0x00000079d7fb83e0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.configstore@1.0.so 0x00000079d6f85000 0x00000079d6f85470 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.configstore-utils.so 0x00000079d6d4f000 0x00000079d6d4f014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.common@1.0.so 0x00000079d87ac000 0x00000079d87b8f5c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.system.suspend@1.0.so 0x00000079d6f45000 0x00000079d6f6fb44 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpcre2.so 0x00000079d69ad000 0x00000079d69ad58c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpackagelistparser.so 0x00000079d79c0000 0x00000079d79d3c44 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsonivox.so 0x00000079d649b000 0x00000079d64b4474 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libexpat.so 0x00000079d9556000 0x00000079d9562f2c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libaudioutils.so 0x00000079d64cc000 0x00000079d64d610c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmediautils.so 0x00000079d7094000 0x00000079d70afab8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnblog.so 0x00000079d908f000 0x00000079d90910b0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libvibrator.so 0x00000079d9009000 0x00000079d90705fc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libft2.so 0x00000079d816e000 0x00000079d816eadc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcgrouprc.so 0x00000079d6050000 0x00000079d6062cfc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidl-gen-utils.so 0x00000079d87ec000 0x00000079d87fb6c0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libtinyxml2.so 0x00000079d81ee000 0x00000079d8271d68 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libdng_sdk.so 0x00000079d6547000 0x00000079d6557a30 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpiex.so 0x00000079d8d17000 0x00000079d8d3a2fc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpng.so 0x00000079d8891000 0x00000079d88b1748 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libprotobuf-cpp-lite.so 0x00000079d6127000 0x00000079d612a358 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libheif.so ---Type to continue, or q to quit---return 0x00000079d9128000 0x00000079d916ac6c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.media.omx@1.0.so 0x00000079d6bd9000 0x00000079d6be3698 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libdrmframework.so 0x00000079d5da3000 0x00000079d5da5130 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia_omx_client.so 0x00000079d66c4000 0x00000079d66c62dc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_codecbase.so 0x00000079d6b89000 0x00000079d6b8a124 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_omx_utils.so 0x00000079d6777000 0x00000079d67a7168 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libRScpp.so 0x00000079d82ac000 0x00000079d82ac104 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidlallocatorutils.so 0x00000079d8ce2000 0x00000079d8ce2ec8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidlmemory.so 0x00000079d8baf000 0x00000079d8bb7a60 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hidl.allocator@1.0.so 0x00000079d6c51000 0x00000079d6c59df8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.cas.native@1.0.so 0x00000079d7cb9000 0x00000079d7cb901c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.media@1.0.so 0x00000079d6d14000 0x00000079d6d1d770 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hidl.token@1.0.so 0x00000079d8739000 0x00000079d876b80c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libunwindstack.so 0x00000079d70e9000 0x00000079d70f4b6c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.configstore@1.1.so 0x00000079d8814000 0x00000079d881508c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstdc++.so 0x00000079d67d4000 0x00000079d67d5bb0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libspeexresampler.so 0x00000079d721c000 0x00000079d722c5b8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hidl.memory@1.0.so 0x00000079d7dcd000 0x00000079d7dd47a0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hidl.memory.token@1.0.so 0x00000079d7f13000 0x00000079d7f360d8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.cas@1.0.so 0x00000079d7db9000 0x00000079d7db9718 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libdexfile_support.so 0x00000079d5a94000 0x00000079d5ab0080 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/liblzma.so 0x00000079d7ce3000 0x00000079d7cf08b0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libnativeloader.so 0x00000079d6693000 0x00000079d6695374 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libnativehelper.so 0x00000079d8a85000 0x00000079d8a86308 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libnativebridge.so 0x00000079d6936000 0x00000079d693770c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libandroidicu.so 0x00000079d7b6e000 0x00000079d7c622a0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libicuuc.so 0x00000079d62e0000 0x00000079d6456370 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libicui18n.so 0x0000007954eb8000 0x0000007955341a74 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libart.so 0x00000079d9d69000 0x00000079d9d6939c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libartpalette.so 0x00000079d9e61000 0x00000079d9eb181c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libartbase.so 0x000000795539e000 0x00000079553c6268 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libdexfile.so 0x00000079d9d1d000 0x00000079d9d3bd5c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libprofile.so 0x00000079d9d96000 0x00000079d9d97acc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libsigchain.so 0x0000007954d1d000 0x0000007954d1d9e0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libartpalette-system.so 0x0000007954d54000 0x0000007954d56370 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libtombstoned_client.so 0x0000000070a51000 0x0000000070ce5f60 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot.oat 0x0000000070d34000 0x0000000070e38dd0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-core-libart.oat 0x0000000070e4c000 0x0000000070e78df0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-okhttp.oat 0x0000000070e8a000 0x0000000070ea0cd4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-bouncycastle.oat 0x0000000070eaa000 0x0000000070eaa000 Yes (*) /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-apache-xml.oat 0x0000000071135000 0x0000000071a3ff30 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-framework.oat 0x0000000071a57000 0x0000000071a6d28c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-ext.oat 0x0000000071ad5000 0x0000000071c3594c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-telephony-common.oat 0x0000000071c3c000 0x0000000071c3cf78 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-voip-common.oat 0x0000000071c45000 0x0000000071c4fde4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-ims-common.oat 0x0000000071c56000 0x0000000071c56000 Yes (*) /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/framework/arm64/boot-android.test.base.oat 0x000000794d6e0000 0x000000794d6e6a6c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libadbconnection.so 0x000000794d6ad000 0x000000794d6b8c6c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libandroid.so 0x000000794d58b000 0x000000794d675b94 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libxml2.so 0x000000794d4ee000 0x000000794d511db8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libaaudio.so 0x000000794d32b000 0x000000794d32cf94 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libamidi.so 0x000000794d155000 0x000000794d16ec7c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmediandk.so 0x000000794d233000 0x000000794d2332f0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libandroid_runtime_lazy.so 0x000000794d38a000 0x000000794d38a9ec Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia_jni_utils.so 0x000000794d2dc000 0x000000794d2f2334 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmediadrm.so 0x000000794d349000 0x000000794d3502d8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia2_jni_core.so 0x000000794d4b4000 0x000000794d4b50d4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmediandk_utils.so ---Type to continue, or q to quit---return 0x000000794d3e2000 0x000000794d3f1e5c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmediadrmmetrics_lite.so 0x000000794d432000 0x000000794d471e54 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.drm@1.0.so 0x000000794d277000 0x000000794d29ba88 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.drm@1.1.so 0x000000794d1b1000 0x000000794d1e86f4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.drm@1.2.so 0x000000794d10d000 0x000000794d113488 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbinder_ndk.so 0x000000794d0d1000 0x000000794d0f890c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcamera2ndk.so 0x000000794d089000 0x000000794d0890d8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libjnigraphics.so 0x000000794cbaf000 0x000000794cd347b0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libneuralnetworks.so 0x000000794cb61000 0x000000794cb61b78 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libfmq.so 0x000000794c9de000 0x000000794c9dffbc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libtextclassifier_hash.so 0x000000794cad8000 0x000000794caf3648 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.neuralnetworks@1.0.so 0x000000794ca93000 0x000000794ca9e738 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.neuralnetworks@1.1.so 0x000000794ca30000 0x000000794ca65cdc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.neuralnetworks@1.2.so 0x000000794cb16000 0x000000794cb16014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hidl.safe_union@1.0.so 0x000000794c99e000 0x000000794c99e0d8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libOpenMAXAL.so 0x000000794c96f000 0x000000794c96f0d8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libOpenSLES.so 0x000000794c91c000 0x000000794c923950 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libRS.so 0x000000794c878000 0x000000794c879628 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libutilscallstack.so 0x000000794c8a1000 0x000000794c8e66e4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.renderscript@1.0.so 0x000000794c82f000 0x000000794c82fd94 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libwebviewchromium_plat_support.so 0x000000794c7cf000 0x000000794c7f50bc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libjavacore.so 0x000000794c753000 0x000000794c753220 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libandroidio.so 0x000000794afdf000 0x000000794aff837c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libopenjdk.so 0x000000794afa0000 0x000000794afa3640 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libopenjdkjvm.so 0x000000794ab08000 0x000000794ad53bf4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libart-compiler.so 0x000000794ae22000 0x000000794af671d8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.runtime/lib64/libvixl.so 0x0000007940c39000 0x0000007940c72600 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmedia_jni.so 0x0000007940bd9000 0x0000007940bf971c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libmtp.so 0x0000007940c9a000 0x0000007940ca914c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libexif.so 0x0000007940b81000 0x0000007940b8112c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libasyncio.so 0x0000007940b64000 0x0000007940b68754 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsoundpool.so 0x0000007940b0d000 0x0000007940b30d44 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.conscrypt/lib64/libjavacrypto.so 0x00000079408fb000 0x00000079409a55c4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.conscrypt/lib64/libcrypto.so 0x0000007940825000 0x0000007940855800 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.conscrypt/lib64/libssl.so 0x0000007940a2a000 0x0000007940a9a8b0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/apex/com.android.conscrypt/lib64/libc++.so No /system/framework/oat/arm64/android.hidl.base-V1.0-java.odex No /system/framework/oat/arm64/android.hidl.manager-V1.0-java.odex No /vendor/lib64/hw/android.hardware.graphics.mapper@2.0-impl-2.1.so 0x000000793e48f000 0x000000793e4999a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.mapper@2.0.so 0x000000793e45e000 0x000000793e45e014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.common@1.0.so 0x000000793e846000 0x000000793e8ab4e4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidlbase.so 0x000000793e71a000 0x000000793e71a014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhidltransport.so 0x000000793e6e2000 0x000000793e6e2014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhwbinder.so 0x000000793e55e000 0x000000793e569944 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libutils.so 0x000000793e78c000 0x000000793e7937a4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcutils.so 0x000000793e633000 0x000000793e6a38b0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libc++.so 0x000000793e41d000 0x000000793e424ef8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbase.so 0x000000793e51f000 0x000000793e5202d0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libbinderthreadstate.so 0x000000793e598000 0x000000793e5ba8a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libprocessgroup.so 0x000000793e74c000 0x000000793e756ed0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.mapper@2.1.so 0x000000793e3e4000 0x000000793e3e4014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.graphics.common@1.1.so 0x000000793e4dc000 0x000000793e4dc610 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libhardware.so No /vendor/lib64/egl/libEGL_adreno.so No /vendor/lib64/libadreno_utils.so No /vendor/lib64/libgsl.so No /vendor/lib64/egl/libGLESv2_adreno.so No /vendor/lib64/libllvm-glnext.so ---Type to continue, or q to quit---return No /vendor/lib64/egl/libGLESv1_CM_adreno.so No /vendor/lib64/egl/eglSubDriverAndroid.so 0x000000793cf24000 0x000000793cf353d4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcompiler_rt.so 0x000000793ce5a000 0x000000793ce5a880 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libwebviewchromium_loader.so 0x00000078fce1e000 0x00000078fce1e5ac Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libashmemd_client.so 0x00000078fcdf7000 0x00000078fcdf7ac0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/ashmemd_aidl_interface-cpp.so No /system/framework/oat/arm64/services.odex No /system/framework/oat/arm64/ethernet-service.odex No /system/framework/oat/arm64/wifi-service.odex No /system/framework/oat/arm64/com.android.location.provider.odex 0x00000078ee9d7000 0x00000078eea1d624 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libandroid_servers.so 0x00000078eeeab000 0x00000078eeeb81c8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libkeystore_binder.so 0x00000078ef151000 0x00000078ef170114 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libinputflinger.so 0x00000078eea45000 0x00000078eea470c8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libinputflinger_base.so 0x00000078ef0e9000 0x00000078ef0effd8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libinputservice.so 0x00000078eec46000 0x00000078eec4617c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libschedulerservicehidl.so 0x00000078eec1b000 0x00000078eec379b8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsensorservice.so 0x00000078eeb61000 0x00000078eeb64284 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsensorservicehidl.so 0x00000078ef31a000 0x00000078ef31d358 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libtinyalsa.so 0x00000078eee72000 0x00000078eee76aa4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libnetutils.so 0x00000078ef3a1000 0x00000078ef3a1328 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libpsi.so 0x00000078ef374000 0x00000078ef37420c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.audio.common@2.0.so 0x00000078eed64000 0x00000078eed88cc0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.broadcastradio@1.0.so 0x00000078ef02e000 0x00000078ef056aec Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.broadcastradio@1.1.so 0x00000078eecdd000 0x00000078eecf21f8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.contexthub@1.0.so 0x00000078ef1f9000 0x00000078ef28eeb4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.gnss@1.0.so 0x00000078ee869000 0x00000078ee895570 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.gnss@1.1.so 0x00000078eef4f000 0x00000078eefac21c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.gnss@2.0.so 0x000000794849f000 0x00000079484ac608 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.gnss.measurement_corrections@1.0.so 0x00000078eefdb000 0x00000078eefe9160 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.gnss.visibility_control@1.0.so 0x00000078eeb18000 0x00000078eeb206c0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.input.classifier@1.0.so 0x00000078eeb95000 0x00000078eeb9d4a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.ir@1.0.so 0x00000078eede8000 0x00000078eedf0344 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.light@2.0.so 0x00000078eee2b000 0x00000078eee34928 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.power@1.0.so 0x00000078ef4cb000 0x00000078ef4d4b78 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.power@1.1.so 0x0000007948597000 0x00000079485a41e4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.power.stats@1.0.so 0x00000078eed29000 0x00000078eed30a04 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.tetheroffload.config@1.0.so 0x0000007948558000 0x0000007948561a3c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.thermal@1.0.so 0x00000078ef450000 0x00000078ef465814 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.tv.cec@1.0.so 0x0000007944bce000 0x0000007944bdd434 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.tv.input@1.0.so 0x00000078ee94f000 0x00000078ee959418 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.vibrator@1.0.so 0x0000007944b62000 0x0000007944b6b0d4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.vibrator@1.1.so 0x00000078eeed6000 0x00000078eeedfa20 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.vibrator@1.2.so 0x00000078eeaea000 0x00000078eeaf58b4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.vibrator@1.3.so 0x00000078eecad000 0x00000078eecb4b78 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.vr@1.0.so 0x00000078ee91a000 0x00000078ee92204c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.frameworks.schedulerservice@1.0.so 0x000000793ceda000 0x000000793cef7548 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.frameworks.sensorservice@1.0.so 0x00000078ef3f0000 0x00000078ef3f1a58 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/suspend_control_aidl_interface-cpp.so 0x00000078eebdf000 0x00000078eebfac94 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.keymaster@4.0.so 0x00000078ef2d3000 0x00000078ef2e7aac Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libkeymaster4support.so 0x00000078ee816000 0x00000078ee82a508 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libkeystore_aidl.so 0x00000078ef494000 0x00000078ef4993e8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libkeystore_parcelables.so 0x00000078eea9c000 0x00000078eea9c104 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libinputreporter.so 0x00000079484fa000 0x000000794851cb24 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libinputreader.so 0x00000078ef430000 0x00000078ef432314 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsensorprivacy.so 0x0000007948455000 0x000000794846406c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.sensors@1.0.so 0x00000078ee8d7000 0x00000078ee8ec708 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.sensors@2.0.so ---Type to continue, or q to quit---return 0x0000007944bac000 0x0000007944bac49c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.input.common@1.0.so 0x00000078ef098000 0x00000078ef0aeb28 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.keymaster@3.0.so No /system/priv-app/SettingsProvider/oat/arm64/SettingsProvider.odex 0x00000078d6dde000 0x00000078d6dde2ec Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libwifi-service.so No /system/priv-app/Telecom/oat/arm64/Telecom.odex No /system/framework/oat/arm64/com.android.location.provider.odex No /system/priv-app/FusedLocation/oat/arm64/FusedLocation.odex 0x0000007877d78000 0x0000007877dd518c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsfplugin_ccodec.so 0x0000007877910000 0x0000007877963c64 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.media.c2@1.0.so 0x0000007877cc1000 0x0000007877cc1014 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcodec2.so 0x0000007877d0e000 0x0000007877d21b50 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcodec2_client.so 0x00000078779d7000 0x0000007877a37ee8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcodec2_vndk.so 0x0000007877aed000 0x0000007877b1f52c Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libsfplugin_ccodec_utils.so 0x0000007877b78000 0x0000007877bc64a8 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_bufferqueue_helper.so 0x0000007877c90000 0x0000007877cb3e00 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_omx.so 0x0000007877aab000 0x0000007877ab8158 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_xmlparser.so 0x0000007877a5d000 0x0000007877a75f00 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/android.hardware.media.bufferpool@2.0.so 0x0000007877c21000 0x0000007877c312f0 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libcodec2_hidl_client@1.0.so 0x0000007877e54000 0x0000007877e68ffc Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libstagefright_bufferpool@2.0.so 0x0000007877e3c000 0x0000007877e3cdc4 Yes /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/libion.so No /vendor/lib64/hw/gralloc.msm8996.so No /vendor/lib64/libqdMetaData.so 3.3.8. 要点：关于gdbserver 与 gdbserver64的选择： -用info sharedlibrary 来试探 用gdbserver 还是 gdbserver 64 步骤： 1、先默认gdbserver 。然后 info share 2、如果没有需要加载的so，则必然环境中运行的是lib64 lib64：自动选择了64 --------------> TODO： 似乎是因为gdbserver64 file '/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/bin/app_process64' //------>64 directory '/home/chen/workingSpace/aosp_android1000_r17' //【】 -------->很重要！！！！！！ set solib-absolute-prefix /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols set solib-search-path /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/hw:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/ssl/engines:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/drm:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/egl:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/system/lib64/soundfx:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/vendor/lib64/:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/vendor/lib64/hw:/home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/vendor/lib64/egl source /home/chen/workingSpace/aosp_android1000_r17/development/scripts/gdb/dalvik.gdb android10上，常见模块使用的lib类型，总结： 进程名（模块） app_process64（system_server） lib64 (gdb) b android::InputDispatcher::findTouchedWindowAtLocked (gdb) b frameworks/native/services/inputflinger/InputDispatcher.cpp:544 mediaserver (gdb) b android::MediaPlayerService::Client::start(gdb) b frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp:1072 3.3.9. 要点：break函数，必须加namesapce -必须加namesapce，比如： (gdb) b android::InputDispatcher::findTouchedWindowAtLocked // -------> 手动加andriod namesapce 或 (gdb) b frameworks/native/services/inputflinger/InputDispatcher.cpp:544 --------------> 已验证OK breakpoint: (gdb) b android::MediaPlayerService::Client::start breakpoint: (gdb) b frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp:1072 --------------> 已验证OK 3.3.10. 技巧之，避免watdog影响杀进程 如果要调试的是framework相关的进程的native代码，可能会受到system server的watchdog的影响，1分钟没有及时响应操作就会触发watchdog而kill到system server进程，zygote也会跟着挂掉，这里有个小技巧可以用一下，就是在调试的过程中，如果需要耗时查看一些运行时状态，可以先执行 规定：必须 adb shell am hang ---------------------> TODO: 安卓10已经验证，此命令不行！！！！！！！！！！ 3.3.11. 补充 规则： gdbserver版本必须与gdb版本一致 gdbclient.py使用的gdb和gdbserver（gdbserver64）版本： GNU gdb (GDB) 7.11 版本必须一致 3.4. 法二：通用GDB方法的步骤（TODO:验证补充） google封装了gdbclient.py --------> 通用的，就是gdbclient.py 封装的细节： 1、设置GDB路径、端口号、符号目录、路径映射（不用）： TODO: 学习Google是如何配置符号的 2、 设置端口转发，attach进程pid adb forward tcp:1235 tcp:1235 ------> 前面选定的端口 adb shell gdbserver :1235 --attach pid 或 adb shell gdbserver64 :1235 --attach pid 3、设置断点 3.4.1. 注意： 1、需要保证所有环境adb version是一致的，否则会连不起来 哪些环境？ win、linux的通用adb、linux aosp根目录下的adb 2、gdbserver是可以手动起的，gdbclient的脚本会执行，见参考。 3、通过wifi调试，设备连接wifi,保证服务器和设备在同一个局域网内 $ adb tcpip 5555 #在设备端运行 或者 开发者选项>无线调试打开>IP地址和端口 $ adb connect #在服务端运行 4、adb forward tcp:1991 tcp:1991 6.0以后不用执行，gdbclient的脚本会执行（client侧的） 5、需要源码嘛？ 3.4.2. 参考 https://blog.csdn.net/hongguifengd/article/details/115423968 https://blog.csdn.net/wangzaieee/article/details/83895089 https://blog.csdn.net/weixin_34419326/article/details/90306477 https://source.android.com/docs/core/tests/debug/gdb 官方文档 3.4.3. 待整理 《docker，cpp断点调试》 对于好的项目的东西，要学着打开来看，比如 TODO: 学习gdbclient.py ，学习Google如何搭建GDB环境的 ----> 通用能力！！！！！！！！非常重要 至少有 设置sysroot 这四个值，最终路径是啥？对于GDB如何设置的 3.5. 法三：framework Native Clion 调试环境（linux下） 调试的前提：-------- 1、符号表 2、cmake跳转，见：framework Native Clion 跳转环境（linux下） 缺点：比纯粹的GDB，跳转慢一些 3.5.1. clion配置 1、链接 见，docker容器（linux）与手机如何adb 链接 2、设置远程调试： Run -> Edit Configurations 点击+号，选择GDB Remote Debug 3、设置GDB路径、端口号、符号目录、路径映射（不用）： GDB路径：不要用clion自带的。技巧：用AOSP的，匹配度最好 端口号 ：后面设置端口转发的 符号目录：/out/target/product/sailfish/symbols 注意：此目录下有lib64和lib两套！！！ 路径映射（不用）：用来同步代码的， 宿主机与 linux机 之间代码映射 3.5.2. clion端开始debug 1、 设置端口转发，attach进程pid adb forward tcp:1235 tcp:1235 ---》前面选定的端口 adb shell gdbserver :1235 --attach pid 或 adb shell gdbserver64 :1235 --attach pid 2、设置断点 3、CLion点击Debug ‘AndroidRemoteDebug’ 3.5.3. 技巧： 技巧1： 命令行GDB 与 界面可以同时用！！！！！！ -------》优： 1、在界面的情况下，也建议使用GDB命令行，要比F7、F8快捷键要快：GDB 牵动界面变化 ​ 2、界面只用于 显示代码 + 查看临时变量 技巧2： 部分难的断点也用GDB，不用界面。比如，断点在Thread12上面，界面做不到 b android::Looper::wake thread 12 技巧2： 显示放左边。控制GDB 放右边 3.5.4. 参考 https://blog.csdn.net/iamdy/article/details/111272854 https://cloud.tencent.com/developer/article/1406250 3.6. 断点调试环境 lib64 、lib 区分 ----> 从debug角度，为啥需要？ 用于选择gdbServer/gdbServer64、lib/lib64 https://qa.1r1g.com/sf/ask/2230326521/ 如果您的apk是用纯java(没有jni)编写的,那么在64位 - 原始/ 32位辅助Android操作系统上,默认情况下, 您的应用程序将始终以64位模式运行 理解：https://blog.csdn.net/TyearLin/article/details/121370999?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-121370999-blog-107559416.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-121370999-blog-107559416.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=4 3.6.1. 解决办法： 方法一（天然ok）： jdb下环境，gdbClient.py 脚本已经判断是多少位了，并选择gdbsever、lib 64或32。。。gdbClient.py加log打印 方法二： clion环境下，gdbsever不会自动选择、lib自动选择 ---> 手动选择 gdbsever64： adb shell gdbserver64 :1235 --attach pid 补充： gdbsever选错的现象： （1） （2）(gdb)info sh info sharedlibrary 显示共享库为空 方法三：强制APK底层调用bit32库（优） ---> 然后用方法一、方法二 参考：如何强制Android应用程序使用32位或64位库： https://qa.1r1g.com/sf/ask/2230326521/ 步骤： 1、编译对应的位数的apk（似乎并不必要） // build.gradle android { compileSdkVersion 29 buildToolsVersion \"30.0.3\" defaultConfig { ............. } splits { abi { enable true reset() include 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for universalApk true //generate an additional APK that contains all the ABIs } } } dependencies { ........... } 补充： android中的armeabi、armeabi-v7a、arm64-v8a及x86等 https://blog.csdn.net/u013083465/article/details/122453664 2、指定ABI安装apk（这是关键点） 安装apk时可以指定ABI 。 在ARM设备的情况下, 要在32位模式下运行安装使用, adb install --abi armeabi-v7a 要在64位模式下运行安装使用, adb install --abi arm64-v8a 3.6.2. 以上所有判断 环境OK不OK的办法 见《判断是否环境OK》 info share 4. del_aosp14进入lldb （与aosp10进入gdb 基本一样） linux侧: adb forward tcp:12345 tcp:12345 手机上： /data/local/tmp # ./lldb-server platform --listen \"*:12345\" --server 执行：gdbclient.py --port 12345 -p pid1 ---------> 其中:lldb-server 来自 ./prebuilts/clang/host/linux-x86/clang-r450784e/runtimes_ndk_cxx/aarch64/lldb-server 参考： https://blog.csdn.net/xiaowanbiao123/article/details/131039403 android 如何分析应用的内存（三）——LLDB命令行 https://blog.csdn.net/qq_26914291/article/details/127325820 LLDB 从害怕到真香 5. 本地GDB调试------安卓（安卓一定可以运行Linux程序） -极优：不分gdbserver和client，完全同linux ---------------> 万能！！ 5.1. 具体步骤 交叉编译android环境下gdb工具 1、编译产物： 交叉工具链编译 arm64的 gdb & so 2、导入 mkdir /system/myusr -----> 极优，为了避免影响系统 # gdb adb push ./14.2/image/usr/* /system/myusr/ && \\ # libmpfr.so.6 adb push ./14.2/recipe-sysroot/usr/lib64/* /system/myusr/lib64/ ------> 添加权限 chmod 777 -R /system/myusr/ 3、执行报错， gdb: No such file or directory： redfin:/system/myusr/bin # gdb /system/bin/sh: /system/myusr/bin/gdb: No such file or directory 原因： redfin:/system/myusr/bin # file /system/myusr/bin/gdb /system/myusr/bin/gdb: ELF shared object, 64-bit LSB arm64, dynamic (/usr/lib/ld-linux-aarch64.so.1), not stripped 链接器是 /usr/lib/ld-linux-aarch64.so.1 解决办法： ①、修改gdb 链接器的指向 ： $ patchelf --set-interpreter /system/myusr/lib64/ld-linux-aarch64.so.1 gdb/14.2/image/usr/bin/gdb $ file gdb/14.2/image/usr/bin/gdb gdb/14.2/image/usr/bin/gdb: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/myusr/lib64/ld-linux-aarch64.so.1, for GNU/Linux 5.15.0, with debug_info, not stripped 指向 了 /system/myusr/lib64/ld-linux-aarch64.so.1 ②、导入链接器so 4、可执行文件 gdb 需要添加到执行文件环境变量 PATH里： export PATH=/system/myusr/bin:$PATH so要加到 export LD_LIBRARY_PATH=/system/myusr/lib64 5.2. 总结： 1、 结论：安卓一定可以运行Linux程序，且可以不影响原生流程（把影响限定到自定义目录/system/myusr/） -TODO: 极优，可以极大扩展！！！！！ 2、最终制品路径：\\software\\softWare\\gdb_arm64_installPath_system_myusr.tar -----------> 可以直接在arm64机器上使用 6. 安卓，之前其他尝试 6.1. gdbserver文件调试（google已经废弃） ./adb -H 192.168.31.200 -P 9999 root user@aclgcl-ubnt:/data1/AJ9_3$ ./adb -H 192.168.31.200 -P 9999 forward tcp:5039 tcp:5039 user@aclgcl-ubnt:/data1/AJ9_3$ ./adb -H 192.168.31.200 -P 9999 shell ps -ef |grep systemui ./adb -H 192.168.31.200 -P 9999 shell gdbserver :5039 --attach 31249 或者 1|sailfish:/ # ps -ef |grep systemui root 1986 1700 0 01:42:08 pts/0 00:00:00 grep systemui u0_a88 31249 623 4 01:31:53 ? 00:00:24 com.android.systemui sailfish:/ # gdbserver :5039 --attach 31249 Attached; pid = 31249 Listening on port 5039 set solib-absolute-prefix /home/chen/workingSpace/aosp_android1000_r17/out/target/product/sailfish/symbols/ https://blog.csdn.net/wzy_0556/article/details/51911458 source build/envsetup.sh 和choosecombo命令： source build/envsetup.sh;choosecombo 否则汇报错：-bash: gdbclient: command not found gdbclient app_process32 :5039 ------>根目录下执行 gdbclient 782 ----->根目录下执行 ---》这个会执行gdbclient脚本 ------.. 因为adb的原因需要修改两处： （1）/home/chen/workingSpace/aosp_android1000_r17/development/scripts 下所有adb 修改为 adb -H 192.168.31.200 -P 9999 （PC的ip） （2）最后gdb会执行这一行，需要加上ip，才能连接上，或者删掉（手动：target remote 192.168.31.200:5039 ） (gdb) target remote 192.168.31.200:5039 ---》PC的ip https://blog.csdn.net/wangzaieee/article/details/83895089 init进程可以调试成功 ./adb -H 192.168.31.200 -P 9999 shell gdbserver64 :5039 ./init ----------》坑：这里一定要用64位的！！！ 重启了init进程，并且打印了pid 调试的流程： 35 mov x0, sp(gdb) b mainBreakpoint 1 at 0x5555578080: file system/core/init/main.cpp, line 56.(gdb) cContinuing.warning: Could not load shared library symbols for /system/bin/linker64.Do you need \"set solib-search-path\" or \"set sysroot\"?Breakpoint 1, main (argc=, argv=0x555557805c ) at system/core/init/main.cpp:5656 if (!strcmp(basename(argv[0]), \"ueventd\")) {(gdb) n60 if (argc > 1) {(gdb) n77 return FirstStageMain(argc, argv);(gdb) nProgram received signal SIGABRT, Aborted.abort () at bionic/libc/bionic/abort.cpp:4949 struct sigaction64 sa = { .sa_handler = SIG_DFL, .sa_flags = SA_RESTART };(gdb) nandroid::init::InstallRebootSignalHandlers()::$_14::__invoke(int) (signal=6) at system/core/init/reboot_utils.cpp:138138 action.sa_handler = [](int signal) {(gdb) n 命令： adb forward tcp:6100 tcp:7100 // PC上所有6100端口通信数据将被重定向到手机端7100端口server上 或者 adb forward tcp:6100 local:logd // PC上所有6100端口通信数据将被重定向到手机端UNIX类型socket上 ———————————————— 版权声明：本文为CSDN博主「东海陈光剑」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/universsky2015/article/details/83593488 linux 环境变量设置（临时 + 永久） export adb='adb -H 192.168.31.200 -P 9999' 7. GDB命令大全 7.1. Tutorial https://www.sourceware.org/gdb/ https://sourceware.org/gdb/current/onlinedocs/gdb/ GDB manual 7.2. 时机： 何时用gdb？何时用log？何时用调用栈？ 7.3. 启动gdb gdb main.exe main.exe为debug版本 7.4. 控制 启动 r（run） start 开始执行程序，停在main函数第一行语句前面等待命令 跳入函数 s 或 step 跳出函数finish ------>没有简写 下一行 n 或next 退出 q quit 执行上一条命令：Enter键 跳转执行 https://blog.csdn.net/yasi_xi/article/details/12784507 7.4.1. 断点相关： 函数打断点： b 函数名 例： b android::MediaPlayerService::Client::start 某一行打断点： b 源文件:行号 例如： b c_gdb.c:9 断点某一线程： b android::Looper::wake thread 12 条件断点： break 断点 if 条件 continue 断点编号(执行一次表示设定，再次执行表示取消) continue 断点编号 条件 查看断点：i b 或 info b 或 info breakpoint 或 info break 删除断点：d 断点号 或 delete 断点号 d 或 delete(删除所有断点) 禁用/开启断点：disable/enable breakpoint ignore： https://blog.csdn.net/weixin_33904522/article/details/112594152 赋值： print n =1 强制调用函数：call 表达式 或 print https://blog.csdn.net/yasi_xi/article/details/12784507 7.4.2. 阻塞线程 阻塞其他线程，仅调试当前线程工作： set scheduler-locking [on|off|step] 运行指定线程并允许其他线程并行执行： thread apply N command 7.5. 变量操作 ​ 设置变量：set var n=47 7.6. 显示 p（print） 变量名 打印指定变量的值 l（list） 列出源代码，接着上次的位置往下列，每次列10行 l 200 (list 行号） 列出从第几行开始的源代码 android::MediaPlayerService::Client::start list 函数名 列出某个函数的源代码 查看局部变量： (gdb) info locals i = 0 sum = 0 查看调用帧（栈） (gdb) bt backstrace #0 digui (n=9) at c_gdb.c:14 #1 0x000055bc7ca566a4 in digui (n=10) at c_gdb.c:19 #2 0x000055bc7ca56663 in main () at c_gdb.c:8 在不同frame之间切换：frame 2 ----> 来查看变量值 查看当前调试的进程：info inferiors 查看线程：info threads 查看线程堆栈 查看所有线程堆栈：thread apply all bt 查看指定线程堆栈：thread apply thread1 thread2... bt 大全： https://blog.csdn.net/weixin_33904522/article/details/112594152 显示共享库： (gdb) info sharedlibrary 进程和线程： https://blog.csdn.net/zhangye3017/article/details/80382496 查看进程：info inferiors 查看线程：info threads 查看线程栈结构：bt 切换线程：thread n（n代表第几个线程） https://blog.csdn.net/zhangye3017/article/details/80382496#:~:text=线程ID-,查看线程的一些信息,-//1.查看进程 查看指针指向的是具体基类实例(子类): set p obj on // 按照虚函数调用的规则显示输出 set p pretty on // pertty ----> 按照层次打印结构体 p *this 打印对象 例子： (gdb) p this // ------> 打印指针 $1 = (KWin::XdgToplevelWindow *) 0x556165de50 (gdb) p *this // 【1】 $2 = (KWin::XdgToplevelWindow) { = { = { = { = {}, members of KWin::Window: static staticMetaObject = { d = { superdata = { direct = 0x7f93e4f830 }, stringdata = 0x7f955c6f08 , data = 0x7f955c6010 , static_metacall = 0x7f954391c4 , relatedMetaObjects = 0x7f956c8f30 , extradata = 0x0 } }, m_output = 0x556147c670, m_frameGeometry = { // 【2】 位置和大小都能打印出来！ xp = 4, --Type for more, q to quit, c to continue without paging-- yp = 26, w = 940, h = 1050 }, m_clientGeometry = { xp = 4, yp = 75, w = 940, h = 1001 }, m_bufferGeometry = { xp = 4, yp = 75, w = 940, h = 1001 }, m_visual = 0, bit_depth = 32, info = 0x0, ready_for_painting = true, m_internalFBO = { > = { --Type for more, q to quit, c to continue without paging-- > = {}, members of std::__shared_ptr: _M_ptr = 0x0, _M_refcount = { _M_pi = 0x0 } }, }, m_internalImage = , m_virtualKeyboardGeometry = { xp = 0, yp = 0, w = 0, h = 0 }, 【1】规定：优先打印对象 7.7. gdb调试异常 ----> 适用于，程序直接挂了 https://www.cnblogs.com/catmelo/p/7207062.html 使用gdb捕获异常的扔出点（相当于在扔出异常的地方添加断点）： catch throw 使用gdb捕获线程退出（相当于在线程退出的时候添加断点）： catch pthread_exit 这样，如果相应的事件发生，gdb就会中断程序的执行， 就可以使用gdb的bt命令来检查出现错误的调用栈了。 强制函数返回 return return disassemble 反汇编指令 调试函数 https://blog.csdn.net/weixin_33904522/article/details/112594152 8. ldd 查看so依赖结构----so tree 依赖结构： ldd $(which gdb) $ ldd $(which gdb) linux-vdso.so.1 (0x00007ffe91782000) libreadline.so.8 => /lib/x86_64-linux-gnu/libreadline.so.8 (0x00007fb0e55ff000) libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fb0e55e3000) libncursesw.so.6 => /lib/x86_64-linux-gnu/libncursesw.so.6 (0x00007fb0e55a9000) libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007fb0e5579000) libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fb0e5573000) libpython3.8.so.1.0 => /lib/x86_64-linux-gnu/libpython3.8.so.1.0 (0x00007fb0e501d000) libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb0e4ff8000) libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fb0e4ea9000) libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007fb0e4e7b000) liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007fb0e4e52000) libbabeltrace.so.1 => /lib/x86_64-linux-gnu/libbabeltrace.so.1 (0x00007fb0e4e43000) libbabeltrace-ctf.so.1 => /lib/x86_64-linux-gnu/libbabeltrace-ctf.so.1 (0x00007fb0e4def000) libmpfr.so.6 => /lib/x86_64-linux-gnu/libmpfr.so.6 (0x00007fb0e4d6c000) libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fb0e4b8a000) libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fb0e4b6f000) libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb0e497d000) /lib64/ld-linux-x86-64.so.2 (0x00007fb0e5e9a000) libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007fb0e4978000) libglib-2.0.so.0 => /lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007fb0e484c000) libdw.so.1 => /lib/x86_64-linux-gnu/libdw.so.1 (0x00007fb0e47ed000) libelf.so.1 => /lib/x86_64-linux-gnu/libelf.so.1 (0x00007fb0e47d1000) libuuid.so.1 => /lib/x86_64-linux-gnu/libuuid.so.1 (0x00007fb0e47c8000) libgmp.so.10 => /lib/x86_64-linux-gnu/libgmp.so.10 (0x00007fb0e4744000) libpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fb0e46cf000) libbz2.so.1.0 => /lib/x86_64-linux-gnu/libbz2.so.1.0 (0x00007fb0e46bc000) 8.1. 查看缺少 # ldd Demo ./Demo: /lib64/libm.so.6: version `GLIBC_2.38' not found (required by ./Demo) //【】 缺少!!!!!!!!!!! ./Demo: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.32' not found (required by ./Demo) ./Demo: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.30' not found (required by ./Demo) ./Demo: /lib64/libc.so.6: version `GLIBC_2.38' not found (required by ./Demo) linux-vdso.so.1 (0x0000007f85b89000) libGLESv2.so.2 => /usr/lib64/libGLESv2.so.2 (0x0000007f80a80000) libpthread.so.0 => /lib64/libpthread.so.0 (0x0000007f80a60000) librt.so.1 => /lib64/librt.so.1 (0x0000007f80a40000) libwayland-client.so.0 => /usr/lib64/libwayland-client.so.0 (0x0000007f80a20000) libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000007f80800000) libm.so.6 => /lib64/libm.so.6 (0x0000007f80760000) libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000007f80730000) libc.so.6 => /lib64/libc.so.6 (0x0000007f80580000) libwayland-server.so.0 => /usr/lib64/libwayland-server.so.0 (0x0000007f80550000) libdrm.so.2 => /usr/lib64/libdrm.so.2 (0x0000007f80520000) /lib/ld-linux-aarch64.so.1 => /lib64/ld-linux-aarch64.so.1 (0x0000007f85b50000) libffi.so.8 => /usr/lib64/libffi.so.8 (0x0000007f80500000) TODO: 递归查询，找出gdb所有依赖 --------------> 避免要压缩所有 aarch64-poky-linux 文件 9. 问题 9.1. 问题： /lib64/libc.so.6: version GLIBC_2.XX' not found kde+weston10环境下， 提示：/lib64/libc.so.6: version GLIBC_2.XX' not found 解决方法： 法一： 编译对应版本的libc.so.6 --------> 没成功 参考：尝试解决Linux提示：/lib64/libc.so.6: version GLIBC_2.XX' not found ../configure --prefix=/bin/myTmp/ --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin 法二： 复制 chroot_arm环境下的 -----> OK 10. weston目前比较好的gdb环境： 1、虚拟机X86，tty下，走drm 。linux gdb + source env.sh (weston的bin以及so) ​ -------------> 非常优，1、无需手动加载so 2、无需指定源码 ​ 问题：不能看启动流程 2、kde板子，kde 环境下 gdb OK（自带gdb） ： 优： --wait-for-debugger 可以使用 可以用 weston --tty=1 --wait-for-debugger 可以看启动流程了！ --------------------> 使用gdb_arm attach 3、78板子，导入gdb console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/git.html":{"url":"Tool/git.html","title":"Git","keywords":"","body":"1. 目录：2. 结构3. git3.1. 两个节点之间差异 git diff3.2. 技巧：用git diff 或者 git patch作为代码的持久化存储3.3. 持久化 & 传递信息 -----> git patch3.3.1. git apply部分失败3.3.2. 技巧：可以直接用txt 看.patch文件3.4. 用tag替代commitID -----> git tag3.5. 本地有代码修改，如何 rebase 主干(或其他分支):3.6. git pull3.7. cherry-pick：3.8. git checkout3.9. git status + path3.10. git push3.11. 配置git + 查看已经配置3.12. 技巧：git管理之 建立本地git3.13. win下任意目录文件，都可以纳入git版本管理3.14. .gitignore3.15. 修改commit --amend时，用vim3.16. git冲突3.17. 一些写好的脚本3.18. 生成SSH key3.19. 报错3.19.1. 关于git push 443链接 报错：3.19.2. git bash 不支持中文时3.19.3. 重装系统导致的certificate 找不到3.19.4. 问题：chmod之后，git status显示修改了大量文件（并不是自己修改的文件）4. 参考：5. repo的安装6. github6.1. create a new repository on the command line、6.2. push an existing repository from the command line6.3. GitHub6.4. 规定 目录： 结构 git 两个节点之间差异 git diff 技巧：用git diff 或者 git patch作为代码的持久化存储 持久化 & 传递信息 -----> git patch git apply部分失败 技巧：可以直接用txt 看.patch文件 用tag替代commitID -----> git tag 本地有代码修改，如何 rebase 主干(或其他分支): git pull cherry-pick： git checkout git status + path git push 配置git + 查看已经配置 技巧：git管理之 建立本地git win下任意目录文件，都可以纳入git版本管理 .gitignore 修改commit --amend时，用vim git冲突 一些写好的脚本 生成SSH key 报错 关于git push 443链接 报错： git bash 不支持中文时 重装系统导致的certificate 找不到 问题：chmod之后，git status显示修改了大量文件（并不是自己修改的文件） 参考： repo的安装 github create a new repository on the command line、 push an existing repository from the command line GitHub 规定 1. 目录： 2. 结构 参考： https://www.zhihu.com/question/38305012 可见： fech获取时，并未合并到本地仓库 --------> 推论：cherry-pick需要的commiId，可以利用fech获取 3. git git reflog -----------历史上所有的commit（即使被删除了、即使被修改了） ​ 记录了所有引起HEAD指针变化的原因：真正commit、或reset、或checkout 或 pull 或 merge 或 clone 如何读reflog？ （1）新增一笔提交 7ace9e6282a9 （2）reset: moving to 4bd4cf2ac7dd （自然from 7ace9e6282a） （3）cherry-pick test 节点（自然，形成新节点） 范围： 参考： https://www.jianshu.com/p/7e4cef3863e7 git commit 技巧： git commit --amend --no-edit -----> 不会弹出commit message (reusing the previous one) 在 bash中自定义 见《任意ide（As 或 clion 等）, 默认 Terminal 如何使用 bash?》 //.myfunction.sh #!/bin/bash #git_rebase function g_pu0 { export a=$(git rev-parse --abbrev-ref HEAD) # git.exe push --progress \"origin\" $a:$a #注意第一个a是本地分支名，第二个是远程分支名: feature/xa_powerterminal:feature/xa_power } function g_pul { export a=$(git rev-parse --abbrev-ref HEAD) git.exe push --force-with-lease --progress \"origin\" $a:$a } function g_re_f{ #获得某个分支所对应的远程分支 export a=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) git.exe fetch -v --progress \"origin\" git clean -d -fx #git fetch --all git reset --hard HEAD~5 #仓有问题的话,有垃圾文件,直接 rebase 远端,可能会冲突。先 reset 本地--->强制 git reset --hard $a #仓有问题的话,有垃圾文件,直接 rebase 远端,可能会冲突。先 reset 本地--->强制 rebase remotesBranch=\"remotes/\"$a #shell拼接字符串 git rebase $remotesBranch } function g_re{ #获得某个分支所对应的远程分支 #git fetch --all git.exe fetch -v --progress \"origin\" export a=$(git rev-parse --abbrev-ref --symbolic-full-name @ {u}) git rebase $remotesBranch remotesBranch=\"remotes/\"$a git rebase $remotesBranch } function g_co{ git commit -m \"修改\" } function g_he{ echo \"git.exe fetch -v --progress \"origin\"\" echo \"git log-graph\" echo \": git rev-parse --abbrev-ref--symbolic-full-name @{u}\" echo \"dos2unix unix2dos filename\" echo \"删除 git 没有track的文件:git clean -d -fx\" echo \"git checkout -b feature/master_enterprise2 remotes/origin/master\" echo \"推送： git push -u origin feature/master_local:main -f; 本地分支：远程分支获取：git branch -a\" echo \"=========commit===============\" echo \"git commit -m \"TraceNo.:REQ20220“\" echo \"git commit --amend --no-edit -----> 不会弹出commit message (reusing the previous one)\" echo \"删除某个commit: git rebase -i 9fd15a8880fc41290d7dc^ 修改pick为drop\" echo \" commit: git rebase -i HEAD~4 s\" echo \"任意调整 commit顺序、任意合并: git rebase -i commitID,id之后的所有commit\" } function g_st { git status } function g_fe { git fetch } function g_co_am { git commit --amend } 总结: git restore 文件名 会撤销到缓存区(如果有,add区域) 或者 当前版本库版本(commit区) git命令回退 某个文件 到指定的版本： git chekcout 版本号 文件 如何合并？TODO git大文件： git Ifs pull // 下载大文件 git lfs uninstall 管理: 硬件十几个人对软件一个人,提十几个单,修改txt ----------> 应该让硬件出一个人,软件只对接这个一个人。硬件单提一个 3.1. 两个节点之间差异 git diff git diff 8064cff987043e2272746a46e3240e4ea7336e5b 3e62c71ee5dd6c714fc0bdeaa7faf0a2aa226e91 > /1111.txt 前一个commitID 后一个commitID 两个节点之间差异, 提取所有文件名: git diff 8064cff987043e2272746a46e3240e4ea7336e5b 3e62c71ee5dd6c714fc0bdeaa7faf0a2aa226e91 --name-only >./1111.txt 3.2. 技巧：用git diff 或者 git patch作为代码的持久化存储 如何保留自己的需求修改？ 法一：保留需求设计 & ppt 法二：保留 diff文件（极优） ---------> （1）很容易复原 （2）diff文件很小 3.3. 持久化 & 传递信息 -----> git patch apply patch： git apply --stat 0001-CR-double-RIES-3190.patch git apply --check 0001-CR-double-RIES-3190.patch git am --signoff 0001-CR-double-RIES-3190.patch 生成patch： //生成从当前commit往前x个commit的patch文件 git format-patch -x //生成从指定commit_id(包含该commit) 往前x个commit的patch文件 git format-patch commit_id -x // git format-patch \\\\..\\\\ 参考： 如何使用git 生成patch 和打入patch-腾讯云开发者社区-腾讯云 https://cloud.tencent.com/developer/article/2109416 其他： https://www.jianshu.com/p/b6d7c13d8e40 git patch相关命令收集 3.3.1. git apply部分失败 失败，一般只是失败一部分 --------> 在0001-CR-double-RIES-3190.patch文件中手动删掉PhoneWindowManager，后面手动同步 3.3.2. 技巧：可以直接用txt 看.patch文件 很nice 可以手动修改patch --------> 手动修改后，还可以apply 3.4. 用tag替代commitID -----> git tag git tag查看所有tag https://blog.csdn.net/newbeixue/article/details/125919492 1、加tag： 2、使用tag替代 commitid ----------> tag是人语；commitid 是机器语 3.5. 本地有代码修改，如何 rebase 主干(或其他分支): 方法一: 新建一个分支(可行): git fetch (必须把远端的拉下来) git checkout -b feature/sh_c111111_x214 remotes/origin/master pick之前分支的修改 方法二 (优选): git fetch (把远端的拉下来,本质: 拉到本地,但是没有合入到本地, git log 不变---》git fetch 对代码没有任何影响) git rebase origin/master (当前分支的base,同步到本地的 origin/master) 验证:git log, 代码跟新到新, 而且自己的 commit 在第一个 方法三: 命令的小乌龟界面操作: 拉取+小乌龟界面rebase (找到 head origin,右键 rebase) 3.6. git pull fetch + merge 或 fetch + rebase 查看远端log: git fetch git log remotes/origin/master 3.7. cherry-pick： git cherry-pick 015e60603883 0caa747eeccae2c start end 3.8. git checkout 保留合并分支代码：--------- 解决冲突 git checkout --theirs RendererJNI.cpp 3.9. git status + path 比如：git status ./ 3.10. git push 提交代码： git push -u --progress \"origin\" 本地分支:远程分支 本地分支:远程分支 由 git branch -a 查得 -f 强制push 注意： 没有本地分支时（安卓开发中多见），提交代码： git push origin HEAD:refs/for/branch_master ----》以HEAD替代本地分支？ 3.11. 配置git + 查看已经配置 参考： https://blog.csdn.net/lovedingd/article/details/121288974 主要配置有： 1、user.name、user.email 2、proxy配置 查看配置： 1、git config --list 2、 .gitconfig文件 3.12. 技巧：git管理之 建立本地git 技巧： 当本地文件夹 没有git时，可以自己创建git 仓库管理 git init 参考： https://blog.csdn.net/qq_33254766/article/details/114095922 本地创建一个 Git 仓库 ---------------------> 技巧： 想要保存两个git仓的改动diff ，可以在公共根路径上创建自己的git仓库 3.13. win下任意目录文件，都可以纳入git版本管理 方法： 本地git + Git Bash Here(win下) 应用： win本地的 应用apk的代码 -----> 好处，改应用代码有时候会改崩了 写的论文 md文件 git精髓在于： 验证ok的修改 ------> 形成一个commit （1）前进很踏实 （2）可以快速回退到很久之前的节点 规定： 本地写demo，重要节点，也git commit 3.14. .gitignore 作用： 忽略： 指定文件/文件夹不被 git跟踪 ---------> 表现：git status 看不到改动 应用场景： 场景一： 自然，不想被跟踪部分文件 场景二：git 嵌套仓 // .gitignore /AOSP ------> AOSP是底层嵌套的git仓，自然上层要忽略掉 场景一，举例子： git status 或者 git add . 不被加入？？？ 只保留 5.27.4-r0/kwin-5.27.4/src 这个路径： /5.27.4-r0/* （忽略的文件） !/5.27.4-r0/kwin-5.27.4 （保留的文件） ------》 与 /5.27.4-r0/* 成对 /5.27.4-r0/kwin-5.27.4/* !5.27.4-r0/kwin-5.27.4/src ------》 与 /5.27.4-r0/kwin-5.27.4/* 成对 git add .gitignore git commit -m \".gitignore\" ---------------> 验证OK！ 参考： https://blog.csdn.net/qq372848728/article/details/56709919 -------------> 好文，验证ok https://blog.csdn.net/harryptter/article/details/133295773 https://blog.csdn.net/xuxu_123_/article/details/131710549 【问题分析解决】git添加.gitignore后不生效问题 3.15. 修改commit --amend时，用vim git config --global core.editor vim 3.16. git冲突 git【--ours】及【--theirs】优雅的解决冲突git checkout --theirs老张家的独苗的博客-CSDN博客 3.17. 一些写好的脚本 // .mac_push.sh #/bin/zsh ~/.bin/repo sync ~/.bin/repo forall -c \"git status\" ~/.bin/repo forall -c \"git add . \" ~/.bin/repo forall -c \"git commit -s -m 'commit by tools update' \" ~/.bin/repo forall -c \"git push origin HEAD:master\" git add -u git commit -s -m 'commit by tools update' git push origin HEAD:master 3.18. 生成SSH key 解决报错：error [SSL: CERTIFICATE_VERIFY_FAILED] linux 与 GitHub 或者 gerrite通信 协议 参考： 如何生成SSH key？_ssh key生成-CSDN博客 -----> 注意：在其他人的服务器和账号下，也可以添加自己的ssh key。然后下载代码 3.19. 报错 3.19.1. 关于git push 443链接 报错： fatal: unable to access 'https://github.com/KentTJ/-book.git/': Recv failure: Connection was reset 或 fatal: unable to access 'https://github.com/KentTJ/-book.git/': Failed to connect to github.com port 443 参考： https://blog.csdn.net/qq_42777433/article/details/129026998?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129026998-blog-123270948.235%5Ev38%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129026998-blog-123270948.235%5Ev38%5Epc_relevant_default_base3&utm_relevant_index=2 git config --global http.proxy http://127.0.0.1:7890 git config --global https.proxy http://127.0.0.1:7890 3.19.2. git bash 不支持中文时 $ git status modified: README.md modified: \"344\\\\270\\\\252\\\\344\\\\272\\\\272\\\\344\\\\273\\\\213\\\\347\\\\273\\\\215/\\\\345\\\\220\\\\264\\\\346\\\\227\\\\245\\\\346\\\\225\\\\217.md\" 办法： git config --global core.quotepath false 参考：https://blog.csdn.net/m0_46104251/article/details/127411854 3.19.3. 重装系统导致的certificate 找不到 fatal: unable to access 'https://github.com/KentTJ/-book.git/': error setting certificate file: E:/programFiles/Git/mingw64/etc/ssl/certs/ca-bundle.crt 参考： 【完美解决】使用git时候出现error setting certificate verify locations: CAfile:问题_error setting certificate file-CSDN博客 3.19.4. 问题：chmod之后，git status显示修改了大量文件（并不是自己修改的文件） 办法： 忽略filemode git config --add core.filemode false --------> 验证有效 参考 4. 参考： https://blog.csdn.net/renfeideboke/article/details/130930418?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-130930418-blog-120540819.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-130930418-blog-120540819.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=1 Git创建本地分支并关联远程分支 5. repo的安装 报错： $ repo init -u /repo.git bash: repo: command not found -------------> 安装： https://stackoverflow.com/questions/3682083/repo-command-not-found mkdir ~/bin PATH=~/bin:$PATH curl > ~/bin/repo chmod a+x ~/bin/repo 报错： $ repo init -u /repo.git File \"C:/Users/chen.jinke/bin/repo\", line 51 def print(self, *args, **kwargs): ^ SyntaxError: invalid syntax 确认： $ which python /c/myProgramFiles/Python27/python 修改默认python： (1) 对于linux： sudo ln -s /usr/bin/python3 /usr/bin/python （2）对于windows： 修改环境变量PATH 6. github 6.1. create a new repository on the command line、 echo \"# aosp10\" >> README.md git init git add README.md git commit -m \"first commit\" git branch -M main // 修改当前分支为main分支 git remote add origin https://github.com/KentTJ/aosp10.git git push -u origin main 6.2. push an existing repository from the command line git remote add origin https://github.com/KentTJ/aosp10.git git branch -M main git push -u origin main 6.3. GitHub 1、git push 到gitHub失败： 方法：无需关闭代理 git config --global http.proxy \"\" 注意：上述方法，网页访问速度没有改善 ----》技巧：用手机看网页 6.4. 规定 所有的笔记，在线化 所有的项目demo，在线化 ----------------------> 容易获取，才不会消耗心力！！！！！！！！（容易，但是高频的事情，也会消耗大量心力） console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/phoneCommand.html":{"url":"Tool/phoneCommand.html","title":"Phone Command","keywords":"","body":"1. 目标2. 手机命令2.1. 参考：2.2. 编译替换2.3. 手机恢复系统2.4. 删除开机向导：2.5. 页面 --> 包名 -> apk之间的关系2.6. 环境中 查看系统版本：2.7. 安卓log的添加：2.8. 抓log2.8.1. 实时log2.8.2. log脚本2.9. 软件唯一，核心法则--------结构：2.10. 关于整个屏幕结构的dump、观察2.10.1. Activity的结构2.10.2. window的结构2.10.3. viewTree的结构观察：2.11. 安卓的dump工具详解2.11.1. AMS的dump2.11.2. WMS的dump2.11.3. 技巧之 循环dump2.11.4. 推论：获取当前 最前面activty的脚本：2.11.5. 原理2.12. adb查看手机是32位还是64位2.13. ADB网络wifi调试和常见命令2.13.1. 最简单的方法2.13.2. 重启后依然有效方法2.14. DropBox2.15. adb命令行：2.16. UIAutomator2自动化（操作手机）2.16.1. 环境配置2.16.2. 操作命令：2.17. 云端linux 连adb 手机3. 手机环境问题3.1. adb 授权4. 格式 手机命令 参考： 编译替换 手机恢复系统 删除开机向导： 页面 --> 包名 -> apk之间的关系 环境中 查看系统版本： 安卓log的添加： 抓log 实时log log脚本 软件唯一，核心法则--------结构： 关于整个屏幕结构的dump、观察 Activity的结构 window的结构 viewTree的结构观察： 安卓的dump工具详解 AMS的dump WMS的dump 文件结构 dumpsys window lastanr dumpsys window displays dumpsys window windows 技巧之 循环dump 推论：获取当前 最前面activty的脚本： 原理 adb查看手机是32位还是64位 ADB网络wifi调试和常见命令 最简单的方法 重启后依然有效方法 DropBox adb命令行： UIAutomator2自动化（操作手机） 环境配置 操作命令： 云端linux 连adb 手机 手机环境问题 adb 授权 格式 1. 目标 2. 手机命令 2.1. 参考： https://droid10.com/Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/ 2.2. 编译替换 adb root adb remount adb shell rm -rf /system/framework/arm adb shell rm -rf /system/framework/arm64 adb shell rm -rf /system/framework/oat/ adb push framework.jar /system/framework adb push services.jar /system/framework adb push libbinder.so /system/lib pause adb reboot -注意： 删除这个目录下面的oat，arm，arm64三个目录(不删除会一直卡在开机动画) 2.3. 手机恢复系统 adb shell rm -rf cache/overlay 手机恢复系统 》piexl不起作用 ----》HW手机有作用！！！！！！包括system下的，以及预支apk 2.4. 删除开机向导： EMUI： adb shell settings put secure hw_suw_frp_state 0 adb shell pm disable com.huawei.hwstartupguide 海外版本：（安卓原生） 删除云空间：(为什么要删除它呢？因为dump出来，激活界面是它的！！！！！！) adb shell rm -rf /system/app/HwCloudDrive/HwCloudDrive.apk 2.5. 页面 --> 包名 -> apk之间的关系 当前页面，如何找到当前页面的包名? :adb shell dumpsys window w | findstr 查看处于当前栈顶的Window和Activity adb shell dumpsys window windows | findstr -E 'mCurrentFocus' adb shell dumpsys activity | grep mFocusedActivity 由包名-----》apk路径： HWLIO:/system/priv-app # pm path com.huawei.hidisk package:/system/app/HwCloudDrive/HwCloudDrive.apk 2.6. 环境中 查看系统版本： 1、手机上直接查看： 2、命令： 2.7. 安卓log的添加： import android.util.Log; Log.i(TAG, \"chen, loadKeyboard start\"); Log.i(TAG, \"chen, loadKeyboard\" + System.identityHashCode(Object)); Log.i(TAG, \"chen, loadKeyboard\" + Log.getStackTraceString(new Throwable())); // 调用栈 System.out.println(System.identityHashCode(Object)) adb shell dumpsys window //native // 引入log头文件 #include // log标签 #define TAG \"chen1_native\" // 定义info信息 #define LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG,__VA_ARGS__) // 定义debug信息 #define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, TAG, __VA_ARGS__) // 定义error信息 #define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__) LOGI(\"chen, array.length:%d\", len); android::CallStack cs(\"***********Parcel::initState(), chen***********\") native调用栈 https://blog.csdn.net/u013120422/article/details/108485664 #include \"utils/CallStack.h\" android::CallStack cs(\"***********Parcel::initState(), chen***********\") LOGI(\"array.length:%d\", len); shared_libs: [ \"libbase\", \"liblog\", \"libcutils\", \"libutils\", \"libbinderthreadstate\", \"libutilscallstack\", //引用动态库 ], 1.2、引用动态库 Andorid O以上 Android.mk: LOCAL_SHARED_LIBRARIES里包含libutilscallstack Android.bp: shared_libs里包含libutilscallstack //--->这里 Android O Android.mk: LOCAL_SHARED_LIBRARIES里包含libutils Android.bp: shared_libs里包含libutils Android N 以前版本 Android.mk: LOCAL_SHARED_LIBRARIES里包含libutils 原文链接：https://blog.csdn.net/u013120422/article/details/108485664 2.8. 抓log 2.8.1. 实时log adb shell logcat -c //清理 adb shell logcat -v time > C:\\Users\\Administrator\\Desktop\\logcat.txt 2.8.2. log脚本 adb remount adb root adb devices -l if \"%l\"\"\"( for /f \"skip=1 tokens=1\" %%i in ('adb devices-l') do ( move %%i \"%%i\"bk adb -s %%i shell setprop persist.sys.hilog.debug.on true adb -s %%i shell setprop debug.ld.all dlerror,dlopen adb-s %%i pull datalog %%i adb-s %%i pull datatombstones %%i adb-s %%i logcat > %%i.txt ) ) pause 抓crash脚本： todo 全集脚本，getLogs.bat： 参考： https://droid10.com/Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/ adb root set d=%date:~0,4%%date:~5,2%%date:~8,2% if %time:~0,2% LEQ 9 (set t=0%time:~1,1%%time:~3,2%%time:~6,2%) else (set t=%time:~0,2%%time:~3,2%%time:~6,2%) echo %d%-%t% mkdir Log-%d%-%t% cd Log-%d%-%t% adb shell ps -A > ps.txt :: ::adb shell am dumpheap 1051 /data/local/tmp/system-server.hprof :: 安装GitBash, 并将C:\\Program Files\\Git\\usr\\bin 加到环境变量 :: grep system_server ps.txt | awk \"{print $2}\" | xargs -I {} echo adb shell am dumpheap {} /data/local/tmp/system-server.hprof > tmp.bat ::echo adb pull /data/local/tmp/system-server.hprof >> tmp.bat ::echo adb shell rm /data/local/tmp/system-server.hprof >> tmp.bat ::grep mediaserver ps.txt | awk \"{print $2}\" |xargs -I {} echo adb shell debuggerd -b {} \"> mediaserver.txt\" >> tmp.bat ::echo exit >> tmp.bat ::start tmp.bat ::cat tmp.bat adb pull /data/logs adb pull /data/anr adb pull /data/tombstones adb pull /data/system/dropbox adb pull /sys/kernel/debug/binder md _dump cd _dump ::adb shell uiautomator dump /data/local/tmp/app.uix ::adb pull /data/local/tmp/app.uix ::dump view的层级 adb shell uiautomator dump --compressed /data/local/tmp/uidump.xml && adb pull /data/local/tmp/uidump.xml adb shell screencap -p /sdcard/app.png adb pull /sdcard/app.png ::dump view的层级 adb shell top -n 1 > top.txt adb shell free -m > free.txt adb shell procrank > procrank.txt adb shell dumpsys > dumpsys.txt ::dumpsys.txt包括了所有的服务 :: 重点的两个服务，AMS 和WMS adb shell dumpsys activity > AMS_dump.txt adb shell dumpsys window > WMS_dump.txt adb shell dumpsys car_service > dumpsys_car_service.txt adb shell dumpsys meminfo system_server > system_server_mem.txt adb shell dumpsys meminfo mediaserver > mediaserver_mem.txt adb shell dmesg > dmsg.txt cd .. adb shell perfetto -o /data/misc/perfetto-traces/trace_file.perfetto-trace -t 30s sched freq idle am wm gfx view binder_driver hal dalvik camera input res memory adb pull /data/misc/perfetto-traces/trace_file.perfetto-trace del tmp.bat cd .. pause 2.9. 软件唯一，核心法则--------结构： 事物本身的结构 --------------------> 对应的代码结构 需要的描述量 事物本身的结构 的变化--------------------> 对应代码结构 描述量的变化 观察点： 事物本身 -----> 最好是肉眼可见的图形化的。。比如view本身、比如google做的view显示工具。截图 dump出代码结构的状态。。比如xml ------> TODO: 从设计的角度理解google的做法，工具、dump、代码结构 中间化的工具，xml变成图形界面，可以点击 -------> 即使利用工具，也要向图形化靠（人对图形理解力 与 文字理解力，不在一个数量级上） 理解事物、理解业务、理解代码、添加维测，最深刻的就是理解结构 ------> 所以，dump出结构是非常重要的。尤其是图形化的结构 （软件唯一，核心法则--------结构） ----> 这也是dump工具背后的思想 所以，整个软件的理解就是： 结构 + 结构的演变（即算法） 再具体一点： Frame1 (结构)--------> Frame2(结构) + 两帧之间变化的算法 再再具体一点： 0 ----> 初始化ok状态， 初始化OK状态-----> 下一阶段状态 所以，我们首要 理解是 结构，其次是基于结构 的演化 举例子1: 如何理解activity1启动activity2的流程？ 我们关注点应该是 调用栈嘛： 流程1-----》流程2----》流程3----》流程4 ？？？ 错误！！！ - 基于结构的认识论：！！ Frame1下（物理界面状态、AMS侧stack状态、task状态，wms侧window的结构的状态） Frame2下（物理界面状态、AMS侧stack状态、task状态，wms侧window的结构的状态） Frame1下状态，到Frame2，是如何变化的？ 2.10. 关于整个屏幕结构的dump、观察 TODO：https://zhuanlan.zhihu.com/p/589688318 透视Android WindowManagerService 2.10.1. Activity的结构 视图结构，见viewTree的结构观察 activity所在位置结构：有哪些维度？ （1）在哪个进程？ （2）在哪个task里，task结构怎么样？ （3）在哪个stack里，stack结构怎么样？ （4）对应的Intent是啥，被谁唤起来的？ （5）尺寸 。。。。。。。。 见《AMS的dump》 2.10.2. window的结构 2.10.3. viewTree的结构观察： 方法一：dump出具体的数字 adb shell uiautomator dump --compressed /data/local/tmp/uidump.xml && adb pull /data/local/tmp/uidump.xml 方法二： 截图，使用dpx测量工具 方法三（极优）： AS工具：Tools ----> Layout Inspector 具体见《systrace.md》 2.11. 安卓的dump工具详解 dumpsys ----总命令： adb shell dumpsys > dumpsys.txt 1、dump出 系统当前的所有正在运行的服务的信息，总共多达67000行（总共170个服务） -----------> （1） dump出来的是 整个系统 ------->十分自然，了解一个系统，就要了解整个系统的frame结构 ​ （2） dump的是服务侧，不是APP侧的数据： ​ 服务侧是所有数据的汇聚处，好一次性dump ​ 服务侧也是各种数据的决定者，最后才同步给APP // dumpsys.txt // 主要的几个： Currently running services: SurfaceFlinger accessibility //----> accessibilityMS activity //----> AMS .............. cpuinfo display dropbox hardware input //----> IMS input_method //----> IMMS .............. window //----> WMS ———————————————— 注意：那么多服务之间，很容易出问题！！！这里也是保证不出问题的关键，保证每一帧dump都OK 每个服务信息之间使用横线间隔 2.11.1. AMS的dump adb shell dumpsys activity > AMS_dump.txt 或从 dumpsys.txt中找： ------------------------------------------------------------------------------- DUMP OF SERVICE activity: -文件分析： 1、文件结构： 搜索 dumpsys，可见是四大组件的管理者：activity、service、broadcast、provider 注：括号里是命令 2、ACTIVITY MANAGER SETTINGS (dumpsys activity settings) ------> 做啥的？TODO 3、ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents) ​ 记录当前待处理的Intent（AMS运行中，有些Intent还没处理完） 场景：TODO ​ 参考： https://blog.csdn.net/zhangjg_blog/article/details/39852309 ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents) * com.android.providers.calendar: 1 items #0: PendingIntentRecord{b70c970 com.android.providers.calendar broadcastIntent} * com.sohu.inputmethod.sogou: 2 items #0: PendingIntentRecord{72c156e com.sohu.inputmethod.sogou broadcastIntent} #1: PendingIntentRecord{d60d40f com.sohu.inputmethod.sogou broadcastIntent} * com.android.quicksearchbox: 1 items #0: PendingIntentRecord{5710c9c com.android.quicksearchbox startActivity} * com.tencent.mm: 13 items //【】微信发出了13个Intent，AMS还没处理(包括 发送广播的、启动服务的) #0: PendingIntentRecord{b3e1ef4 com.tencent.mm broadcastIntent} #1: PendingIntentRecord{3881a7a com.tencent.mm broadcastIntent} #2: PendingIntentRecord{d60a22b com.tencent.mm startService} #3: PendingIntentRecord{bd05688 com.tencent.mm startService} 4、activity相关的：(dumpsys activity activities) Frame1：在微信主页面 展开 ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities) // 表明是activities Display #0 (activities from top to bottom): //Display 0 因为一个屏幕 Stack #2: type=standard mode=fullscreen // Stack 结构： 类型？全屏模式？ isSleeping=false // 是否在后台？ mBounds=Rect(0, 0 - 0, 0) // 大小 Task id #49 mBounds=Rect(0, 0 - 0, 0) mMinWidth=-1 mMinHeight=-1 mLastNonFullscreenBounds=null * TaskRecord{c30999d #49 A=com.tencent.mm U=0 StackId=2 sz=1} //【】所处的task？？ userId=0 effectiveUid=u0a133 mCallingUid=u0a80 mUserSetupComplete=true mCallingPackage=com.android.launcher3 affinity=com.tencent.mm // userId intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.tencent.mm/.ui.LauncherUI} //【】 启动信息: 该actvity被 LAUNCHER 拉起来的 mActivityComponent=com.tencent.mm/.ui.LauncherUI //【】这个actvity实例是 LauncherUI类的实例，是 com.tencent.mm 应用的 autoRemoveRecents=false isPersistable=true numFullscreen=1 activityType=1 // activityType? TODO rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE Activities=[ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49}] //【】这个actvity实例是 LauncherUI类的实例 askedCompatMode=false inRecents=true isAvailable=true mRootProcess=ProcessRecord{b902b90 8627:com.tencent.mm/u0a133} stackId=2 hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION mSupportsPictureInPicture=false isResizeable=true lastActiveTime=728733 (inactive for 71s) // 【】此时应该可见了 Hist #0: ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.tencent.mm/.ui.LauncherUI bnds=[237,84][439,361] } // TODO: 这里和上面什么区别？ ProcessRecord{b902b90 8627:com.tencent.mm/u0a133} Running activities (most recent first): //TODO:什么叫正在运行的？ TaskRecord{c30999d #49 A=com.tencent.mm U=0 StackId=2 sz=1} Run #0: ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} mResumedActivity: ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} // 【】mResumedActivity，非常重要的标志，标志activity已经真正可见！！！！！！！！ Stack #0: type=home mode=fullscreen // Stack #0 TODO:没有Stack #1？？？ isSleeping=false mBounds=Rect(0, 0 - 0, 0) Task id #47 mBounds=Rect(0, 0 - 0, 0) mMinWidth=-1 mMinHeight=-1 mLastNonFullscreenBounds=null * TaskRecord{1c2adb3 #47 I=com.android.launcher3/.Launcher U=0 StackId=0 sz=1} // 【】launcher的task？？？？ userId=0 effectiveUid=u0a80 mCallingUid=u0a80 mUserSetupComplete=true mCallingPackage=com.android.launcher3 intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.android.launcher3/.Launcher} // launcher的页面是被HOME调起来的，实际上是系统ready mActivityComponent=com.android.launcher3/.Launcher autoRemoveRecents=false isPersistable=true numFullscreen=1 activityType=2 rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE Activities=[ActivityRecord{a4790b1 u0 com.android.launcher3/.Launcher t47}] askedCompatMode=false inRecents=true isAvailable=true mRootProcess=ProcessRecord{5f0411c 1996:com.android.launcher3/u0a80} stackId=0 hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE mSupportsPictureInPicture=false isResizeable=true lastActiveTime=719656 (inactive for 80s) Hist #0: ActivityRecord{a4790b1 u0 com.android.launcher3/.Launcher t47}//【】栈中Activity调用历史 Intent { act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.android.launcher3/.Launcher } ProcessRecord{5f0411c 1996:com.android.launcher3/u0a80} Running activities (most recent first): TaskRecord{1c2adb3 #47 I=com.android.launcher3/.Launcher U=0 StackId=0 sz=1} Run #0: ActivityRecord{a4790b1 u0 com.android.launcher3/.Launcher t47} ResumedActivity:ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} ResumedActivity: ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} ActivityStackSupervisor state: topDisplayFocusedStack=ActivityStack{bed6e12 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks} displayId=0 stacks=2 mHomeStack=ActivityStack{4b0720f stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks} mPreferredTopFocusableStack=ActivityStack{bed6e12 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks} mLastFocusedStack=ActivityStack{bed6e12 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks} mCurTaskIdForUser={0=49} mUserStackInFront={} isHomeRecentsComponent=true KeyguardController: mKeyguardShowing=false mAodShowing=false mKeyguardGoingAway=false Occluded=false DismissingKeyguardActivity=null at display=0 mDismissalRequested=false mVisibilityTransactionDepth=0 LockTaskController mLockTaskModeState=NONE mLockTaskModeTasks= mLockTaskPackages (userId:packages)= u0:[] launcher 把 tencent 拉起来，却不在一个stack里，好像也不在一个task里？？ Frame2：基于Frame1点击搜索 后的页面 展开 ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities) Display #0 (activities from top to bottom): Stack #2: type=standard mode=fullscreen isSleeping=false mBounds=Rect(0, 0 - 0, 0) Task id #49 mBounds=Rect(0, 0 - 0, 0) mMinWidth=-1 mMinHeight=-1 mLastNonFullscreenBounds=null * TaskRecord{c30999d #49 A=com.tencent.mm U=0 StackId=2 sz=2} //【】task没有变（都是微信创建的task），因为跳跳跳没有断 userId=0 effectiveUid=u0a133 mCallingUid=u0a80 mUserSetupComplete=true mCallingPackage=com.android.launcher3 affinity=com.tencent.mm intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.tencent.mm/.ui.LauncherUI} mActivityComponent=com.tencent.mm/.ui.LauncherUI autoRemoveRecents=false isPersistable=true numFullscreen=1 activityType=1 rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE Activities=[ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49}, ActivityRecord{223ab1e u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t49}] askedCompatMode=false inRecents=true isAvailable=true mRootProcess=ProcessRecord{b902b90 8627:com.tencent.mm/u0a133} stackId=2 hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION mSupportsPictureInPicture=false isResizeable=true lastActiveTime=856993 (inactive for 57s) Hist #1: ActivityRecord{223ab1e u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t49} Intent { cmp=com.tencent.mm/.plugin.fts.ui.FTSMainUI (has extras) } ProcessRecord{b902b90 8627:com.tencent.mm/u0a133} Hist #0: ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.tencent.mm/.ui.LauncherUI bnds=[237,84][439,361] } ProcessRecord{b902b90 8627:com.tencent.mm/u0a133} Running activities (most recent first): TaskRecord{c30999d #49 A=com.tencent.mm U=0 StackId=2 sz=2} //【】该task（跳跳跳） 有两个界面： LauncherUI -> FTSMainUI Run #1: ActivityRecord{223ab1e u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t49} Run #0: ActivityRecord{3c203df u0 com.tencent.mm/.ui.LauncherUI t49} mResumedActivity: ActivityRecord{223ab1e u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t49} //【】当前界面是 FTSMainUI Stack #0: type=home mode=fullscreen //【】 Stack 0 是launcher，不变 isSleeping=false mBounds=Rect(0, 0 - 0, 0) Task id #47 mBounds=Rect(0, 0 - 0, 0) mMinWidth=-1 mMinHeight=-1 mLastNonFullscreenBounds=null * TaskRecord{1c2adb3 #47 I=com.android.launcher3/.Launcher U=0 StackId=0 sz=1} userId=0 effectiveUid=u0a80 mCallingUid=u0a80 mUserSetupComplete=true mCallingPackage=com.android.launcher3 intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.android.launcher3/.Launcher} mActivityComponent=com.android.launcher3/.Launcher autoRemoveRecents=false isPersistable=true numFullscreen=1 activityType=2 rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE Activities=[ActivityRecord{a4790b1 u0 com.android.launcher3/.Launcher t47}] askedCompatMode=false inRecents=true isAvailable=true mRootProcess=ProcessRecord{5f0411c 1996:com.android.launcher3/u0a80} stackId=0 hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE mSupportsPictureInPicture=false isResizeable=true lastActiveTime=719656 (inactive for 195s) Hist #0: ActivityRecord{a4790b1 u0 com.android.launcher3/.Launcher t47} Intent { act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.android.launcher3/.Launcher } ProcessRecord{5f0411c 1996:com.android.launcher3/u0a80} Running activities (most recent first): TaskRecord{1c2adb3 #47 I=com.android.launcher3/.Launcher U=0 StackId=0 sz=1} Run #0: ActivityRecord{a4790b1 u0 com.android.launcher3/.Launcher t47} ResumedActivity:ActivityRecord{223ab1e u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t49} ResumedActivity: ActivityRecord{223ab1e u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t49} ActivityStackSupervisor state: topDisplayFocusedStack=ActivityStack{bed6e12 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks} displayId=0 stacks=2 mHomeStack=ActivityStack{4b0720f stackId=0 type=home mode=fullscreen visible=false translucent=true, 1 tasks} mPreferredTopFocusableStack=ActivityStack{bed6e12 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks} //【】mHomeStack 用作桌面的 mLastFocusedStack=ActivityStack{bed6e12 stackId=2 type=standard mode=fullscreen visible=true translucent=false, 1 tasks} mCurTaskIdForUser={0=49} //【】最后获焦的stack，即微信产生的那个 mUserStackInFront={} isHomeRecentsComponent=true KeyguardController: mKeyguardShowing=false mAodShowing=false mKeyguardGoingAway=false Occluded=false DismissingKeyguardActivity=null at display=0 mDismissalRequested=false mVisibilityTransactionDepth=0 LockTaskController mLockTaskModeState=NONE mLockTaskModeTasks= mLockTaskPackages (userId:packages)= u0:[] 2.11.2. WMS的dump adb shell dumpsys window > WMS_dump.txt 文件结构 为什么有两个display，不一样？ dumpsys window lastanr dumpsys window displays 展开 WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays) Display: mDisplayId=0 // 一般只有一个 init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1794x1731 deferred=false mLayoutNeeded=false mTouchExcludeRegion=SkRegion((0,0,1080,1920)) mLayoutSeq=825 // ? mDeferredRotationPauseCount=0 mCurrentFocus=Window{267a445 u0 com.tencent.mm/com.tencent.mm.plugin.fts.ui.FTSMainUI} // 当前是tencent的搜索界面 mFocusedApp=AppWindowToken{afbe8c7 token=Token{a582a06 ActivityRecord{229bce1 u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t90}}} mLastStatusBarVisibility=0x8008 displayId=0 mWallpaperTarget=null mLastWallpaperX=0.33333334 mLastWallpaperY=0.5 mSystemGestureExclusion= Application tokens in top down Z order: // Z order 顺序 mStackId=19 mDeferRemoval=false mBounds=[0,0][1080,1920] // taskId=90 mBounds=[0,0][1080,1920] mdr=false appTokens=[AppWindowToken{5320efa token=Token{ba10d25 ActivityRecord{fcfcd1c u0 com.tencent.mm/.ui.LauncherUI t90}}}, AppWindowToken{afbe8c7 token=Token{a582a06 ActivityRecord{229bce1 u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t90}}}] mDisplayedBounds=[0,0][0,0] Activity #1 AppWindowToken{afbe8c7 token=Token{a582a06 ActivityRecord{229bce1 u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t90}}} windows=[Window{267a445 u0 com.tencent.mm/com.tencent.mm.plugin.fts.ui.FTSMainUI}] // FTSMainUI的窗口 windowType=2 hidden=false hasVisible=true // 窗口可见性 app=true mVoiceInteraction=false component=com.tencent.mm/.plugin.fts.ui.FTSMainUI task={taskId=90 appTokens=[AppWindowToken{5320efa token=Token{ba10d25 ActivityRecord{fcfcd1c u0 com.tencent.mm/.ui.LauncherUI t90}}}, AppWindowToken{afbe8c7 token=Token{a582a06 ActivityRecord{229bce1 u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t90}}}] mdr=false} mFillsParent=false mOrientation=1 hiddenRequested=false mClientHidden=false reportedDrawn=true reportedVisible=true mNumInterestingWindows=2 mNumDrawnWindows=2 inPendingTransaction=false allDrawn=true lastAllDrawn=true) startingData=null removed=false firstWindowDrawn=true mIsExiting=false Activity #0 AppWindowToken{5320efa token=Token{ba10d25 ActivityRecord{fcfcd1c u0 com.tencent.mm/.ui.LauncherUI t90}}} // tencent最初的activity windows=[Window{866c225 u0 com.tencent.mm/com.tencent.mm.ui.LauncherUI}] windowType=2 hidden=false hasVisible=true app=true mVoiceInteraction=false component=com.tencent.mm/.ui.LauncherUI task={taskId=90 appTokens=[AppWindowToken{5320efa token=Token{ba10d25 ActivityRecord{fcfcd1c u0 com.tencent.mm/.ui.LauncherUI t90}}}, AppWindowToken{afbe8c7 token=Token{a582a06 ActivityRecord{229bce1 u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t90}}}] mdr=false} mFillsParent=true mOrientation=1 hiddenRequested=false mClientHidden=false reportedDrawn=true reportedVisible=true mNumInterestingWindows=1 mNumDrawnWindows=1 inPendingTransaction=false allDrawn=true lastAllDrawn=true) startingData=null removed=false firstWindowDrawn=true mIsExiting=false mStackId=0 // 对应launcher mDeferRemoval=false mBounds=[0,0][1080,1920] taskId=71 mBounds=[0,0][1080,1920] mdr=false appTokens=[AppWindowToken{b3377dc token=Token{cc8e44f ActivityRecord{653eae u0 com.android.launcher3/.Launcher t71}}}] mDisplayedBounds=[0,0][0,0] Activity #0 AppWindowToken{b3377dc token=Token{cc8e44f ActivityRecord{653eae u0 com.android.launcher3/.Launcher t71}}} windows=[Window{7e835a0 u0 com.android.launcher3/com.android.launcher3.Launcher}] windowType=2 hidden=true hasVisible=true app=true mVoiceInteraction=false component=com.android.launcher3/.Launcher task={taskId=71 appTokens=[AppWindowToken{b3377dc token=Token{cc8e44f ActivityRecord{653eae u0 com.android.launcher3/.Launcher t71}}}] mdr=false} mFillsParent=true mOrientation=5 hiddenRequested=true mClientHidden=true reportedDrawn=false reportedVisible=false mAppStopped=true mNumInterestingWindows=1 mNumDrawnWindows=1 inPendingTransaction=false allDrawn=true lastAllDrawn=true) startingData=null removed=false firstWindowDrawn=true mIsExiting=false mStackId=15 // 对应settings（在此之后，又退回launcher） mDeferRemoval=false mBounds=[0,0][1080,1920] taskId=86 mBounds=[0,0][1080,1920] mdr=false appTokens=[AppWindowToken{9b2d0f3 token=Token{f6e2762 ActivityRecord{2e6262d u0 com.android.settings/.Settings t86}}}, AppWindowToken{bf1ee3a token=Token{c83e165 ActivityRecord{4644a5c u0 com.android.settings/.SubSettings t86}}}, AppWindowToken{c1d119a token=Token{761f645 ActivityRecord{10c26bc u0 com.android.settings/.SubSettings t86}}}] mDisplayedBounds=[0,0][0,0] Activity #2 AppWindowToken{c1d119a token=Token{761f645 ActivityRecord{10c26bc u0 com.android.settings/.SubSettings t86}}} windows=[Window{6c14d20 u0 com.android.settings/com.android.settings.SubSettings}] // 在Settings里，我跳转了三次，有三个activity windowType=2 hidden=true hasVisible=true app=true mVoiceInteraction=false component=com.android.settings/.SubSettings task={taskId=86 appTokens=[AppWindowToken{9b2d0f3 token=Token{f6e2762 ActivityRecord{2e6262d u0 com.android.settings/.Settings t86}}}, AppWindowToken{bf1ee3a token=Token{c83e165 ActivityRecord{4644a5c u0 com.android.settings/.SubSettings t86}}}, AppWindowToken{c1d119a token=Token{761f645 ActivityRecord{10c26bc u0 com.android.settings/.SubSettings t86}}}] mdr=false} mFillsParent=true mOrientation=-1 hiddenRequested=true mClientHidden=true reportedDrawn=false reportedVisible=false mAppStopped=true mNumInterestingWindows=1 mNumDrawnWindows=1 inPendingTransaction=false allDrawn=true lastAllDrawn=true) startingData=null removed=false firstWindowDrawn=true mIsExiting=false Activity #1 AppWindowToken{bf1ee3a token=Token{c83e165 ActivityRecord{4644a5c u0 com.android.settings/.SubSettings t86}}} windows=[Window{5343dde u0 com.android.settings/com.android.settings.SubSettings}] windowType=2 hidden=true hasVisible=true app=true mVoiceInteraction=false component=com.android.settings/.SubSettings task={taskId=86 appTokens=[AppWindowToken{9b2d0f3 token=Token{f6e2762 ActivityRecord{2e6262d u0 com.android.settings/.Settings t86}}}, AppWindowToken{bf1ee3a token=Token{c83e165 ActivityRecord{4644a5c u0 com.android.settings/.SubSettings t86}}}, AppWindowToken{c1d119a token=Token{761f645 ActivityRecord{10c26bc u0 com.android.settings/.SubSettings t86}}}] mdr=false} mFillsParent=true mOrientation=-1 hiddenRequested=true mClientHidden=true reportedDrawn=false reportedVisible=false mAppStopped=true mNumInterestingWindows=1 mNumDrawnWindows=1 inPendingTransaction=false allDrawn=true lastAllDrawn=true) startingData=null removed=false firstWindowDrawn=true mIsExiting=false Activity #0 AppWindowToken{9b2d0f3 token=Token{f6e2762 ActivityRecord{2e6262d u0 com.android.settings/.Settings t86}}} windows=[Window{9103d82 u0 com.android.settings/com.android.settings.Settings}] windowType=2 hidden=true hasVisible=true app=true mVoiceInteraction=false component=com.android.settings/.homepage.SettingsHomepageActivity task={taskId=86 appTokens=[AppWindowToken{9b2d0f3 token=Token{f6e2762 ActivityRecord{2e6262d u0 com.android.settings/.Settings t86}}}, AppWindowToken{bf1ee3a token=Token{c83e165 ActivityRecord{4644a5c u0 com.android.settings/.SubSettings t86}}}, AppWindowToken{c1d119a token=Token{761f645 ActivityRecord{10c26bc u0 com.android.settings/.SubSettings t86}}}] mdr=false} mFillsParent=true mOrientation=-1 hiddenRequested=true mClientHidden=true reportedDrawn=false reportedVisible=false mAppStopped=true mNumInterestingWindows=1 mNumDrawnWindows=1 inPendingTransaction=false allDrawn=true lastAllDrawn=true) startingData=null removed=false firstWindowDrawn=true mIsExiting=false homeStack=Stack=0 DockedStackDividerController mLastVisibility=false mMinimizedDock=false mAdjustedForIme=false // 没有adjust，因为底下窗口1080,1920还是全屏 ------> 奇怪的是，没有输入法的？ mAdjustedForDivider=false PinnedStackController defaultBounds=[533,622][1038,906] mDefaultMinSize=284 mDefaultStackGravity=85 mDefaultAspectRatio=1.777778 movementBounds=[42,105][1038,906] mIsImeShowing=true mImeHeight=846 mIsShelfShowing=false mShelfHeight=262 mReentrySnapFraction=-1.0 mIsMinimized=false mAspectRatio=1.777778 mMinAspectRatio=0.41841003 mMaxAspectRatio=2.39 mActions=[] mDisplayInfo=DisplayInfo{\"内置屏幕, displayId 0\", uniqueId \"local:0\", app 1080 x 1794, real 1080 x 1920, largest app 1794 x 1731, smallest app 1080 x 1017, mode 1, defaultMode 1, modes [{id=1, width=1080, height=1920, fps=60.000004}], colorMode 0, supportedColorModes [0, 7], hdrCapabilities android.view.Display$HdrCapabilities@40f16308, rotation 0, density 420 (442.451 x 443.345) dpi, layerStack 0, appVsyncOff 2000000, presDeadline 11666666, type BUILT_IN, address {port=0}, state ON, FLAG_SECURE, FLAG_SUPPORTS_PROTECTED_BUFFERS, removeMode 0} DisplayFrames w=1080 h=1920 r=0 mStable=[0,63][1080,1794] mStableFullscreen=[0,0][1080,1794] mDock=[0,63][1080,1794] mCurrent=[0,63][1080,948] mSystem=[0,0][1080,1920] mContent=[0,63][1080,948] mVoiceContent=[0,63][1080,948] mOverscan=[0,0][1080,1920] mRestrictedOverscan=[0,0][1080,1794] mRestricted=[0,0][1080,1794] mUnrestricted=[0,0][1080,1920] mDisplayInfoOverscan=[0,0][0,0] mRotatedDisplayInfoOverscan=[0,0][0,0] mDisplayCutout=WmDisplayCutout{DisplayCutout{insets=Rect(0, 0 - 0, 0) boundingRect={Bounds=[Rect(0, 0 - 0, 0), Rect(0, 0 - 0, 0), Rect(0, 0 - 0, 0), Rect(0, 0 - 0, 0)]}}, mFrameSize=null} DisplayPolicy mCarDockEnablesAccelerometer=true mDeskDockEnablesAccelerometer=true mDockMode=EXTRA_DOCK_STATE_UNDOCKED mLidState=LID_OPEN mAwake=true mScreenOnEarly=true mScreenOnFully=true mKeyguardDrawComplete=true mWindowManagerDrawComplete=true mHdmiPlugged=false mLastSystemUiFlags=0x8008 mResettingSystemUiFlags=0x0 mForceClearedSystemUiFlags=0x0 mShowingDream=false mDreamingLockscreen=false mDreamingSleepToken=null mStatusBar=Window{f83a40d u0 StatusBar} isStatusBarKeyguard=false mNavigationBar=Window{14de074 u0 NavigationBar0} mNavBarOpacityMode=0 mNavigationBarCanMove=true mNavigationBarPosition=4 mFocusedWindow=Window{267a445 u0 com.tencent.mm/com.tencent.mm.plugin.fts.ui.FTSMainUI} mFocusedApp=Token{a582a06 ActivityRecord{229bce1 u0 com.tencent.mm/.plugin.fts.ui.FTSMainUI t90}} mTopFullscreenOpaqueWindowState=Window{267a445 u0 com.tencent.mm/com.tencent.mm.plugin.fts.ui.FTSMainUI} mTopFullscreenOpaqueOrDimmingWindowState=Window{267a445 u0 com.tencent.mm/com.tencent.mm.plugin.fts.ui.FTSMainUI} mForcingShowNavBar=true mForcingShowNavBarLayer=0 mTopIsFullscreen=false mForceStatusBar=false mForceStatusBarFromKeyguard=false mForceShowSystemBarsFromExternal=false mAllowLockscreenWhenOn=false BarController.StatusBar mState=WINDOW_STATE_SHOWING mTransientBar=TRANSIENT_BAR_NONE mContentFrame=Rect(0, 0 - 1080, 63) BarController.NavigationBar mState=WINDOW_STATE_SHOWING mTransientBar=TRANSIENT_BAR_NONE mContentFrame=Rect(0, 1794 - 1080, 1920) Looper state: Looper (android.ui, tid 20) {ec23c4e} (Total messages: 0, polling=true, quitting=false) DisplayRotation mCurrentAppOrientation=SCREEN_ORIENTATION_PORTRAIT mLandscapeRotation=ROTATION_90 mSeascapeRotation=ROTATION_270 mPortraitRotation=ROTATION_0 mUpsideDownRotation=ROTATION_180 mSupportAutoRotation=true WindowOrientationListener mEnabled=true mCurrentRotation=ROTATION_0 mSensorType=null mSensor={Sensor name=\"Device Orientation\", vendor=\"Google\", version=1, type=27, maxRange=3.0, resolution=1.0, power=0.1, minDelay=0} mRate=2 OrientationSensorJudge mDesiredRotation=-1 mProposedRotation=-1 mTouching=false mTouchEndedTimestampNanos=25447710901675 mCarDockRotation=-1 mDeskDockRotation=-1 mUserRotationMode=USER_ROTATION_LOCKED mUserRotation=ROTATION_0 mAllowAllRotations=unknown mDemoHdmiRotation=ROTATION_90 mDemoHdmiRotationLock=false mUndockedHdmiRotation=-1 mLidOpenRotation=-1 mFixedToUserRotation=false InputConsumers: name=recents_animation_input_consumer pid=2114 user=UserHandle{0} name=pip_input_consumer pid=1749 user=UserHandle{0} WindowInsetsStateController InsetsState InsetsSource type=TYPE_UNKNOWN_10 frame=[0,948][1080,1920] visible=false InsetsSource type=TYPE_BOTTOM_TAPPABLE_ELEMENT frame=[0,1794][1080,1920] visible=true InsetsSource type=TYPE_TOP_TAPPABLE_ELEMENT frame=[0,0][1080,63] visible=true InsetsSource type=TYPE_RIGHT_GESTURES frame=[1080,0][1080,1920] visible=true InsetsSource type=TYPE_LEFT_GESTURES frame=[0,0][0,1920] visible=true InsetsSource type=TYPE_BOTTOM_GESTURES frame=[0,1794][1080,1920] visible=true InsetsSource type=TYPE_TOP_GESTURES frame=[0,0][1080,63] visible=true InsetsSource type=TYPE_SIDE_BAR_1 frame=[0,1794][1080,1920] visible=true InsetsSource type=TYPE_TOP_BAR frame=[0,0][1080,63] visible=true Control map: TODO: ------> 奇怪的是，没有输入法的？ dumpsys window windows 返回当前所有窗口的信息： 所有窗口的名称和类型。 当前前台应用程序的窗口。 当前屏幕上的所有窗口的坐标、大小和可见性等信息。 各个窗口的层级关系和焦点状态等。 展开 WINDOW MANAGER WINDOWS (dumpsys window windows) Window #0 Window{4bf30ad u0 PointerLocation - display 0}: mDisplayId=0 stackId=0 mSession=Session{e09d58 1285:1000} mClient=android.view.ViewRootImpl$W@e928cd7 mOwnerUid=1000 mShowToOwnerOnly=true package=android appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=pan} layoutInDisplayCutoutMode=always ty=SECURE_SYSTEM_OVERLAY fmt=TRANSLUCENT if=NO_INPUT_CHANNEL fl=NOT_FOCUSABLE NOT_TOUCHABLE LAYOUT_IN_SCREEN FULLSCREEN HARDWARE_ACCELERATED pfl=FORCE_HARDWARE_ACCELERATED} Requested w=1080 h=1920 mLayoutSeq=733 mHasSurface=true isReadyForDisplay()=true mWindowRemovalAllowed=false WindowStateAnimator{32e2a56 PointerLocation - display 0}: Surface: shown=true layer=0 alpha=1.0 rect=(0.0,0.0) 1080 x 1920 transform=(1.0, 0.0, 1.0, 0.0) mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=true isVisible=true Window #1 Window{14de074 u0 NavigationBar0}: mDisplayId=0 stackId=0 mSession=Session{46a0dca 1749:u0a10088} mClient=android.os.BinderProxy@bc85f86 mOwnerUid=10088 mShowToOwnerOnly=false package=com.android.systemui appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=pan} ty=NAVIGATION_BAR fmt=TRANSLUCENT fl=NOT_FOCUSABLE NOT_TOUCH_MODAL TOUCHABLE_WHEN_WAKING WATCH_OUTSIDE_TOUCH SPLIT_TOUCH HARDWARE_ACCELERATED FLAG_SLIPPERY pfl=COLOR_SPACE_AGNOSTIC} Requested w=1080 h=126 mLayoutSeq=733 mHasSurface=true isReadyForDisplay()=true mWindowRemovalAllowed=false WindowStateAnimator{c8a5a95 NavigationBar0}: mAnimationIsEntrance=true Surface: shown=true layer=0 alpha=1.0 rect=(0.0,0.0) 1080 x 126 transform=(1.0, 0.0, 1.0, 0.0) mLastFreezeDuration=+27s737ms mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=true isVisible=true Window #2 Window{f83a40d u0 StatusBar}: mDisplayId=0 stackId=0 mSession=Session{46a0dca 1749:u0a10088} mClient=android.os.BinderProxy@2bf3937 mOwnerUid=10088 mShowToOwnerOnly=false package=com.android.systemui appop=NONE mAttrs={(0,0)(fillx63) gr=TOP CENTER_VERTICAL sim={adjust=resize} layoutInDisplayCutoutMode=always ty=STATUS_BAR fmt=TRANSLUCENT fl=NOT_FOCUSABLE TOUCHABLE_WHEN_WAKING WATCH_OUTSIDE_TOUCH SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=COLOR_SPACE_AGNOSTIC} Requested w=1080 h=63 mLayoutSeq=733 mHasSurface=true isReadyForDisplay()=true mWindowRemovalAllowed=false WindowStateAnimator{f62df9b StatusBar}: Surface: shown=true layer=0 alpha=1.0 rect=(0.0,0.0) 1080 x 63 transform=(1.0, 0.0, 1.0, 0.0) mLastFreezeDuration=+1h27m17s927ms mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=true isVisible=true Window #3 Window{65dd8dd u0 Application Not Responding: com.tencent.mm}: mDisplayId=0 stackId=0 mSession=Session{e09d58 1285:1000} mClient=android.view.ViewRootImpl$W@a330d87 mOwnerUid=1000 mShowToOwnerOnly=false package=android appop=SYSTEM_ALERT_WINDOW mAttrs={(0,0)(wrapxwrap) gr=CENTER sim={adjust=pan forwardNavigation} ty=SYSTEM_ALERT fmt=TRANSLUCENT wanim=0x10302ff surfaceInsets=Rect(84, 84 - 84, 84) fl=DIM_BEHIND ALT_FOCUSABLE_IM SPLIT_TOUCH HARDWARE_ACCELERATED pfl=SHOW_FOR_ALL_USERS SYSTEM_ERROR} Requested w=1024 h=514 mLayoutSeq=733 mHasSurface=true isReadyForDisplay()=true mWindowRemovalAllowed=false WindowStateAnimator{b78eb5b Application Not Responding: com.tencent.mm}: mAnimationIsEntrance=true Surface: shown=true layer=0 alpha=1.0 rect=(0.0,0.0) 1192 x 682 transform=(1.0, 0.0, 1.0, 0.0) mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=true isVisible=true Window #4 Window{3fe946b u0 Application Not Responding: com.tencent.mm}: mDisplayId=0 stackId=0 mSession=Session{e09d58 1285:1000} mClient=android.view.ViewRootImpl$W@c83aee5 mOwnerUid=1000 mShowToOwnerOnly=false package=android appop=SYSTEM_ALERT_WINDOW mAttrs={(0,0)(wrapxwrap) gr=CENTER sim={adjust=pan forwardNavigation} ty=SYSTEM_ALERT fmt=TRANSLUCENT wanim=0x10302ff surfaceInsets=Rect(84, 84 - 84, 84) fl=DIM_BEHIND ALT_FOCUSABLE_IM SPLIT_TOUCH HARDWARE_ACCELERATED pfl=SHOW_FOR_ALL_USERS SYSTEM_ERROR} Requested w=1024 h=514 mLayoutSeq=733 mHasSurface=true isReadyForDisplay()=true mWindowRemovalAllowed=false WindowStateAnimator{1fc0a6a Application Not Responding: com.tencent.mm}: mAnimationIsEntrance=true Surface: shown=true layer=0 alpha=1.0 rect=(0.0,0.0) 1192 x 682 transform=(1.0, 0.0, 1.0, 0.0) mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=true isVisible=true Window #5 Window{6d82633 u0 AssistPreviewPanel}: mDisplayId=0 stackId=0 mSession=Session{46a0dca 1749:u0a10088} mClient=android.os.BinderProxy@929a96d mOwnerUid=10088 mShowToOwnerOnly=true package=com.android.systemui appop=NONE mAttrs={(0,0)(fillx656) gr=BOTTOM START CENTER sim={state=unchanged adjust=nothing} ty=VOICE_INTERACTION_STARTING fmt=TRANSLUCENT fl=NOT_FOCUSABLE NOT_TOUCHABLE LAYOUT_IN_SCREEN HARDWARE_ACCELERATED vsysui=LAYOUT_STABLE LAYOUT_HIDE_NAVIGATION LAYOUT_FULLSCREEN} Requested w=0 h=0 mLayoutSeq=14 mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{a1c9f38 AssistPreviewPanel}: mShownAlpha=0.0 mAlpha=1.0 mLastAlpha=0.0 mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=false isVisible=false Window #6 Window{f821bb6 u0 DockedStackDivider}: mDisplayId=0 stackId=0 mSession=Session{46a0dca 1749:u0a10088} mClient=android.os.BinderProxy@4640478 mOwnerUid=10088 mShowToOwnerOnly=false package=com.android.systemui appop=NONE mAttrs={(0,0)(fillx126) sim={adjust=pan} layoutInDisplayCutoutMode=always ty=DOCK_DIVIDER fmt=TRANSLUCENT fl=NOT_FOCUSABLE NOT_TOUCH_MODAL WATCH_OUTSIDE_TOUCH SPLIT_TOUCH HARDWARE_ACCELERATED FLAG_SLIPPERY pfl=NO_MOVE_ANIMATION vsysui=LAYOUT_STABLE LAYOUT_HIDE_NAVIGATION LAYOUT_FULLSCREEN} Requested w=1080 h=126 mLayoutSeq=733 mPolicyVisibility=false mLegacyPolicyVisibilityAfterAnim=false mAppOpVisibility=true parentHidden=false mPermanentlyHidden=false mHiddenWhileSuspended=false mForceHideNonSystemOverlayWindow=false mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{4030b11 DockedStackDivider}: mShownAlpha=0.0 mAlpha=1.0 mLastAlpha=0.0 mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=false isVisible=false Window #7 Window{582c745 u0 com.tencent.mm/com.tencent.mm.plugin.appbrand.ui.AppBrandUI}: mDisplayId=0 stackId=17 mSession=Session{b9b078e 19282:u0a10133} mClient=android.os.BinderProxy@cd99bbc mOwnerUid=10133 mShowToOwnerOnly=true package=com.tencent.mm appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=resize forwardNavigation} layoutInDisplayCutoutMode=always ty=BASE_APPLICATION fmt=TRANSLUCENT wanim=0x7f12001c sysuil=true fl=LAYOUT_IN_SCREEN LAYOUT_INSET_DECOR SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=FORCE_DRAW_STATUS_BAR_BACKGROUND vsysui=LIGHT_STATUS_BAR} Requested w=1080 h=1920 mLayoutSeq=733 mHasSurface=true isReadyForDisplay()=true mWindowRemovalAllowed=false WindowStateAnimator{5111055 com.tencent.mm/com.tencent.mm.plugin.appbrand.ui.AppBrandUI}: Surface: shown=true layer=0 alpha=1.0 rect=(0.0,0.0) 1080 x 1920 transform=(1.0, 0.0, 1.0, 0.0) mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=true isVisible=true Window #8 Window{7e835a0 u0 com.android.launcher3/com.android.launcher3.Launcher}: mDisplayId=0 stackId=0 mSession=Session{6ec805d 2114:u0a10080} mClient=android.os.BinderProxy@4eeaea3 mOwnerUid=10080 mShowToOwnerOnly=true package=com.android.launcher3 appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=pan forwardNavigation} layoutInDisplayCutoutMode=always ty=BASE_APPLICATION fmt=TRANSPARENT wanim=0x10302f1 fl=LAYOUT_IN_SCREEN LAYOUT_INSET_DECOR SHOW_WALLPAPER SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=FORCE_DRAW_STATUS_BAR_BACKGROUND vsysui=LAYOUT_STABLE LAYOUT_HIDE_NAVIGATION LAYOUT_FULLSCREEN} Requested w=1080 h=1920 mLayoutSeq=716 mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{85da77 com.android.launcher3/com.android.launcher3.Launcher}: mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 mWallpaperX=0.33333334 mWallpaperY=0.5 mWallpaperXStep=0.33333334 mWallpaperYStep=1.0 isOnScreen=false isVisible=false Window #9 Window{36924d u0 com.tencent.mm/com.tencent.mm.ui.LauncherUI}: mDisplayId=0 stackId=16 mSession=Session{fc9edf0 19057:u0a10133} mClient=android.os.BinderProxy@9f10de4 mOwnerUid=10133 mShowToOwnerOnly=true package=com.tencent.mm appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=nothing} layoutInDisplayCutoutMode=always ty=BASE_APPLICATION fmt=TRANSLUCENT wanim=0x7f1201e3 fl=LAYOUT_IN_SCREEN LAYOUT_INSET_DECOR SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=FORCE_DRAW_STATUS_BAR_BACKGROUND vsysui=LAYOUT_STABLE LAYOUT_FULLSCREEN} Requested w=1080 h=1920 mLayoutSeq=691 mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{daf2fc4 com.tencent.mm/com.tencent.mm.ui.LauncherUI}: mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=false isVisible=false Window #10 Window{6c14d20 u0 com.android.settings/com.android.settings.SubSettings}: mDisplayId=0 stackId=15 mSession=Session{8a3d7f7 17988:1000} mClient=android.os.BinderProxy@4a77423 mOwnerUid=1000 mShowToOwnerOnly=true package=com.android.settings appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=pan} ty=BASE_APPLICATION wanim=0x10302f1 fl=LAYOUT_IN_SCREEN LAYOUT_INSET_DECOR SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=FORCE_DRAW_STATUS_BAR_BACKGROUND} Requested w=1080 h=1920 mLayoutSeq=647 mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{57a95e2 com.android.settings/com.android.settings.SubSettings}: mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=false isVisible=false Window #11 Window{5343dde u0 com.android.settings/com.android.settings.SubSettings}: mDisplayId=0 stackId=15 mSession=Session{8a3d7f7 17988:1000} mClient=android.os.BinderProxy@84cd919 mOwnerUid=1000 mShowToOwnerOnly=true package=com.android.settings appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=pan} ty=BASE_APPLICATION wanim=0x10302f1 fl=LAYOUT_IN_SCREEN LAYOUT_INSET_DECOR SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=FORCE_DRAW_STATUS_BAR_BACKGROUND} Requested w=1080 h=1920 mLayoutSeq=603 mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{da8dd73 com.android.settings/com.android.settings.SubSettings}: mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=false isVisible=false Window #12 Window{9103d82 u0 com.android.settings/com.android.settings.Settings}: mDisplayId=0 stackId=15 mSession=Session{8a3d7f7 17988:1000} mClient=android.os.BinderProxy@74840cd mOwnerUid=1000 mShowToOwnerOnly=true package=com.android.settings appop=NONE mAttrs={(0,0)(fillxfill) sim={adjust=pan} ty=BASE_APPLICATION wanim=0x10302f1 fl=LAYOUT_IN_SCREEN LAYOUT_INSET_DECOR SPLIT_TOUCH HARDWARE_ACCELERATED DRAWS_SYSTEM_BAR_BACKGROUNDS pfl=FORCE_DRAW_STATUS_BAR_BACKGROUND vsysui=LAYOUT_STABLE LAYOUT_HIDE_NAVIGATION} Requested w=1080 h=1920 mLayoutSeq=596 mHasSurface=false isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{e518430 com.android.settings/com.android.settings.Settings}: mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 isOnScreen=false isVisible=false Window #13 Window{924eb8e u0 com.android.systemui.ImageWallpaper}: mDisplayId=0 stackId=0 mSession=Session{46a0dca 1749:u0a10088} mClient=android.os.BinderProxy@9e1ef89 mOwnerUid=10088 mShowToOwnerOnly=true package=com.android.systemui appop=NONE mAttrs={(0,0)(2160x1920) gr=TOP START CENTER layoutInDisplayCutoutMode=always ty=WALLPAPER fmt=RGBX_8888 wanim=0x103030e fl=NOT_FOCUSABLE NOT_TOUCHABLE LAYOUT_IN_SCREEN LAYOUT_NO_LIMITS SCALED LAYOUT_INSET_DECOR pfl=WANTS_OFFSET_NOTIFICATIONS} Requested w=2880 h=2560 mLayoutSeq=721 mIsImWindow=false mIsWallpaper=true mIsFloatingLayer=true mWallpaperVisible=false mHasSurface=true isReadyForDisplay()=false mWindowRemovalAllowed=false WindowStateAnimator{e320202 com.android.systemui.ImageWallpaper}: Surface: shown=false layer=0 alpha=1.0 rect=(-360.0,0.0) 2880 x 2560 transform=(0.75, 0.0, 0.75, 0.0) mLastFreezeDuration=+29s218ms mForceSeamlesslyRotate=false seamlesslyRotate: pending=null finishedFrameNumber=0 mHScale=0.75 mVScale=0.75 mWallpaperX=0.33333334 mWallpaperY=0.5 mWallpaperXStep=0.33333334 mWallpaperYStep=1.0 isOnScreen=true isVisible=false mGlobalConfiguration={1.0 ?mcc?mnc [zh_CN_#Hans,en_US] ldltr sw411dp w411dp h659dp 420dpi nrml port night finger -keyb/v/h -nav/h winConfig={ mBounds=Rect(0, 0 - 1080, 1920) mAppBounds=Rect(0, 0 - 1080, 1794) mWindowingMode=fullscreen mDisplayWindowingMode=fullscreen mActivityType=undefined mAlwaysOnTop=undefined mRotation=ROTATION_0} s.8} mHasPermanentDpad=false mTopFocusedDisplayId=0 mInTouchMode=true mLastDisplayFreezeDuration=0 due to Window{f83a40d u0 StatusBar} mLastWakeLockHoldingWindow=null mLastWakeLockObscuringWindow=Window{6682f7b u0 com.tencent.mm/com.tencent.mm.ui.LauncherUI} mFullSnapshotScale=1.0 SnapshotCache Entry taskId=88 topApp=AppWindowToken{da37ed5 token=Token{153378c ActivityRecord{27614bf u0 com.tencent.mm/.plugin.appbrand.ui.AppBrandUI t88}}} snapshot=TaskSnapshot{ mTopActivityComponent=com.tencent.mm/.plugin.appbrand.ui.AppBrandUI mSnapshot=android.graphics.GraphicBuffer@f2f7cc2 (1080x1920) mColorSpace=sRGB IEC61966-2.1 (id=0, model=RGB) mOrientation=1 mContentInsets=[0,63][0,126] mReducedResolution=false mScale=1.0 mIsRealSnapshot=true mWindowingMode=1 mSystemUiVisibility=8192 mIsTranslucent=true Entry taskId=86 topApp=AppWindowToken{c1d119a token=Token{761f645 ActivityRecord{10c26bc u0 com.android.settings/.SubSettings t86}}} snapshot=TaskSnapshot{ mTopActivityComponent=com.android.settings/.SubSettings mSnapshot=android.graphics.GraphicBuffer@c1c18a9 (1080x1920) mColorSpace=sRGB IEC61966-2.1 (id=0, model=RGB) mOrientation=1 mContentInsets=[0,63][0,126] mReducedResolution=false mScale=1.0 mIsRealSnapshot=true mWindowingMode=1 mSystemUiVisibility=0 mIsTranslucent=false WINDOW MANAGER TRACE (dumpsys window trace) Status: Disabled Log level: 1 Buffer size: 2097152 bytes Buffer usage: 0 bytes Elements in the buffer: 0 推论： dumpsys window | grep windows 这其实是输出：从上到下沿Z轴的应用token 2.11.3. 技巧之 循环dump 针对于对一段流程，不停做切片 ----> status思想、帧动画思想 TODO: 扩展 ::getLayersFrames.bat set Folder=\"DumpInfo_log\" set n=20 mkdir %Folder% ::for /L %% Variable in (Start#,Step#,End#) do Command for /L %%i in (1,1,%n%) do ( adb shell dumpsys SurfaceFlinger > %Folder%/layers%%i%.txt ) echo log抓取完成 timeout /t 50 exit ::getWindowFrames.bat set Folder=\"DumpInfo_log\" set n=20 mkdir %Folder% ::for /L %% Variable in (Start#,Step#,End#) do Command for /L %%i in (1,1,%n%) do ( adb shell dumpsys window > %Folder%/window%%i%.txt ) echo log抓取完成 timeout /t 50 exit TODO: 基于这种思想，可以扩展至任意status 的dump中 2.11.4. 推论：获取当前 最前面activty的脚本： adb shell dumpsys activity activities|findstr ResumedActivit ----------> 有针对性 D:\\laji>adb shell dumpsys activity activities|findstr ResumedActivit mResumedActivity: ActivityRecord{915ceaa u0 com.example.sourceCode/.MainActivity t51} 同时可以知道具体的子类名 2.11.5. 原理 2.12. adb查看手机是32位还是64位 adb shell getprop ro.product.cpu.abi arm64-v8a 2.13. ADB网络wifi调试和常见命令 https://www.jianshu.com/p/2d256f338634 使用网络首先得在Android设备设置网络adb监听的端口，再通过adb连接到设备进行控制； 设置网络adb监听的端口 2.13.1. 最简单的方法 先是使用usb线连接电脑跟安卓设备，执行adb命令，该条命令是设置网络adb监听的端口，5555是默认，也可以设置其他的，在安卓设备重启后会失效，不需要root权限 adb tcpip 3333 2.13.2. 重启后依然有效方法 在root权限下执行 adb rootadb shell setprop service.adb.tcp.port 3333 输入命令连接到设备 adb connect 192.168.31.166:3333 2.14. DropBox https://blog.csdn.net/rzleilei/article/details/128328967 作用： dropbox是安卓系统中用来记录一些异常信息的模块，比如某个应用crash了或者anr了，系统最终都会把记录的异常信息记录到dropbox中 位置： data/system/dropbox 文件类型： CRASH，ANR，墓碑日志，native崩溃 获取脚本： adb devices adb root adb pull /data/system/dropbox/ pause 清理： adb root adb remount adb shell rm -rf /data/system/dropbox/* pause 原理： https://blog.csdn.net/rzleilei/article/details/128328967 具体场景举例子： TODO 2.15. adb命令行： https://blog.csdn.net/chen801090/article/details/103962118 ---> 很全 屏幕相关： 锁屏、唤醒屏幕: WAKE ​ 或 adb shell input keyevent KEYCODE_POWER ----> 锁屏与唤醒自动切换 滑动屏幕 adb shell input swipe x_start y_start x_end y_end 截屏：adb shell /system/bin/screencap -p /sdcard/screenshot.png 录屏：adb shell screenrecord --time-limit 10 /sdcard/demo.mp4 禁用自动旋转: adb shell content insert --uri content://settings/system --bind name:s:accelerometer_rotation --bind value:i:0 旋转屏幕 : adb shell content insert --uri content://settings/system --bind name:s:user_rotation --bind value:i:1 后面跟的不同的值代表旋转为不同的方向，取值范围为0，1，2，3 安卓开机禁止锁屏: adb shell settings put system def_lockscreen_disabled true 禁止屏幕休眠: adb shell settings put system screen_off_timeout 3600000 //一个小时 adb shell settings put system screen_off_timeout 2147483647 // 永不休眠 手势操作： 向下滑：adb shell input touchscreen swipe 930 380 930 880 向右滑：adb shell input touchscreen swipe 330 880 930 880 向左滑：adb shell input touchscreen swipe 930 880 330 880 模拟鼠标点击操作：adb shell input mouse tap 100 500 长按：adb shell input swipe startX startY startX startY 500 滑动解锁：adb shell input swipe 300 1000 300 500 app相关： adb卸载系统应用+安装为系统应用， 见 《 AndriodSystem_Others》 冷启动app：adb shell am start -W -n package/activity 热启动：①停止app： adb shell input keyevent 3 ②adb shell am start -W -n package/activity 关闭app： 法一： 查进程: adb shell \"ps | grep tencent\" ​ 杀进程 adb shell \" kill -9 \" ​ 法二： 用包名： adb shell am force-stop com.tencent.com ​ 法三：用利用断点调试杀进程，见断点调试 获取系统状态（AMS、WMS）信息： 当前页面： adb shell dumpsys activity activities|findstr ResumedActivit 屏幕刷新率 获取环境信息： 屏幕分辨率、手机型号、版本号、 查询手机上是userdebug或user版本： adb shell getprop ro.build.type 使用adb 查看Android版本号 和 SDK版本号 adb shell getprop ro.build.version.release adb shell getprop ro.build.version.sdk bat脚本相关： reboot之后，等待手机启动： adb wait-for-device 安卓多屏： 虚拟屏VirtualDisplay相关操作：https://blog.csdn.net/vviccc/article/details/119785457 1、创建 #创建一块辅助屏显示器，如下所示： $settings put global overlay_display_devices \"1920x1080/320,secure\" #创建两块辅助屏显示器，如下所示： $settings put global overlay_display_devices \"1920x1080/320,secure;1920x1080/320,secure\" #创建三块辅助屏显示器也是类似，以此类推，如下所示： $settings put global overlay_display_devices \"1920x1080/320,secure;1920x1080/320,secure;1920x1080/320,secure\" #关闭辅助屏显示器 如下所示： $settings put global overlay_display_devices “null” 2、虚拟屏，不能点击，只能命令，自然： #启动activity在虚拟屏上 adb shell am start --display 2 包名/activity名 #触摸 adb shell input -d 2 tap 500 600 https://blog.csdn.net/weixin_44008788/article/details/118029592 Android系统adb模拟按键操作方法 TODO: adb shell logcat -S 2.16. UIAutomator2自动化（操作手机） https://blog.csdn.net/d1240673769/article/details/113809889?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link ----> 全量 2.16.1. 环境配置 1、安装uiautomator2 pip install --pre uiautomator2 pip install pillow （如果需要截图，可安装这个库） 12 2、设备安装atx-agent ---》手机上 首先设备连接到PC，并能够adb devices发现该设备。 执行下面的命令会自动安装本库所需要的设备端程序：uiautomator-server，atx-agent，openstf / minicap，openstf / minitouch # init就是所有USB连接电脑的手机上都安装uiautomator2 python -m uiautomator2 init # 指定手机安装uiautomator2， 用 --mirror python -m uiautomator2 init --mirror --serial $SERIAL # 嫌弃慢的话，可以用国内的镜像 python -m uiautomator2 init --mirror 12345678 最后提示success，代表atx-agent初始化成功。 3、安装weditor 有了这个，方便我们快速的识别手机上的元素，方便写代码 pip install -U weditor 安装好之后，就可以在命令行运行 weditor --help 确认是否安装成功了。 Windows系统可以使用命令在桌面创建一个快捷方式: weditor --shortcut 2.16.2. 操作命令： 1、连接： import uiautomator2 as u2 d = u2.connect() 2、查看当前UI界面的结构 -----》包括任意一个元素，非常有用！！！！！！（很多时候，我们不清楚一个UI某个控件具体的类！！！！！） d.dump_hierarchy() 例子 def execuiautomator2Command(): print(\"execuiautomator2Command=\") d = u2.connect() val = 1 while val: val +=1 print(val) clickButton = '立即购买' if isTimeOK(d, clickButton): doClick(d, clickButton) else: #d.drag(400, 400, 300, 900, 0.04) # 0.01s #time.sleep(0.3) #等待web加载时间 # continue print(val) clickButton = \"确定\" if isTimeOK(d, clickButton): doClick(d, clickButton) else: print(val) # d.drag(400, 400, 300, 900, 0.04) # 0.01s # time.sleep(0.3) #等待web加载时间 # continue clickButton = \"提交订单\" if isTimeOK(d, clickButton): doClick(d, clickButton) else: print(val) # d.drag(400, 400, 300, 900, 0.04) # 0.01s # time.sleep(0.3) #等待web加载时间 # continue def doClick(d, ans): print(\"doMaiPiao=\") # x, y = d(text=\"K305\").center() try: x, y = d(text=ans).center() d.click(x, y) except: print(\"except\") # time.sleep(0.8) # 等待web加载时间 # selectPeople(d, \"确定\") # time.sleep(0.8) #等待web加载时间 # selectPeople(d, \"提交订单\") def isTimeOK(d, buttonName): mash = \"马上抢\" # if d.xpath(\"//android.widget.TextView[@text='立即购买']\").exists: print(\"//android.widget.TextView[@text='%s']\" % (buttonName)) result = False if d.xpath( \"//android.widget.TextView[@text='%s']\" %(buttonName) ).exists: result = True elif d.xpath( \"//android.widget.Button[@text='%s']\" %(buttonName) ).exists: result = True elif d.xpath(\"//android.view.View[@text='%s']\" % (buttonName)).exists: result = True else: result = False return result def selectPeople(d, name): print(name) x2, y2 = d(text=name).center() d.click(x2, y2) print(name + \"end\") def main(): #参数： # checi = \"K1041\" ---》！！！ # time = '12点30分起售' ----》！！！ #二等、硬卧 #乘车人 # 是否提交订单 ----》！！！！！ execuiautomator2Command() if __name__ \"__main__\": main() 。。。。其他命令 2.17. 云端linux 连adb 手机 方式一： 主机： C:\\Windows\\system32>adb kill-server C:\\Windows\\system32>adb -a -P 9999 nodaemon server 计算云：ip是主机的 adb connect 192.168.31.200:9999 adb -H 192.168.31.200 -P 9999 devices 注意：adb版本统一用39的！！！！ ​ 所有adb命令，变成 adb -H 192.168.31.200 -P 9999 方式二：见《docker连 主机pc连的安卓设备》 方式二：win转 1、win与linux的adb版本号要完全一致 2、 adb kill-server && adb -a -P 5039 nodaemon server 3、 adb -H 10.82.254.157 -P 5039 devices // 10.82.254.157是win ip 参考： https://cloud.tencent.com/developer/article/1864005 ----------------> 优：只要win与linux在同一局域网即可 优化： 输入ip太麻烦 & linux as 不能用 // 临时alias adb='adb -H 10.82.254.157 -P 5039' // alias局部替换 adb devices// 持久化echo \"alias adb='adb -H 10.82.254.157 -P 5039'\" >> ~/.bashrcsource ~/.bashrc --------------------------------------------> 方式二缺点： linux内AS 无法连手机 方式三：通过wifi直连 1、连同一局域网 方法一：连同一wifi 方法二： ubuntu分享热点 2、adb连接： Android Studio 使用WIFI连接手机进行无线调试_android studio wifi-CSDN博客 ------------> 验证ok // 手机侧： C:\\\\Users\\\\my>adb tcpip 5555 // linux侧: alias adb='adb' adb connect 192.168.10.163:5555 --------------------------------------------> 方式三优点：adb connect后， linux内AS 可以连手机 3. 手机环境问题 3.1. adb 授权 Android设备adb授权的原理【转】： https://blog.51cto.com/u_8475449/5606594 在新电脑上/重装系统后恢复 adb 授权 https://zhuanlan.zhihu.com/p/559998688?utm_id=0 4. 格式 忽略： 隐藏 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/search.html":{"url":"Tool/search.html","title":"Search","keywords":"","body":"1. 目录2. 一些好的技术文章公众号3. 搜索途径：4. 搜索的目的5. Google网站的搜索6. 电子书网站7. 在线工具8. 技巧8.1. 复制网站链接，如何将浏览位置也复制记录下来 一些好的技术文章公众号 搜索途径： 搜索的目的 Google网站的搜索 电子书网站 在线工具 技巧 复制网站链接，如何将浏览位置也复制记录下来 1. 目录 2. 一些好的技术文章公众号 博客很多情况下，挑选：点赞数、评论数、码年龄大的 失落的夏天：https://blog.csdn.net/rzleilei/category_6506586.html gityuan 努比亚团队 罗升阳 ------------> 规定： 安卓的任何帖子，都必须先参考他的 ​ https://www.kancloud.cn/alex_wsc/androids/473785 ----------> 目录结构很好 ​ https://blog.csdn.net/luoshengyang/article/details/8498908 ------> 原博客 ​ ariesjzj -----> 码龄18 3. 搜索途径： google > 微信搜一搜 > 公众号 > 细分论坛或APP > 百度等 4. 搜索的目的 know sth learn sth -----> 要专业性 create sth 5. Google网站的搜索 参考：https://blog.csdn.net/u013527834/article/details/134094782 【资源信息获取方法】 默认搜索 = 标题匹配 或 正文匹配 匹配： title匹配： intitle:iPhone15摄像头进灰 ----------> 相当于在标题中匹配： iPhone15 摄像头 进灰 三个词，不论顺序 text匹配： intext:池晨晨浙江大学 非精准匹配： 池晨晨浙江大学 -------> 搜出来有可能是： 池晨晨 浙江工业 大学 精准匹配： \"池晨晨\" \"浙江大学\" 匹配含空格的： \"hello kitty\" ------> 自然 限定网站来源： 池晨晨 inurl:wenzhou -----------> 限定温州相关的网站 限定文件类型： 找pdf：（大多pdf专业文档） 大模型 filetype: pdf 找png：------> 同理 龙舟 filetype: png 组合： 以上可以组合 -----> 自然 6. 电子书网站 https://z-lib.io/s https://www.jiumodiary.com/ 中文 7. 在线工具 canva.com;在线设计海报、ppt\\视频 remove.bg：在线抠图 miro/canva；脑图 腾讯智影/Azure/网易见闻: 文字转语音 https://thispersondoesnotexist.com:生成AI合成头像 Clipchamp/FlexClip:视频剪辑 --------> !!!! deepl: grammarly: chatgpt:让它回答问题并且生成文档画作等。 https://github.com/LiLittleCat/awesome-free-chatgpt?tab=readme-ov-file // 国内镜像大汇总 https://savetube.app/en2 ----------> download youtube videos 8. 技巧 8.1. 复制网站链接，如何将浏览位置也复制记录下来 选中，右键 复制指向突出......... console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/software_pcSettings.html":{"url":"Tool/software_pcSettings.html","title":"Software Pc Settings","keywords":"","body":"1. 目录2. 其他次要软件/工具2.1. win 软件大全2.2. linux 软件大全2.3. Source Insight2.4. markdown2.4.1. 设置 编辑器 的宽度2.5. Q-dir2.6. 截图工具Snipaste2.7. mobaXterm2.7.1. 提高效率的做法2.7.2. 启动sh，可以定制一些东西2.7.3. 技巧1：2.7.4. 技巧2：2.7.5. 极优的点：2.7.6. 技巧之 ssh不用重复输入密码2.7.7. 问题：ssh登录linux时，不显示用户名和目录2.7.8. 解除最多保存14个Session的限制2.7.9. 快捷键2.8. 远程桌面：2.8.1. 远程桌面之内网穿透2.8.2. 远程桌面之 公网ip（ipV6）2.8.3. 优化之 ipv6租约时间2.8.4. 远程桌面之 音频传输2.9. git bash2.10. gitBook----个人网站2.10.1. 环境搭建：2.10.2. PC本地调试，优2.10.3. 各种插件2.10.4. 魔改插件2.10.5. 调试技巧：2.10.6. md、html 生成ok标准：2.10.7. 优化之book sm2.10.8. 优化之 文件的总目录2.10.9. 写好的配置文件2.10.10. 同时2本书（3本同理）2.10.11. 技巧：保存网页为md，并加入 书本二（作为资源）2.11. pdf电子书制作2.11.1. 教程：2.11.2. 最终结果展示：2.12. EA2.12.1. 自动生成类图2.12.2. 以java文件的粒度，创建 导入一个class 模型2.12.3. EA中边界框架的添加方法2.12.4. EA的缺点：2.13. Edraw2.13.1. 1、技巧：edraw的组合2.13.2. 2、自定义view组件存储的地方：2.13.3. 3、技巧：选中主题，有外框和标注2.13.4. 对齐与大小同步2.13.5. 画图基本元素2.13.6. 链接线不允许手动画2.13.7. 格式刷 刷链接线2.13.8. 文字如何统一修改格式？2.13.9. 如何统一修改框的格式2.13.10. 亿图截图方法2.14. Andriod Code Search2.15. Everything2.15.1. 限定路径搜索2.16. Typora2.16.1. 中文乱码问题2.16.2. 快捷键2.16.3. 搜索 全局搜索2.16.4. 搜索文件 Ctrl + P2.16.5. Typora 设置标题自动编号2.16.6. linux 安装 typora2.17. del_默认打开根目录2.17.1. Typora目录折叠设置2.17.2. 官网 & 教程2.18. 所有软件自定义热键的方法--- AutoHotkey2.18.1. 和Typora结合：2.18.2. 写脚本2.18.3. 文档2.18.4. 目前OK的脚本2.19. 屏幕亮度/对比度 软件调节2.20. FreeFileSync2.21. 屏幕分区软件MaxTo2.22. 反编译工具2.23. scrcpy.exe2.24. del_键盘按键坏了----- 按键替换2.25. del----word软件---del2.25.1. del_目录2.25.2. del_页眉2.25.3. del_页脚2.26. Copilot2.27. del_ipad 快捷键2.28. 桌面环境KDE2.29. KDE 防止长时间锁屏3. vscode3.1. bookmark使用：3.2. 远程ssh3.2.1. 免密失败 ----ssh链接调试3.3. 设置导出 todo3.4. 快捷键3.5. 大纲3.6. 与SI的优势对比3.6.1. 可以显示代码调用栈显示3.7. vscode 可以一点点添加目录！！！！按需添加3.8. vscode好用的插件3.8.1. 其他插件：3.9. 问题3.9.1. 常见的函数都无法跳转了 ------ 索引库坏了3.10. 其他3.10.1. 补充 vscode4. 计算机其他问题及设置4.1. 软件最优的使用方式----免安装4.2. 删除文件/文件夹，有进程正在占用4.3. 蓝牙设备添加4.4. 磁盘修复及优化4.5. 装最纯净的win10系统4.6. 常见最优设置4.6.1. 剪切板，多个历史 复制值4.6.2. 双屏，次屏幕隐藏任务栏4.7. 垃圾4.8. 蓝屏问题4.9. win磁盘空间不够4.9.1. 查找磁盘大文件4.9.2. 金山毒霸的清理磁盘垃圾------> 很有效4.9.3. 更改虚拟内存为E盘4.10. 电脑wifi经常掉4.11. 网络较慢4.12. 关于HDMI连接 无响应4.13. 网页视频音量太小4.14. 远程桌面4.14.1. 远程电脑 访问 本地电脑磁盘的方法4.15. 技巧：手机与电脑连局域网---尽量用电脑分享5. 格式 目录 其他次要软件/工具 win 软件大全 linux 软件大全 Source Insight markdown 设置 编辑器 的宽度 Q-dir 截图工具Snipaste mobaXterm 提高效率的做法 启动sh，可以定制一些东西 技巧1： 技巧2： 极优的点： 技巧之 ssh不用重复输入密码 问题：ssh登录linux时，不显示用户名和目录 解除最多保存14个Session的限制 快捷键 远程桌面： 远程桌面之内网穿透 远程桌面之 公网ip（ipV6） 目标 一：有个可以在广域网ping通的ipv6 步骤1：1级光猫配置（可直接使用光猫wifi的 ipv6） 步骤2：二级路由器的设置 二级路由器也存在防火墙关闭问题： 方式一：将ipv6防火墙全部关闭 方式二：在防火墙开一两个端口（将远程桌面的端口3389开） 优化之 ipv6租约时间 远程桌面之 音频传输 git bash gitBook----个人网站 环境搭建： gitbook init报TypeError [ERR_INVALID_ARG_TYPE] 选择github作为网页page的仓时 PC本地调试，优 各种插件 accordion隐藏插件 代码颜色高亮 快速转化为pdf 魔改插件 改gitbook-plugin-page-treeview 调试技巧： md、html 生成ok标准： 优化之book sm 优化之 文件的总目录 写好的配置文件 同时2本书（3本同理） 技巧：保存网页为md，并加入 书本二（作为资源） pdf电子书制作 教程： 最终结果展示： EA 自动生成类图 目的 以java文件的粒度，创建 导入一个class 模型 EA中边界框架的添加方法 EA的缺点： Edraw 1、技巧：edraw的组合 2、自定义view组件存储的地方： 3、技巧：选中主题，有外框和标注 对齐与大小同步 画图基本元素 链接线不允许手动画 格式刷 刷链接线 文字如何统一修改格式？ 如何统一修改框的格式 亿图截图方法 Andriod Code Search Everything 限定路径搜索 Typora 中文乱码问题 快捷键 搜索 全局搜索 搜索文件 Ctrl + P Typora 设置标题自动编号 linux 安装 typora del_默认打开根目录 Typora目录折叠设置 官网 & 教程 所有软件自定义热键的方法--- AutoHotkey 写脚本 基础语法 文档 目前OK的脚本 屏幕亮度/对比度 软件调节 FreeFileSync 屏幕分区软件MaxTo 反编译工具 scrcpy.exe del_键盘按键坏了----- 按键替换 del----word软件---del del_目录 del_页眉 del_页脚 Copilot del_ipad 快捷键 桌面环境KDE KDE 防止长时间锁屏 vscode bookmark使用： 远程ssh 免密失败 ----ssh链接调试 设置导出 todo 云同步设置 手动 快捷键 大纲 与SI的优势对比 可以显示代码调用栈显示 vscode 可以一点点添加目录！！！！按需添加 vscode好用的插件 其他插件： 问题 常见的函数都无法跳转了 ------ 索引库坏了 其他 补充 vscode 计算机其他问题及设置 软件最优的使用方式----免安装 删除文件/文件夹，有进程正在占用 蓝牙设备添加 磁盘修复及优化 装最纯净的win10系统 常见最优设置 剪切板，多个历史 复制值 双屏，次屏幕隐藏任务栏 垃圾 蓝屏问题 win磁盘空间不够 查找磁盘大文件 金山毒霸的清理磁盘垃圾------> 很有效 更改虚拟内存为E盘 电脑wifi经常掉 网络较慢 关于HDMI连接 无响应 网页视频音量太小 远程桌面 远程电脑 访问 本地电脑磁盘的方法 方法一：将本地的 磁盘driver 挂到远程电脑上 方法二： 共享文件夹 技巧：手机与电脑连局域网---尽量用电脑分享 格式 1. 目录 2. 其他次要软件/工具 2.1. win 软件大全 推荐使用： 功能： 软件： 事件分发/事件驱动 软件 时光序，桌面日历 录屏 EV录屏 安卓手机linux命令不全 busybox的二进制 像素测量，pixel测量 法一：1、图片的像素测量：Dorado_1.1.exe法二：2、图片的像素测量：windows右键，查看图片属性法三：测量window或者Linux 屏幕上的像素 --------> snipaste截屏时，自带px的标尺！！！ 2.2. linux 软件大全 htop 优点： 1、图形化显示各个核心 2.3. Source Insight 见《sourceInsight.md》 ​ 2.4. markdown 2.4.1. 设置 编辑器 的宽度 （也是主题）的宽度 https://blog.csdn.net/xiaojin21cen/article/details/90292315#2___12 2.5. Q-dir 2.6. 截图工具Snipaste 1、可以截取多张图片，悬浮在屏幕里---》对照方便 2、绘图展示 3、放大缩小： 4、透明度改变 5、开机自启动 2、单独一次截屏，自动复制（F4）： ​ （1） 设置： 控制 -----> 快捷键 ----->截屏并自动复制 -----> F4 ​ （2）操作：F4 , 然后鼠标右键 ​ F3 比较繁琐，后面还有多步操作 3、实现 快速连续多次 截屏，并自动保存一系列png（极优：中间没有粘贴等其他操作）：F4 + 左键 (1)设置： 控制 -----> 快捷键 ----->截屏并自动复制 -----> F4 （2）输出 ------> 自动保存 -----> D:/Snipaste_png (3) 操作：F4 , 然后鼠标左键 ------------> 一直如此，目录下，出现一堆png 4、技巧： shift + F3, 显示/隐藏（一个组的所有贴图） -----------> 不会挡住 注： 只有F3截图能进入组；F4截图是进入文件夹 5、ctrl + F3，切换组（相当于文件夹了） 2.7. mobaXterm copy将整个页面： 1、关掉右键粘贴 2、复制全部或 +号默认打开的是宿主机子win的c盘位置，相当于 打开本地的cmd ----> TODO: 这其实是很好的入口，用linux环境，做一些cmd初始化的工作 2.7.1. 提高效率的做法 同时开几个窗口 + 且用tmux： 2.7.2. 启动sh，可以定制一些东西 这一点同Linux、win的 sh脚本一样 Bash启动： 会自动执行profile文件：----> 在这里source sh文件，自定义function 2.7.3. 技巧1： bash.exe环境 是 linux下shell环境:-----------> 命令友好 但是 缺少 win环境变量（比如adb，python） -----> 方法：极优 linux环境 + win环境变量（即win环境）： 步骤： 在bash环境下，先进入cmd（拿到win环境），再exit回到 bash环境 2.7.4. 技巧2： 可以在win下任意路径，进入bash环境 即 2.7.5. 极优的点： 整个win系统的硬盘都挂在了/drives -------------> 整个win硬盘，bash都可以访问 2.7.6. 技巧之 ssh不用重复输入密码 1、 不用输入账号 & 密码--------设置： session ----> SSH ----> Specify username 2、保活： settings ----> SSH ----> SSH keepalive 2.7.7. 问题：ssh登录linux时，不显示用户名和目录 问题： ssh登录linux时： 1、不显示用户名和目录 2、用不了TAB键填充 3、无法用 上键 查看历史信息 办法： 原因：用的sh，不是bash vim /etc/passwd 找到对应用户，将最后的/bin/sh 改为/bin/bash 参考：https://blog.csdn.net/qq_43358006/article/details/132586019 2.7.8. 解除最多保存14个Session的限制 MobaXterm如何解除最多保存14个Session的限制 2.7.9. 快捷键 优操作：切换shell，crtl + ALT + 左键 2.8. 远程桌面： 2.8.1. 远程桌面之内网穿透 淘宝有卖 远程桌面需要的条件：局域网（没有公共IP） 或者 公网ip 或者内网穿透 https://zhuanlan.zhihu.com/p/115826053?utm_source=wechat_session&utm_medium=social&utm_oi=903075405244817408&utm_campaign=shareopn 2.8.2. 远程桌面之 公网ip（ipV6） 目标 一：有个可以在广域网ping通的ipv6 可以测试的网站： https://ipw.cn/ https://test-ipv6.com/ http://test6.ustc.edu.cn/ 步骤1：1级光猫配置（可直接使用光猫wifi的 ipv6） 登录：http://192.168.1.1/cu.html 参考：https://zhidao.baidu.com/question/1930330333758025547.html 联通光猫wo_27s的网址；192.168.1.1/cu.html 超级用户名：CUAdmin 密码：CUAdmin 拨号的配置： 防火墙设置：iPv4防火墙设置低；iPv6防火墙直接删掉 核心要点：关闭各种防火墙--------pc防火墙 + 路由器防火墙 https://blog.csdn.net/weixin_43245095/article/details/125237294 IPv6连接测试通过，但是无法ping成功问题解决（记录） https://blog.csdn.net/hua0721/article/details/128223801 ipv6外网能ping通，但无法访问服务(自建网站,远程桌面等) 注意：此时可以使用光猫wifi的 ipv6 ----》 可以被广域网 ping到。可以远程使用 步骤2：二级路由器的设置 联网设置： （1）物理网线连接 光猫 （2）登录 http://192.168.2.1/ ipv6相关设置： 账号admin 二级路由器也存在防火墙关闭问题： 同上面，也要关闭防火墙 方法一：路由器设置界面可以关掉 方法二：路由器界面就没有防火墙--------> 大招，进入系统： 参考： https://zhuanlan.zhihu.com/p/547389653 关闭服务器防火墙 进入路由器系统的方法： （1）打开ssh开关 ： 登录 http://192.168.2.1/api/set/telnet 账号admin 参考： https://429006.com/article/tag/openw （2）进入： C:\\Users\\24234>ssh -l root 192.168.2.1 方式一：将ipv6防火墙全部关闭 root@VS010:~# cd / root@VS010:/# config2 default/ root@VS010:/# ip6tables -F root@VS010:/# ip6tables -X root@VS010:/# ip6tables -P INPUT ACCEPT root@VS010:/# ip6tables -P OUTPUT ACCEPT root@VS010:/# ip6tables -P FORWARD ACCEPT root@VS010:/# //总之， config2 default/ && ip6tables -F && ip6tables -X && ip6tables -P INPUT ACCEPT && ip6tables -P OUTPUT ACCEPT && ip6tables -P FORWARD ACCEPT 远程桌面，只需要IP即可 方式二：在防火墙开一两个端口（将远程桌面的端口3389开） 优点---------》 安全性非常好 参考：http://app.myzaker.com/news/article.php?pk=626eae9d8e9f095e4a34d66f // 开放5001 ip6tables -I forwarding_rule -p tcp --dport 5010 -j ACCEPT ip6tables -I forwarding_rule -p udp --dport 5010 -j ACCEPT // 开放3389 ip6tables -I forwarding_rule -p tcp --dport 3389 -j ACCEPT ip6tables -I forwarding_rule -p udp --dport 3389 -j ACCEPT 路由器开机后自动开启 5000 和 3389 端口，这个端口号是可以根据自己的需求更改或者增加的。Windows 系统的远程桌面端口认是 3389，如果觉得不安全，可以换一个端口号。 远程桌面： [ipv6地址]:端口，比如 [ipv6地址]:3389 优化1： Windows 系统的远程桌面端口认是 3389，不安全 ------> 修改端口为5010 参考： ​ https://xinzhi.wenda.so.com/a/1630119419206952 远程桌面： [ipv6地址]:5001 优化2：把脚本写进路由器开机启动里 参考：http://app.myzaker.com/news/article.php?pk=626eae9d8e9f095e4a34d66f 写入文件：vi /etc/rc.local 2.8.3. 优化之 ipv6租约时间 路由器定时修改ipc的 IPv4和ipv6??? ------------> 解析，固定为个人域名 https://github.com/jeessy2/ddns-go 具体步骤，见md 2.8.4. 远程桌面之 音频传输 远程桌面连接后听不到remote pc的视频播放声音： 1、相关的配置： https://www.anyviewer.cn/how-to/rdp-audio-not-working-6540.html 1_1、重启本地+远程pc 2、确定remote pc已安装声卡和驱动 + 耳机，换句话说就是remote pc可以出声 3、本地pc远程： ​ 一个坑： 验证步骤2时，不能用RDP远程操作。办法： 用向日葵或直接远程pc登录验证 2.9. git bash 好处： 1、git作用 2、将win文件系统变成linux（极优） --------> 一切在linux下的命令，都可以用在win下 ​ 比如： ls -l、执行sh、git管理文件 3、任意win目录都可以变成linux目录 安装： https://blog.csdn.net/aixueai/article/details/119574135 第一次使用，设置你的名字和Email地址： git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" git push需要： 2.10. gitBook----个人网站 2.10.1. 环境搭建： https://blog.csdn.net/YunWQ/article/details/120197926?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-120197926-blog-122971465.235%5Ev36%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-120197926-blog-122971465.235%5Ev36%5Epc_relevant_default_base3&utm_relevant_index=4 https://www.jianshu.com/p/a9c6b5cba8cf https://blog.csdn.net/qlql489/article/details/122971465 TODO:https://docs.docker.com/get-started/overview/ ---> 看一下别人如何搭建这么好的 gitbook init报TypeError [ERR_INVALID_ARG_TYPE] https://blog.csdn.net/qq_33641175/article/details/122508473 选择github作为网页page的仓时 每次push，网站会自动校验 pages build ： 影响 1、通不过，无法访问网站github.io 网站 2、这也解释了为啥push上去，要等很久，才更新网页（校验build需要时间） 2.10.2. PC本地调试，优 命令gitbook serve(注意是serve不是server) 并生成http://localhost:4000本地访问地址 2.10.3. 各种插件 https://blog.csdn.net/ming_97y/article/details/115202048 Gitbook详解（五）-插件的配置和使用详解 https://blog.csdn.net/xixihahalelehehe/article/details/125115239 \"plugins\": [ \"anchor-navigation-ex\", \"toggle-chapters\", \"expandable-chapters-small\", \"splitter\", \"code\", \"page-treeview\", \"popup\", \"-search\", \"-lunr\", \"search-pro\" ], 验证OK） 注意： 单个plugin，会报错，比如： gitbook install search-pro // 【】 gitbook功能插件有： 插件 gitbook 介绍【updated】 gitbook 开始【updated】 gitbook 安装【updated】 gitbook README.md【updated】 gitbook SUMMARY.md【updated】 gitbook book.json 定制功能【updated】 gitbook 发布 github pages【updated】 gitbook 更新 github pages【updated】 gitbook 插件【updated】 gitbook 插件 gitbook-summary【updated】 gitbook 插件 GitBook-auto-summary【updated】 gtibook 插件 侧边导航【updated】 gitbook 插件 文章目录导航【updated】 gitbook 插件 文章 TOC 目录【updated】 gitbook 插件 提示与强调【updated】 gtibook 插件 代码块【updated】 gitbook 插件 分享【updated】 gitbook 插件 赞赏【updated】 gitbook 插件 查询【updated】 gitbook 插件 评论【updated】【adding】 gitbook 插件 版权声明【updated】 gitbook 插件 背景设置【updated】 gitbook 插件 图片查看【updated】 gitbook 插件 图标与LOGO【updated】 gitbook 插件 github【updated】 gitbook 插件 Emoji 表情【updated】 gitbook 插件 文本隐藏【updated】 gitbook 插件 TODO 代办【updated】 gitbook 插件 页面编辑【updated】 gitbook 插件 RSS【updated】 gitbook 插件 视频【updated】 gitbook 插件 SEO 【updated】 gitbook 插件 访问统计【updated】 gtibook 插件 顶部导航【updated】 gitbook 插件 主题【updated】 gitbook 插件 标签【updated】 gitbook 插件 pdf【updated】 gitbook 插件 阅读更多【updated】 gitbook 插件：音乐【updated】 accordion隐藏插件 Some title here Any content here 121321434345325243 324324324324324 %accordion%Some title here%accordion% Any content here 121321434345325243 324324324324324 %/accordion% 注：click-reveal插件，github仓编译校验不过 设置插件展开后的高度： // gitbook\\gitbook-plugin-accordion\\accordion.css .accordion { max-height: 500px; // 这里改大为850 margin-bottom: 5px; border: 1px solid #e8e8e8; overflow: hidden; transition: max-height 250ms ease-out; } .......... .accordionContent { margin: 10px; min-height: 10px; max-height: 450px; // 这里改大为750 overflow: auto; } 代码颜色高亮 效果： 配置： 参考：https://jiangminggithub.github.io/gitbook/chapter-plugins/22-prism.html \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-tomorrow.css\" ], \"lang\": { \"flow\": \"typescript\" }, \"ignore\": [ \"mermaid\", \"eval-js\" ] } 注意报错： 原因： 有些块，填写的shell，找不到shell的加载器（即上面的 Failed to load prism syntax: shell ） ------------> 统一改成 java或 powershell 定位： console.log(`chen_,highlightCode.js, highlightCode() ${source.substring(0, 20)}!`); 主题有： prism代码高亮主题风格展示阁-腾讯云开发者社区-腾讯云 (tencent.com) \"prismjs/themes/prism-solarizedlight.css\" \"prismjs/themes/prism-tomorrow.css\" \"prismjs/themes/prism-a11y-dark.css\" 快速转化为pdf 得到的PDF，格式非常好： 但是要求：每个目录，必须是一个md文件 ------> Typora 要求 2.10.4. 魔改插件 改gitbook-plugin-page-treeview 目标： 让当前页面的目录显示在最右侧： 修改： E:\\working\\laji\\markdownsFile\\node_modules\\gitbook-plugin-page-treeview\\assets\\style.css .treeview__container { /* position: relative; changed by cg */ margin-bottom: 80px; padding-bottom: 20px; /* add by cg start*/ position: fixed; text-align: left; z-index: 0; /* add by cg： 999是最高Z轴配置*/ left: 1400px; /* cg注释： 1vh = 1% 这里没有用 vh作为单位，因为手机上屏幕太小，希望手机上不显示*/ top: 30px; height:70vh; /* 1vh = 1% viewport height https://blog.csdn.net/ghvjhfjf/article/details/122369878 */ width:55vh; /* */ overflow-x: auto; overflow-y: auto; font-size: 13px; /* add by cg end*/ } 目标： 删掉copyright图标 修改： E:\\working\\laji\\markdownsFile\\node_modules\\gitbook-plugin-page-treeview\\lib\\index.js /**changed by cg */ /**return renderContent ? `${copyRight + renderContent}` : ''; */ return renderContent ? `${renderContent}` : ''; }; 注意： 修改前，先备份： 2.10.5. 调试技巧： 直接查看本地的编译结果（而不是github远端的：远端合入，进行再一次编译，需要时间比较久） 比如： https://kenttj.github.io/-book/coding/Andriod/AMS_.html 2.10.6. md、html 生成ok标准： md、html、md--> html 验证标准 html中搜索png，没有png、img出现 ---》所有的png图片都已经融入html中了 gitbook的 bug：不能以为行首 否则，会造成，后面的所有格式失效（包括图片） 例子： ​ md的source code模式： ​ html： 方法： 打破以 ...为首 比如：目到前面 比如： 加粗 比如：加任意字符 - 体会： md看问题，一定要在source code模式下看，因为更本质 2.10.7. 优化之book sm 自动生成Summary.md文件 https://www.jianshu.com/p/4471c20fbafe Gitbook使用教程 - Summary插件：`npm install -g gitbook-summary` 2.10.8. 优化之 文件的总目录 md文件总目录： -------> 实现文件间的跳转 自动生成的Summary.md文件 网页文件总目录： -------> 网页文件间的跳转 方法： 网页的根，是根目录的README.md文件 ​ -----------> 所以，SUMMARY.md再复制一份，变为 README.md 2.10.9. 写好的配置文件 book.json { \"root\": \"./markdownsFiles\", \"bookname\": \"笔记\", \"//\": \"单行注释\", \"//\": [\"这是多行注释： anchor-navigation-ex 是\", \"anchor-navigation-ex 是\", \"click-reveal 本地使用ok，但是github在build pages时，不识别click-reveal\", \"accordion 也是折叠代码段\", \"anchor-navigation-ex 是\" ], \"plugins\": [ \"anchor-navigation-ex\", \"toggle-chapters\", \"expandable-chapters-small\", \"splitter\", \"code\", \"page-treeview\", \"popup\", \"-search\", \"-lunr\", \"sidebar-style\", \"auto-scroll-table\", \"click-reveal\", \"accordion\", \"pageview-count\", \"search-pro\", \"klipse\" ], \"title\": \"Kent的博客\", \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy ershouche-FE 2019\", \"modify_label\": \"文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"disqus\": { \"shortName\": \"gitbookuse\" }, \"lunr\": { \"maxIndexSize\": 200000 }, \"sidebar-style\": { \"title\": \"《知行，行知》\", \"author\": \"Kent\" } } } 2.10.10. 同时2本书（3本同理） 基于化简大纲的原则（按照功能拆分）： 1、保证第一本书大纲不会过多 -----> 大纲最重要（少、关键） 2、第二本书作为 资源（无所谓大纲），被引用------> 次要，不重要 3、搜关键词时，书本级搜索 4、两书之间，弱链接 -------------> 书本2作为资源 书本一： 书本二（资源库）： 如何做到书本一不会 list 书本二呢？办法： 放到资源 asset里： 资源库3： pdf类型 ----------------> https://github.com/ 任意仓库存储都ok 2.10.11. 技巧：保存网页为md，并加入 书本二（作为资源） 目的：持久化保存网页，有些重要的网页，过几年就没有了 方法一（优，可以自己改动加注释）： 保存网页为md到 书本二里 方法二： 保存为pdf，保存到 资源库3 来引用 优点： https://github.com/ 仓库存储 容量没有限制 2.11. pdf电子书制作 2.11.1. 教程： 1、纸质书籍----> pdf电子书籍： 手机夸克 教程： https://www.bilibili.com/video/BV1d8411z7fR/?spm_id_from=333.337.search-card.all.click 2、给电子书加书签： 参考： https://www.bilibili.com/video/BV1hX4y1V7Fi/?buvid=XYA50C4AE9D0FD435535889530C0CC38FFE8A&is_story_h5=false&mid=3rb72hWRTB8TwF8P3lhSvg%3D%3D&p=1&plat_id=114&share_from=ugc&share_medium=android&share_plat=android&share_session_id=bd6ffdc5-4350-4b23-b2d2-e761eb6897ee&share_source=WEIXIN&share_tag=s_i&timestamp=1694924796&unique_k=ZRxWlbM&up_id=234080369&vd_source=3eebd10b94a8a76eaf4b78bee8f23884 步骤： （1）先生成目录标签的空文件 （2）编辑目录标签文件 （3）上面编辑内容的来源： A. 纸质书籍对应的出版社官网有 B. 京东上 卖书的链接有 C 网上搜 D PDF本身的目录OCR （4） pdf挂书签 -失败原因：pdf被打开了 （5） 目录和前沿占据了前14页：整体后挪14页 原则： 实际页号是2，修改 文本中为2 不用管右下角标注的页号 2.11.2. 最终结果展示： 2.12. EA 2.12.1. 自动生成类图 目的 (1)找出主要类（以及主要调用方向） (2)包之间依赖关系 (3)初步判断信息流向 方法： https://www.codenong.com/cs107101145/ 2.12.2. 以java文件的粒度，创建 导入一个class 模型 技巧：class模型 ---> 自动生成方法签名 ---> copy 以java文件的粒度,导入一个class 模型: 很快速 注意: 可以同时生成多个class模型-----》 ctrl+点击多个类模型 2.12.3. EA中边界框架的添加方法 见docker 2.12.4. EA的缺点： 没有重点!!!!---》 1、所以，手动画，一定要突出重点 2、TODO: EA是否能改变呢？ 2.13. Edraw https://www.edrawmax.cn/support/ShapeOperation/ShapesOperation 2.13.1. 1、技巧：edraw的组合 -----> 可以用来定制自己的view组件 ----->后面可以重复利用了~~ 2.13.2. 2、自定义view组件存储的地方： 2.13.3. 3、技巧：选中主题，有外框和标注 2.13.4. 对齐与大小同步 使用方法： 1、选择多个元素 2、Tab键选择标准 3、点击按钮 2.13.5. 画图基本元素 选用下面这个。原因：文字框在实体框内部 文字框在实体框外部：错误，禁止使用 总之，使用给定的元素，尽量不要自己造元素 2.13.6. 链接线不允许手动画 自动向四个方向延展： 2.13.7. 格式刷 刷链接线 万不得已，不要自己组合元素 -----> 这样后期，格式化可以统一刷 2.13.8. 文字如何统一修改格式？ 框选多个元素 2.13.9. 如何统一修改框的格式 方法一： 框选多个，统一修改 方法二：格式刷 2.13.10. 亿图截图方法 不要直接截图，而是选中，复制+粘贴 ------》 极优：高清 2.14. Andriod Code Search ------》下面一切都是围绕着搜索，一切为了搜索方法 https://cs.android.com/ 1、查看某一笔提交的所有改动：场景：安卓所有改动点，Z侧这些点也要注意！！！！！ 2、返回与前进：相当于AS的返回与前进！！！ 3、文件的结构： 4、查看某一行的最新改动的提交 5、所有历史提交！！！！！ 6、 2.15. Everything 2.15.1. 限定路径搜索 2.16. Typora 2.16.1. 中文乱码问题 解决： 2.16.2. 快捷键 参考：https://www.jianshu.com/p/ca2d0420c9ea Typora 快捷键 shortcut keys 跳转， md内部跳转： ----> 不优 1、Ctrl+K, 创建超链接： // 自动生成： [创建超链接](#id22) 1、超链接被链接CTR + L (与Ctrl+K搭配使用) // 自动生成： 被链接 原理： md内部跳转 + md之间跳转，的 统一做法（极优）： 直接填写对应的https 章节链接： 2、Ctrl+T, 创建表格 3、Ctrl+shift + K, 创建代码框： 4、Ctrl + shift + Q ：引用quota 5、 Ctrl + Shift + V Paste As Plain Text ---> 自然 5、自定义的热键 ---》 TODO: 提炼所有软件自定义热键的方法，以后可以在各个软件里自定义热键了！！！！！！！ 对于Typora.exe有： 7、ctrl + alt + shift +h(hide)：隐藏 2.16.3. 搜索 全局搜索 所有md文件的 全局搜索： 方法一： Ctrl + Shift + F 自然 ---------> bug无法一步到位：点开文件，再本文件里搜索 参考：https://blog.csdn.net/m0_49448331/article/details/124495229 方法二： 网页端搜索框，默认全局 ---------> 找到对应的本地md 2.16.4. 搜索文件 Ctrl + P 2.16.5. Typora 设置标题自动编号 修改base.user.css： #write { max-width: 1024px; } body { counter-reset: body; } /* 正文标题自动序号 */ h1 { counter-reset: h1; } h2 { counter-reset: h2; } h3 { counter-reset: h3; } h4 { counter-reset: h4; } h5 { counter-reset: h5; } h6 { counter-reset: h6; } h1:before { counter-increment: body; content: counter(body) \" \"; } h2:before { counter-increment: h1; content: counter(body) \".\" counter(h1) \" \"; } h3:before { counter-increment: h2; content: counter(body) \".\" counter(h1)\".\" counter(h2) \" \"; } h4:before { counter-increment: h3; content: counter(body) \".\" counter(h1)\".\" counter(h2)\".\" counter(h3) \" \"; } h5:before { counter-increment: h4; content: counter(body) \".\" counter(h1)\".\" counter(h2)\".\" counter(h3)\".\" counter(h4) \" \"; } h6:before { counter-increment: h5; content: counter(body) \".\" counter(h1)\".\" counter(h2)\".\" counter(h3)\".\" counter(h4)\".\" counter(h5) \" \"; } /* 侧边大纲自动编号 */ .sidebar-content { counter-reset: h1 } .outline-h1 { counter-reset: h2 } .outline-h2 { counter-reset: h3 } .outline-h3 { counter-reset: h4 } .outline-h4 { counter-reset: h5 } .outline-h5 { counter-reset: h6 } .outline-h1>.outline-item>.outline-label:before { counter-increment: h1; content: counter(h1) \" \" } .outline-h2>.outline-item>.outline-label:before { counter-increment: h2; content: counter(h1) \".\" counter(h2) \" \" } .outline-h3>.outline-item>.outline-label:before { counter-increment: h3; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \" \" } .outline-h4>.outline-item>.outline-label:before { counter-increment: h4; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \" \" } .outline-h5>.outline-item>.outline-label:before { counter-increment: h5; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \" \" } .outline-h6>.outline-item>.outline-label:before { counter-increment: h6; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \" \" } /* TOC 自动序号 */ .md-toc-inner { text-decoration: none; } .md-toc-content { counter-reset: h1toc } .md-toc-h1 { margin-left: 0; counter-reset: h2toc } .md-toc-h2 { margin-left: 1rem; counter-reset: h3toc } .md-toc-h3 { margin-left: 2rem; counter-reset: h4toc } .md-toc-h4 { margin-left: 3rem; counter-reset: h5toc } .md-toc-h5 { margin-left: 4rem; counter-reset: h6toc } .md-toc-h6 { margin-left: 5rem; } .md-toc-h1:before { counter-increment: h1toc; content: counter(h1toc) \" \" } .md-toc-h1 .md-toc-inner { margin-left: 0; } .md-toc-h2:before { counter-increment: h2toc; content: counter(h1toc) \". \" counter(h2toc) \" \" } .md-toc-h2 .md-toc-inner { margin-left: 0; } .md-toc-h3:before { counter-increment: h3toc; content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \" \" } .md-toc-h3 .md-toc-inner { margin-left: 0; } .md-toc-h4:before { counter-increment: h4toc; content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \" \" } .md-toc-h4 .md-toc-inner { margin-left: 0; } .md-toc-h5:before { counter-increment: h5toc; content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \" counter(h5toc) \" \" } .md-toc-h5 .md-toc-inner { margin-left: 0; } .md-toc-h6:before { counter-increment: h6toc; content: counter(h1toc) \". \" counter(h2toc) \". \" counter(h3toc) \". \" counter(h4toc) \". \" counter(h5toc) \". \" counter(h6toc) \" \" } .md-toc-h6 .md-toc-inner { margin-left: 0; } /* 引用相关blockquote： ctrl + shift + Q */ blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; } /* block spacing */ p, blockquote, .md-fences { margin-bottom: 1.5em; } /* blockquote */ /* font-style: italic */ blockquote { border-left: 4px solid #1fe36e; margin-left: 2em; padding-left: 1em; } blockquote { border-color: #bababa; color: #656565; } blockquote ul, blockquote ol { margin-left:0; } /* 相关： ctrl + shift + ` */ code { background-color: #f3f4f4; padding: 0 2px 0 2px; } /*==选中背景高亮==*/ mark { background: #ffffff; color: #db3f1e; font-weight: bold; border-bottom: 0px solid #ffffff; padding: 0.0px; margin: 0 0px; } /* 表格样式：tr（即table row）th（即table header）是表格里的第一行的元素，td是表格里的除了第一行之外的其他元素*/ table tr:nth-child(2n), thead { background-color: #f8f8f8; } table tr th{ font-weight: bold; border: 1px solid #db3f1e; border-bottom: 0; margin: 0; padding: 6px 13px; } table tr td { font-weight: bold; border: 1px solid #dfe2e5; margin: 0; padding: 6px 13px; } 参考 2.16.6. linux 安装 typora linux 安装 typora 2.17. del_默认打开根目录 优：不用每次都找到路径，然后打开 2.17.1. Typora目录折叠设置 效果： 设置： 2.17.2. 官网 & 教程 https://support.typora.io/ 官网 & 教程 2.18. 所有软件自定义热键的方法--- AutoHotkey AutoHotkey软件 -----> 极优： 可以根据当前窗口，定义快捷键。。。。即， 可以定义软件级别的快捷键 也可以系统级别 2.18.1. 和Typora结合： https://blog.csdn.net/Timi_Toro/article/details/119824280 2.18.2. 写脚本 有时候，发现快捷键不生效： 先界定是快捷键问题还是函数内容问题：先改成熟悉的快捷键 是快捷键问题，冲突 ------> 规定：自己定义的快捷键，一般 ctrl + alt + shift + .......,比较难重复 软件级： IfWinActive ahk_exe Typora.exe 按道理，只要是重复的操作，都能被AutoHotkey实现 TODO: 跳转那些 基础语法 %是关键符号，如果要输入%，要加转义符号，比如： SendInput {TEXT}`%/accordion`% 2.18.3. 文档 2.18.4. 目前OK的脚本 脚本 myAutoHotKey.ahk: #NoEnv ; Recommended for performance and compatibility with future AutoHotkey releases. ; #Warn ; Enable warnings to assist with detecting common errors. SendMode Input ; Recommended for new scripts due to its superior speed and reliability. SetWorkingDir %A_ScriptDir% ; Ensures a consistent starting directory. ; 使用版本AutoHotkey v1.1.35.00 ;教程： E:\\programFiles\\AutoHotkey\\AutoHotkey\\v1.1.35.00\\AutoHotkey.chm ; -------------------------------为Typora定义的快捷键，应用级---------------- IfWinActive ahk_exe Typora.exe { ; Ctrl+Alt+o 橙色 ^!o::addFontColor(\"orange\") ; Ctrl+Alt+r 红色 ^!r::addFontColor(\"red\") ; Ctrl+Alt+b 浅蓝色 ^!b::addFontColor(\"cornflowerblue\") ; Ctrl+Alt+g 浅蓝色 ^!g::addFontColor(\"green\") ; Ctrl+l 设置 超链接被链接 ^l::addLink() ;Ctrl+Alt+shift+h 隐藏标识 ^!+h::hide() } ; 定义函数： 快捷增加字体颜色 addFontColor(color){ clipboard := \"\" ; 清空剪切板 Send {ctrl down}c{ctrl up} ; 复制 SendInput {TEXT} SendInput {ctrl down}v{ctrl up} ; 粘贴 If(clipboard = \"\"){ SendInput {TEXT} ; Typora 在这不会自动补充 }else{ SendInput {TEXT} SendInput {ctrl down}v{ctrl up} ; 粘贴 If(clipboard = \"\"){ SendInput {TEXT} ; Typora 在这不会自动补充 }else{ SendInput {TEXT} 2.19. 屏幕亮度/对比度 软件调节 Monitorian https://blog.csdn.net/acecandy/article/details/126058229 2.20. FreeFileSync 同步两个文件夹的文件： 1、 最新的同步给旧的 2、第一次： 如果一边空目录，则相当于镜像copy --------> 非常适合本地代码 同步给 服务器场景 （同时服务代码第一次也会copy给本地代码） 使用： 界面化：见 命令行: 需维护映射： 2.21. 屏幕分区软件MaxTo 见： I:\\working_pan\\softWare\\MaxToSetup151110 使用： https://maxto.net/zh-hans#pricing 优点： 1、自定义分区大小 2.22. 反编译工具 jadx-1.4.7 优点：1、界面化操作。拖动即解析 ​ 2、完美的把.apk向下解析了 ----> source code 2.23. scrcpy.exe 命令行方式打开： scrcpy.exe --display=4 --always-on-top --stay-awake 阻止scrcpy.一段时间后休眠： --stay-awake 模拟双指缩放： Ctrl+按住并移动鼠标 向左旋转屏幕 MOD+← (左箭头) 向右旋转屏幕 MOD+→ (右箭头) 拖放 APK 文件 从电脑安装 APK 文件 MOD是ALT键。详见： https://www.ngui.cc/zz/2053439.html?action=onClick 详细命令行参数见： 1、scrcpy.exe --help 2、https://www.ngui.cc/zz/2053439.html?action=onClick 3、本是github开源项目。 2.24. del_键盘按键坏了----- 按键替换 原理： 更改注册表（需要管理员权限） 工具： 键盘改键工具(Remapkey) 0.9.9.6 中文绿色免费版 例子：左键坏了 2.25. del----word软件---del 2.25.1. del_目录 1、基于标题：刷各个标题 -----> 形成大纲 2、大纲 ----> 目录： 引用----自定义目录-----显示级别----选项、字体 2.25.2. del_页眉 连续两页的页眉不会关联的基础： （1）分节：-------> 目的：章节内关联，章节之间独立修改 操作： 效果： （2）取消 链接到前一条页眉 2.25.3. del_页脚 连续两页的页脚 页码不会关联的基础： （1）分节，同页眉 （2） 取消 链接到前一条页眉 （3）页码 续前节 还是 ......... 2.26. Copilot 几个关键点： （1）win11 23H2 ，win11 22H2不行 https://zhuanlan.zhihu.com/p/659297001 win11 22H2升级到23H2？ （2）翻墙软件 （3）（不确定）登录Microsoft 账号。local账号不行 教程：https://www.jb51.net/os/win11/913483_all.html -------------->注：其中修改注册表操作没有做，是OK的 2.27. del_ipad 快捷键 总入口： 辅助功能 -----> 全键盘控制 -----> 命令 可以自定义 其他： 截屏 -----> Command-Shift-3 锁屏 --------> cmd + L (需自定义) 关闭chrome标签页 --------> cmd + w 快捷指令 2.28. 桌面环境KDE KDE安装 https://zhuanlan.zhihu.com/p/338666316?utm_id=0 Ubunu安装KDE桌面 2.29. KDE 防止长时间锁屏 防止锁屏： 方法一： 似乎不生效 setterm blank 0 setterm powerdown 0 xset s 0 0 方法二： Energy Saving -------》 验证OK 3. vscode 3.1. bookmark使用： vscode的Bookmarks如何使用？_vscode bookmarks-CSDN博客 定义的快捷键： 标记： 显示 取消 取消所有 3.2. 远程ssh vscode ssh看code（TODO:扩展） 教程：https://blog.csdn.net/qq_50714222/article/details/136528536?utm_medium=distribute.pc_feed_404.none-task-blog-2~default~BlogCommendFromBaidu~activity-4-136528536-blog-null.262^v1^pc_404_mixedpudn&depth_1-utm_source=distribute.pc_feed_404.none-task-blog-2~default~BlogCommendFromBaidu~activity-4-136528536-blog-null.262^v1^pc_404_mixedpud --------> 可以免密 https://zhuanlan.zhihu.com/p/667236864 VSCode配置 SSH连接远程服务器+免密连接教程 好处：能使用本地软件 且 不受本地加密软件影响 免密（优）：关键步骤 ------------------- 验证OK win侧： C:\\Users\\Administrator> ssh-keygen -t rsa -b 2048 -f C:\\Users\\Administrator\\.ssh\\id_rsa_windows 生成两个文件：id_rsa_windows 和 id_rsa_windows.pub 1、前者填写到win 对应的vscode ssh配置里： ‪//C:\\Users\\Administrator\\.ssh\\config Host 192.168.177.130 HostName 192.168.177.130 User ***********隐藏 IdentityFile \"C:\\Users\\Administrator\\.ssh\\id_rsa_windows\" 2、后者 复制到 remote的 key里 /home/liuwf/.ssh/authorized_keys 3.2.1. 免密失败 ----ssh链接调试 比如vscode ssh免密 失败 -------------------> 手动ssh链接调试： 1、server侧（linux）启动server，指定新端口2222专门用来调试 sudo /usr/sbin/sshd -d -p 2222 2、win侧（client） ssh -vvv chen@192.168.57.14 -p 2222 -i C:\\Users\\chen\\.ssh\\id_rsa 比如server侧报错： Failed publickey for chen from 10.82.228.209 port 62066 ssh2: RSA SHA256:4WkV2bdDoAzKxAzQ7FGHku77yeNWlMu1evMbXyD+Oj0 ---------> publickey出错了：从windows copy id_rsa.pub 到authorized_keys中 比如server侧报错： Authentication refused: bad ownership or modes for file /home/chen/.ssh/authorized_keys ----------> 权限不对，.ssh目录相关权限：https://blog.csdn.net/m0_46093121/article/details/124758723 参考： VSCode SSH免密登录失败原因 原因分析及解决 ssh设置免密登录后登录仍需密码可能的原因，以及 ssh 出问题或的调试方法 【免密登录】Vscode 免密登录 SSH 失败 3.3. 设置导出 todo 云同步设置 https://www.cnblogs.com/HDWdemo/p/13308309.html 手动 手动复制设置文件 3.4. 快捷键 最近文件： Ctrl + E 查看全局符号 Ctrl + T 查看当前file的符号 Ctrl + Shift + O bookmark: Shift + ALT + + K Ctrl + P 打开指定文件 Ctrl + G 跳转指定行 F8 高亮 向前、后: alt+左右 Ctrl + -------> 放大字体 当前页面查找：Ctrl + F 技巧: 工作区—--> 查找符号引用会减少 隐藏文件夹 符号调用栈 查找函数调用 3.5. 大纲 法一： crtl + Shift + O （优） ----------> 1、 顶部临时显示本文件的大纲 ​ 2、可以搜索 法二 大纲面板： 参考：vscode左下角显示大纲? vscode显示所有函数方法编程开发软件教程_脚本之家 (jb51.net) 3.6. 与SI的优势对比 比SI更优的地方： 1、远程ssh打开 ---------> 避免了本地加密软件问题 2、不依赖于samba，只需要ssh即可 3、远程同步配置（包括快捷键） 3、各种插件 4、可以一点点添加目录！！！！按需添加 5、多个符号高亮的插件 MultiHighlight SI优势： 1、同时 java + cpp 混合代码 -------> 适合安卓代码 2、可以一点点添加目录！！！！按需添加 ！！！适合大工程 3、占用内存极小！！ 3.6.1. 可以显示代码调用栈显示 AS 有同样的Hierarchy 3.7. vscode 可以一点点添加目录！！！！按需添加 教程： 建立工作区，配置文件过滤 【工具】vscode搜索结果及工程目录的文件夹、文件的排除 // aosp14.code-workspace { \"folders\": [ { \"path\": \".\" } ], \"settings\": { \"files.exclude\": { \"art/\" :true, \"bionic/\" :true, \"bootable/\" :true, \"build/\" :true, \"cts/\" :true, \"dalvik/\" :true, \"developers/\" :true, \"development/\" :true, \"device/\" :true, \"external/\" :true, \"git-repo/\" :true, \"hardware/\" :true, \"kernel/\" :true, \"libcore/\" :true, \"libnativehelper/\" :true, \"packages/\" :true, \"pdk/\" :true, \"platform_testing/\" :true, \"prebuilts/\" :true, \"sdk/\" :true, \"system/\" :true, \"test/\" :true, \"toolchain/\" :true, \"tools/\" :true, \"TRACE_FILE/\" :true } } } 3.8. vscode好用的插件 1、多个符号高亮的插件 MultiHighlight 注意：可以修改keyMap （keyMap中搜索 MultiHighlight） 2、Git Blame 推荐几个 VSCode 中的 Git Blame 插件 -----> 较优：GitLens 参考： https://blog.51cto.com/englyf/6429156 3.8.1. 其他插件： https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&mid=2247616586&idx=1&sn=3219c2a691ccc15abbb5dafa09fc6a2f&chksm=fb54eaa6cc2363b0db06ae00879b4bccb5d296b8fdff93dd9d073eb102540b0bf97433e2a1de&scene=27 60 个神级 VS Code 插件！ 3.9. 问题 3.9.1. 常见的函数都无法跳转了 ------ 索引库坏了 解决办法： 强制重新编译，建立索引（删除.vscode） 3.10. 其他 编译环境的搭建： https://chowdera.com/2020/12/20201229202248553i.html https://code.visualstudio.com/docs/languages/cpp 官方文档 AddressSanitizer工具 https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-170 高亮变量: vscode的highlight-words： https://blog.csdn.net/u013171226/article/details/108868425 ​ TODO: Ubutu上安装vscode，并搭建Frame native断点调试环境 : https://www.jianshu.com/p/d84a2ec948be 使用VsCode调试Android Framework C/C++源代码 https://blog.csdn.net/zhaojia92/article/details/99774704 3.10.1. 补充 vscode vscode可以断点调试bin：（确定可以） 指定bin路径 参考： https://blog.csdn.net/weixin_39258979/article/details/111292273 -------------------> TODO: 还未验证 4. 计算机其他问题及设置 4.1. 软件最优的使用方式----免安装 有很多优点： 1、一次破解，终生使用 2、一台机器安装，所有机器都可以使用 3、规避安装需要管理员权限（不需要安装） 4、越过安装复杂的流程 5、可以放在任意盘里，即使U盘 ---------------------> 平时记得把大型复杂的软件都保存成免安装软件 4.2. 删除文件/文件夹，有进程正在占用 比如： 删除H:\\docker_install\\DockerDesktop\\DockerDesktop.vhdx 出现报错：文件被占用 方法： 在Handles中搜索 DockerDesktop.vhdx （很有可能搜不到，因为handle的是上一层文件夹、上上一层文件夹） 如果不行，搜索上一级 DockerDesktop 4.3. 蓝牙设备添加 4.4. 磁盘修复及优化 1、修复： 参照： https://www.reneelab.com.cn/m/external-hard-drive-repair-software.html // cmd， x盘符 chkdsk X: /r /f 2、优化： 4.5. 装最纯净的win10系统 https://zhuanlan.zhihu.com/p/219902401?utm_source=wechat_session 为什么要用最纯净的win? 1、稳定，驱动没有被其他软件更新过，不容易蓝屏 2、很干净，cpu使用率极低： 4.6. 常见最优设置 4.6.1. 剪切板，多个历史 复制值 优： 剪切板，多个历史 复制值 选择粘贴： 4.6.2. 双屏，次屏幕隐藏任务栏 空间更大 4.7. 垃圾 目前没有完成的磁盘： H盘 4.8. 蓝屏问题 1、用纯净的系统，不要更新驱动 2、磁盘修复 3、超频有可能造成蓝屏 4、硬件问题 4.9. win磁盘空间不够 4.9.1. 查找磁盘大文件 各种软件会告诉你的c盘容量被什么吃掉了 ---------------> 虽然一键瘦身 要会员。。。但是指明了 磁盘没空间的原因，一个个解就好 4.9.2. 金山毒霸的清理磁盘垃圾------> 很有效 4.9.3. 更改虚拟内存为E盘 释放c盘空间 https://www.rstk.cn/news/730355.html?action=onClick 4.10. 电脑wifi经常掉 wifi的驱动，禁止关闭 4.11. 网络较慢 1、360安全卫士解决一下 2、使用外置的无线网卡。记得控制面板里选择 3、使用 ipv4，关闭ipv6 4.12. 关于HDMI连接 无响应 很可能是HDMI驱动出了问题 不一定是硬件问题 4.13. 网页视频音量太小 Volume Booster 4.14. 远程桌面 4.14.1. 远程电脑 访问 本地电脑磁盘的方法 方法一：将本地的 磁盘driver 挂到远程电脑上 效果：H盘挂过来 注意： 可以直挂部分磁盘 方法二： 共享文件夹 4.15. 技巧：手机与电脑连局域网---尽量用电脑分享 避免拿手机，造成频繁断链 教程：https://jingyan.baidu.com/article/f71d6037a838145bb741d14a.html 5. 格式 折叠 网站上显示能折叠图片 其他折叠： 点击显示答案 折叠图片不是太方便。。。。适合折叠文字 Want to ruin the surprise? Well, you asked for it! console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/sourceInsight.html":{"url":"Tool/sourceInsight.html","title":"Source Insight","keywords":"","body":"1. 目录2. source insight2.1. 优缺点：2.2. 新建项目2.2.1. 随时按需添加/移除2.2.2. add文件之后一定要sync，才能跳转2.3. 优点之 增量添加文件--------增量解析2.4. cpp文件大部分函数无法跳转（部分宏无法识别导致的）2.5. 最优界面2.6. 搜索2.6.1. 文本搜索-------当前文件中 Ctrl + F2.6.2. 文本搜索-------全局2.6.3. 文本搜索------- 在指定路径中2.6.4. symbols搜索2.6.5. 结果的快速跳转2.7. del_替换 Ctrl + R2.8. 搜继承关系：2.8.1. 类的家族图谱2.9. 搜继承关系（从函数角度）：2.10. source insight字体颜色2.11. 新版功能：2.12. search Bar保留2.13. 选中高亮：2.14. 高亮多个word2.15. 快捷键：2.15.1. 多行注释2.15.2. recent file：2.15.3. 查看调用点2.15.4. Go Back & Go Forward2.15.5. 快捷键设置：2.15.6. 参考：2.16. 查找关键字2.17. 跳转 之 Bookmarks2.18. 大纲 ------- 代码 相互快速跳转2.19. 大纲------代码------被引用点 三者同步显示2.20. code大纲-------只看有哪些方法2.21. 代码折叠：2.22. 调用栈2.22.1. 调用栈深度2.22.2. del_化简之调用栈2.22.3. 锁定调用栈，锁定关注：2.23. 关闭overview2.24. 查看当前文件所处的位置2.25. del_安装2.25.1. Source Insight 试用过期，激活2.26. 保存-----最优界面 和 设置2.27. 编辑格式：2.28. 新版功能：2.29. 参考：3. TODO3.1. 无法识别cpp STL标准库：------> 似乎无法解决4. 基本设置：4.1. Tab 键为4个空格4.2. 换行符改为unix/linux格式：4.3. 背景色设置5. del_linux下使用 Source Insight source insight 优缺点： 新建项目 随时按需添加/移除 add文件之后一定要sync，才能跳转 优点之 增量添加文件--------增量解析 cpp文件大部分函数无法跳转（部分宏无法识别导致的） 最优界面 搜索 文本搜索-------当前文件中 Ctrl + F 文本搜索-------全局 文本搜索------- 在指定路径中 symbols搜索 结果的快速跳转 del_替换 Ctrl + R 搜继承关系： 类的家族图谱 搜继承关系（从函数角度）： source insight字体颜色 新版功能： search Bar保留 选中高亮： 高亮多个word 快捷键： 多行注释 recent file： 查看调用点 Go Back & Go Forward 快捷键设置： 参考： 查找关键字 跳转 之 Bookmarks 大纲 ------- 代码 相互快速跳转 大纲------代码------被引用点 三者同步显示 code大纲-------只看有哪些方法 代码折叠： 调用栈 调用栈深度 del_化简之调用栈 锁定调用栈，锁定关注： 关闭overview 查看当前文件所处的位置 del_安装 Source Insight 试用过期，激活 保存-----最优界面 和 设置 编辑格式： 新版功能： 参考： TODO 无法识别cpp STL标准库：------> 似乎无法解决 基本设置： Tab 键为4个空格 换行符改为unix/linux格式： 背景色设置 del_linux下使用 Source Insight 1. 目录 2. source insight 2.1. 优缺点： 优点： 1、极优：可以source 两个完全不同路径下的代码 （自然，可以取整个aosp多个小部分代码）。AS的source code 必须在工程目录下！！！ 2、内存使用是AS的二十分之一 极优 3、导入整个framework代码，才占100M ----------> 太优秀了 所以，一下子，可以导入整个framework（只是可能搜索的范围大了一些） 3、可以同时java和cpp同时跳转！ 极优 4、不需要像AS与clion，需要事先搭建一个可以编译环境，然后copy代码 5、对于远程服务器代码，不需要copy！！！！（由第一点决定！！！） 极优 6、看代码大杀器-----java、cpp、c同时OK 7、在看代码的过程中，可以随时添加source 文件，以及remove 部分文件（比如test目录）-----> 优秀 ​ 缺点： 断点调试不行？------> 办法：与AS结合使用！ 2.2. 新建项目 参考：https://blog.csdn.net/zyhse/article/details/122966714 注意： 这里是服务器目录（代码目录），可以与工程目录，不是同一个，非常优 2.2.1. 随时按需添加/移除 --------------> 过程中，随时添加： 移除： 2.2.2. add文件之后一定要sync，才能跳转 重点： 1、需要sync(否则，两个文件之间无法跳转) 2、第一次解析所有文件，否则有些不能跳转： 2.3. 优点之 增量添加文件--------增量解析 缩短解析时间： 增量添加文件后，只需要对adding fies进行解析即可，快！！！ 2.4. cpp文件大部分函数无法跳转（部分宏无法识别导致的） 现象：部分函数和类 是黑色的，无法跳转（但是存在这个类以及函数） -根因：SI不识别部分宏，误认为是函数 -------------> 导致整个文件无法解析，大量黑色！！！ 比如：上面的ANDROID_SINGLETON_STATIC_INSTANCE 方法一（不好）： 缺点： 1、修改后，该文件可以跳转，但会造成其他文件不可跳转 ​ 2、不是正规做法：cpp依赖namespace 参考：source insight解决对namespace不友好的办法 方法二： 根因是不能识别宏，告诉SI这不是宏------------>注释掉有问题的宏 小缺点：必须修改源码 ---------> 当SI打开的是 正在编译的源码，就编译不过 ​ 则：需要copy一份代码修改 方法三(极优)： 根因是不能识别宏，告诉SI这是宏------------>C.tom 文件中说明 // C:\\Users\\Administrator\\Documents\\Source Insight 4.0\\C.tom ; Misc下新增 ANDROID_SINGLETON_STATIC_INSTANCE 具体C.tom展开 ; C Token Macros ; These macros are expanded by Source Insight prior to parsing C and C++ files. ; AtlCom Property Map BEGIN_PROPERTY_MAP(theClass) BEGIN_PROP_MAP(theClass) PROP_ENTRY(szDesc, dispid, clsid) PROP_ENTRY_EX(szDesc, dispid, clsid, iidDispatch) PROP_PAGE(clsid) PROP_DATA_ENTRY(szDesc, member, vt) END_PROPERTY_MAP() END_PROP_MAP() ; COM Map BEGIN_COM_MAP(x) DECLARE_GET_CONTROLLING_UNKNOWN() _ATL_IIDOF(x) COM_INTERFACE_ENTRY_BREAK(x) COM_INTERFACE_ENTRY_NOINTERFACE(x) COM_INTERFACE_ENTRY(x) COM_INTERFACE_ENTRY_IID(iid, x) COM_INTERFACE_ENTRY_IMPL(x) COM_INTERFACE_ENTRY_IMPL_IID(iid, x) COM_INTERFACE_ENTRY2(x, x2) COM_INTERFACE_ENTRY2_IID(iid, x, x2) COM_INTERFACE_ENTRY_FUNC(iid, dw, func) COM_INTERFACE_ENTRY_FUNC_BLIND(dw, func) COM_INTERFACE_ENTRY_TEAR_OFF(iid, x) COM_INTERFACE_ENTRY_CACHED_TEAR_OFF(iid, x, punk) COM_INTERFACE_ENTRY_AGGREGATE(iid, punk) COM_INTERFACE_ENTRY_AGGREGATE_BLIND(punk) COM_INTERFACE_ENTRY_AUTOAGGREGATE(iid, punk, clsid) COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND(punk, clsid) COM_INTERFACE_ENTRY_CHAIN(classname) END_COM_MAP() BEGIN_CATEGORY_MAP(x) IMPLEMENTED_CATEGORY( catid ) REQUIRED_CATEGORY( catid ) END_CATEGORY_MAP() BEGIN_OBJECT_MAP(x) END_OBJECT_MAP() OBJECT_ENTRY(clsid, class) OBJECT_ENTRY_NON_CREATEABLE(class) DECLARE_CLASSFACTORY_SINGLETON(obj) DECLARE_OBJECT_DESCRIPTION(x) DECLARE_NO_REGISTRY() DECLARE_REGISTRY(class, pid, vpid, nid, flags) DECLARE_REGISTRY_RESOURCE(x) DECLARE_REGISTRY_RESOURCEID(x) DECLARE_STATIC_REGISTRY_RESOURCE(x) DECLARE_STATIC_REGISTRY_RESOURCEID(x) BEGIN_SERVICE_MAP(x) SERVICE_ENTRY(x) SERVICE_ENTRY_CHAIN(x) END_SERVICE_MAP() BEGIN_SINK_MAP(_class) SINK_ENTRY_INFO(id, iid, dispid, fn, info) SINK_ENTRY_EX(id, iid, dispid, fn) SINK_ENTRY(id, dispid, fn) END_SINK_MAP() ; GNU Stuff __attribute__(x) ; Misc __declspec(name) __RPC_FAR CALLBACK EXPORT FAR far FASTCALL __fastcall NEAR PASCAL SIZE_T_MAX UINT_MAX UNALIGNED ATL_NO_VTABLE AFX_API_EXPORT AFX_API_IMPORT AFX_CDECL __cdecl AFX_CLASS_EXPORT AFX_CLASS_IMPORT AFX_COMDAT AFX_CORE_DATA AFX_CORE_DATADEF AFX_DATA AFX_DATA_EXPORT AFX_DATA_IMPORT AFX_DATADEF AFX_DB_DATA AFX_DB_DATADEF AFX_EXPORT EXPORT AFX_EXT_API AFX_EXT_CLASS AFX_EXT_DATA AFX_EXT_DATADEF AFX_NET_DATA AFX_NET_DATADEF AFX_NOVTABLE AFX_OLE_DATA AFX_OLE_DATADEF AFX_STATIC extern AFX_STATIC_DATA extern AFXAPI __stdcall AFXOLEAPI __stdcall BASED_CODE BASED_DEBUG BASED_STACK BEGIN_DUAL_INTERFACE_PART(localClass, baseClass) class X##localClass : public baseClass { public: BEGIN_COM_MAP(X##localClass, localClass) COM_INTERFACE_ENTRY (baseClass) END_COM_MAP() BEGIN_INTERFACE_PART(localClass, baseClass) class X##localClass : public baseClass { public: BEGIN_COM_MAP(X##localClass, localClass) COM_INTERFACE_ENTRY (baseClass) END_COM_MAP() public: virtual ULONG STDMETHODCALLTYPE AddRef(); virtual ULONG STDMETHODCALLTYPE Release(); virtual HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void * * ppvObj); BEGIN_CONNECTION_PART(theClass, localClass) class X##localClass : public CConnectionPoint { public: X##localClass() { m_nOffset = offsetof(theClass, m_x##localClass); } CDECL __cdecl CONNECTION_IID(iid) REFIID GetIID() { return iid; } DECLARE_AGGREGATABLE(x) DECLARE_CLASSFACTORY_EX(cf) DECLARE_CLASSFACTORY() DECLARE_CLASSFACTORY2(lic) DECLARE_CLASSFACTORY_AUTO_THREAD() DECLARE_CONNECTION_MAP() DECLARE_DISPATCH_MAP() DECLARE_DUAL_ERRORINFO() DECLARE_DYNAMIC(class_name) DECLARE_DYNCREATE(class_name) DECLARE_EMPTY_MSG_MAP() DECLARE_EVENT_MAP() DECLARE_EVENTSINK_MAP() DECLARE_HANDLE(x) typedef HANDLE x DECLARE_HANDLE32(x) DECLARE_INTERFACE(iface) interface iface DECLARE_INTERFACE_(iface, baseiface) interface iface : public baseiface DECLARE_INTERFACE_MAP() DECLARE_MAPI_INTERFACE_(iface, baseiface) interface iface : public baseiface DECLARE_MAPI_INTERFACE_PTR(iface, piface) typedef interface iface iface, FAR * piface DECLARE_MESSAGE_MAP() DECLARE_NOT_AGGREGATABLE(x) DECLARE_OLECMD_MAP() DECLARE_OLECREATE(class_name) DECLARE_OLECREATE_EX(class_name) DECLARE_OLECTLTYPE(class_name) DECLARE_OLETYPELIB(class_name) DECLARE_ONLY_AGGREGATABLE(x) DECLARE_OPAQUE32(x) DECLARE_PARSE_MAP() DECLARE_POLY_AGGREGATABLE(x) DECLARE_PROPERTY_SUPPORT(class) DECLARE_PROPPAGEIDS(class_name) DECLARE_PROTECT_FINAL_CONSTRUCT() DECLARE_REGISTRY(class, pid, vpid, nid, flags) DECLARE_REGISTRY_RESOURCE(x) DECLARE_SERIAL(class_name) DECLARE_WND_CLASS(WndClassName) DECLARE_WND_SUPERCLASS(WndClassName, OrigWndClassName) DELEGATE_DUAL_INTERFACE(objectClass, dualClass) END_CONNECTION_PART(localClass) } m_x##localClass; friend class X##localClass; END_DUAL_INTERFACE_PART(localClass) } m_x##localClass; friend class X##localClass; END_INTERFACE_PART(localClass) } m_x##localClass; friend class X##localClass; EXTERN_C extern EXTERN_PROCESS_LOCAL(class_name, ident_name) extern AFX_DATA AFX_DATADEF CProcessLocal ident_name; IMPLEMENT_DUAL_ERRORINFO(objectClass, riidSource) IMPLEMENT_DYNAMIC(class_name, base_class_name) IMPLEMENT_DYNCREATE(class_name, base_class_name) IMPLEMENT_OLECREATE(class_name, external_name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) IMPLEMENT_OLECREATE_EX(class_name, external_name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) IMPLEMENT_OLECTLTYPE(class_name, idsUserTypeName, dwOleMisc) IMPLEMENT_OLETYPELIB(class_name, tlid, wVerMajor, wVerMinor) IMPLEMENT_SERIAL(class_name, base_class_name, wSchema) INIT_INTERFACE_PART(theClass, localClass) MAPIMETHOD(method) virtual HRESULT STDMETHODCALLTYPE method MAPIMETHOD_(type, method) virtual type STDMETHODCALLTYPE method MAPIMETHOD_DECLARE(type, method, prefix) type STDMETHODCALLTYPE MIDL_INTERFACE(x) struct PROCESS_LOCAL(class_name, ident_name) AFX_DATADEF CProcessLocal ident_name; PURE = 0 STDMETHOD(method) virtual HRESULT STDMETHODCALLTYPE method STDMETHOD_(type,method) virtual type STDMETHODCALLTYPE method STDMETHODIMP_(type) type STDMETHODCALLTYPE STDMETHODIMP HRESULT STDMETHODCALLTYPE SQLOLE_HELPID(id) THIS void THIS_ TRY try { END_TRY } CATCH(class_name, e) } catch (class_name * e) { AND_CATCH(class_name, e) } catch (class_name * e) { END_CATCH } CATCH_ALL(e) } catch (CException* e) { AND_CATCH_ALL(e) } catch (CException* e) { END_CATCH_ALL } NTAPI * ANDROID_SINGLETON_STATIC_INSTANCE __success(x) SHSTDAPI SHSTDAPI_(x) __success(expr) __nullterminated __nullnullterminated __reserved __checkReturn __typefix(ctype) __override __callback __format_string __blocksOn(resource) __control_entrypoint(category) __data_entrypoint(category) ; STD Include _STD_BEGIN namespace std { _STD_END } ; _STD std:: _TRY_BEGIN try { _CATCH(x) } catch (x) { _CATCH_ALL } catch (...) { _CATCH_END } _CATCH_IO_(x) _RAISE(x) throw (x) _RERAISE throw _THROW0() throw () _THROW1(x) throw (x) _THROW(x, y) throw x(y) _BITMASK(E, T) typedef int T _BITMASK_OPS(T) _TDEF(x) = x _TDEF2(x, y) = x, y _CNTSIZ(iter) ptrdiff_t _STCONS(ty, name, val) enum {name = val} _TRY_IO_BEGIN _CATCH_IO_END _CATCH_IO_(x) ; Other Keywords volatile __packed __abstract __box __delegate __event __finally __gc __identifier __interface __nogc __pin __property __sealed __try_cast __typeof __value _packed packed ; sal.h _In_ _In_opt_ _In_z_ _In_opt_z_ _In_count_(size) _In_opt_count_(size) _In_bytecount_(size) _In_opt_bytecount_(size) _In_count_c_(size) _In_opt_count_c_(size) _In_bytecount_c_(size) _In_opt_bytecount_c_(size) _In_z_count_(size) _In_opt_z_count_(size) _In_z_bytecount_(size) _In_opt_z_bytecount_(size) _In_z_count_c_(size) _In_opt_z_count_c_(size) _In_z_bytecount_c_(size) _In_opt_z_bytecount_c_(size) _In_ptrdiff_count_(size) _In_opt_ptrdiff_count_(size) _In_count_x_(size) _In_opt_count_x_(size) _In_bytecount_x_(size) _In_opt_bytecount_x_(size) _Out_ _Out_opt_ _Out_cap_(size) _Out_opt_cap_(size) _Out_bytecap_(size) _Out_opt_bytecap_(size) _Out_cap_c_(size) _Out_opt_cap_c_(size) _Out_bytecap_c_(size) _Out_opt_bytecap_c_(size) _Out_cap_m_(mult,size) _Out_opt_cap_m_(mult,size) _Out_z_cap_m_(mult,size) _Out_opt_z_cap_m_(mult,size) _Out_ptrdiff_cap_(size) _Out_opt_ptrdiff_cap_(size) _Out_cap_x_(size) _Out_opt_cap_x_(size) _Out_bytecap_x_(size) _Out_opt_bytecap_x_(size) _Out_z_cap_(size) _Out_opt_z_cap_(size) _Out_z_bytecap_(size) _Out_opt_z_bytecap_(size) _Out_z_cap_c_(size) _Out_opt_z_cap_c_(size) _Out_z_bytecap_c_(size) _Out_opt_z_bytecap_c_(size) _Out_z_cap_x_(size) _Out_opt_z_cap_x_(size) _Out_z_bytecap_x_(size) _Out_opt_z_bytecap_x_(size) _Out_cap_post_count_(cap,count) _Out_opt_cap_post_count_(cap,count) _Out_bytecap_post_bytecount_(cap,count) _Out_opt_bytecap_post_bytecount_(cap,count) _Out_z_cap_post_count_(cap,count) _Out_opt_z_cap_post_count_(cap,count) _Out_z_bytecap_post_bytecount_(cap,count) _Out_opt_z_bytecap_post_bytecount_(cap,count) _Out_capcount_(capcount) _Out_opt_capcount_(capcount) _Out_bytecapcount_(capcount) _Out_opt_bytecapcount_(capcount) _Out_capcount_x_(capcount) _Out_opt_capcount_x_(capcount) _Out_bytecapcount_x_(capcount) _Out_opt_bytecapcount_x_(capcount) _Out_z_capcount_(capcount) _Out_opt_z_capcount_(capcount) _Out_z_bytecapcount_(capcount) _Out_opt_z_bytecapcount_(capcount) _Inout_ _Inout_opt_ _Inout_z_ _Inout_opt_z_ _Inout_count_(size) _Inout_opt_count_(size) _Inout_bytecount_(size) _Inout_opt_bytecount_(size) _Inout_count_c_(size) _Inout_opt_count_c_(size) _Inout_bytecount_c_(size) _Inout_opt_bytecount_c_(size) _Inout_z_count_(size) _Inout_opt_z_count_(size) _Inout_z_bytecount_(size) _Inout_opt_z_bytecount_(size) _Inout_z_count_c_(size) _Inout_opt_z_count_c_(size) _Inout_z_bytecount_c_(size) _Inout_opt_z_bytecount_c_(size) _Inout_ptrdiff_count_(size) _Inout_opt_ptrdiff_count_(size) _Inout_count_x_(size) _Inout_opt_count_x_(size) _Inout_bytecount_x_(size) _Inout_opt_bytecount_x_(size) _Inout_cap_(size) _Inout_opt_cap_(size) _Inout_bytecap_(size) _Inout_opt_bytecap_(size) _Inout_cap_c_(size) _Inout_opt_cap_c_(size) _Inout_bytecap_c_(size) _Inout_opt_bytecap_c_(size) _Inout_cap_x_(size) _Inout_opt_cap_x_(size) _Inout_bytecap_x_(size) _Inout_opt_bytecap_x_(size) _Inout_z_cap_(size) _Inout_opt_z_cap_(size) _Inout_z_bytecap_(size) _Inout_opt_z_bytecap_(size) _Inout_z_cap_c_(size) _Inout_opt_z_cap_c_(size) _Inout_z_bytecap_c_(size) _Inout_opt_z_bytecap_c_(size) _Inout_z_cap_x_(size) _Inout_opt_z_cap_x_(size) _Inout_z_bytecap_x_(size) _Inout_opt_z_bytecap_x_(size) _Ret_ _Ret_opt_ _Deref_out_ _Deref_out_opt_ _Deref_opt_out_ _Deref_opt_out_opt_ _Deref_out_z_ _Deref_out_opt_z_ _Deref_opt_out_z_ _Deref_opt_out_opt_z_ _Check_return_ _Printf_format_string_ _Scanf_format_string_ _Scanf_s_format_string_ _FormatMessage_format_string_ _Success_(expr) _In_bound_ _Out_bound_ _Ret_bound_ _Deref_in_bound_ _Deref_out_bound_ _Deref_inout_bound_ _Deref_ret_bound_ _In_range_(lb,ub) _Out_range_(lb,ub) _Ret_range_(lb,ub) _Deref_in_range_(lb,ub) _Deref_out_range_(lb,ub) _Deref_ret_range_(lb,ub) _Pre_z_ _Pre_opt_z_ _Pre_cap_(size) _Pre_opt_cap_(size) _Pre_bytecap_(size) _Pre_opt_bytecap_(size) _Pre_cap_c_(size) _Pre_opt_cap_c_(size) _Pre_bytecap_c_(size) _Pre_opt_bytecap_c_(size) _Pre_cap_m_(mult,size) _Pre_opt_cap_m_(mult,size) _Pre_cap_for_(param) _Pre_opt_cap_for_(param) _Pre_cap_x_(size) _Pre_opt_cap_x_(size) _Pre_bytecap_x_(size) _Pre_opt_bytecap_x_(size) _Pre_ptrdiff_cap_(ptr) _Pre_opt_ptrdiff_cap_(ptr) _Pre_z_cap_(size) _Pre_opt_z_cap_(size) _Pre_z_bytecap_(size) _Pre_opt_z_bytecap_(size) _Pre_z_cap_c_(size) _Pre_opt_z_cap_c_(size) _Pre_z_bytecap_c_(size) _Pre_opt_z_bytecap_c_(size) _Pre_z_cap_x_(size) _Pre_opt_z_cap_x_(size) _Pre_z_bytecap_x_(size) _Pre_opt_z_bytecap_x_(size) _Pre_valid_cap_(size) _Pre_opt_valid_cap_(size) _Pre_valid_bytecap_(size) _Pre_opt_valid_bytecap_(size) _Pre_valid_cap_c_(size) _Pre_opt_valid_cap_c_(size) _Pre_valid_bytecap_c_(size) _Pre_opt_valid_bytecap_c_(size) _Pre_valid_cap_x_(size) _Pre_opt_valid_cap_x_(size) _Pre_valid_bytecap_x_(size) _Pre_opt_valid_bytecap_x_(size) _Pre_count_(size) _Pre_opt_count_(size) _Pre_bytecount_(size) _Pre_opt_bytecount_(size) _Pre_count_c_(size) _Pre_opt_count_c_(size) _Pre_bytecount_c_(size) _Pre_opt_bytecount_c_(size) _Pre_count_x_(size) _Pre_opt_count_x_(size) _Pre_bytecount_x_(size) _Pre_opt_bytecount_x_(size) _Pre_ptrdiff_count_(ptr) _Pre_opt_ptrdiff_count_(ptr) _Pre_valid_ _Pre_opt_valid_ _Pre_invalid_ _Pre_notnull_ _Pre_maybenull_ _Pre_null_ _Pre_readonly_ _Pre_writeonly_ _Post_z_ _Post_maybez_ _Post_cap_(size) _Post_bytecap_(size) _Post_count_(size) _Post_bytecount_(size) _Post_count_c_(size) _Post_bytecount_c_(size) _Post_count_x_(size) _Post_bytecount_x_(size) _Post_z_count_(size) _Post_z_bytecount_(size) _Post_z_count_c_(size) _Post_z_bytecount_c_(size) _Post_z_count_x_(size) _Post_z_bytecount_x_(size) _Post_ptr_invalid_ _Post_valid_ _Post_invalid_ _Post_notnull_ _Ret_z_ _Ret_opt_z_ _Ret_cap_(size) _Ret_opt_cap_(size) _Ret_bytecap_(size) _Ret_opt_bytecap_(size) _Ret_cap_c_(size) _Ret_opt_cap_c_(size) _Ret_bytecap_c_(size) _Ret_opt_bytecap_c_(size) _Ret_cap_x_(size) _Ret_opt_cap_x_(size) _Ret_bytecap_x_(size) _Ret_opt_bytecap_x_(size) _Ret_z_cap_(size) _Ret_opt_z_cap_(size) _Ret_z_bytecap_(size) _Ret_opt_z_bytecap_(size) _Ret_count_(size) _Ret_opt_count_(size) _Ret_bytecount_(size) _Ret_opt_bytecount_(size) _Ret_count_c_(size) _Ret_opt_count_c_(size) _Ret_bytecount_c_(size) _Ret_opt_bytecount_c_(size) _Ret_count_x_(size) _Ret_opt_count_x_(size) _Ret_bytecount_x_(size) _Ret_opt_bytecount_x_(size) _Ret_z_count_(size) _Ret_opt_z_count_(size) _Ret_z_bytecount_(size) _Ret_opt_z_bytecount_(size) _Ret_valid_ _Ret_opt_valid_ _Ret_notnull_ _Ret_maybenull_ _Ret_null_ _Deref_pre_z_ _Deref_pre_opt_z_ _Deref_pre_cap_(size) _Deref_pre_opt_cap_(size) _Deref_pre_bytecap_(size) _Deref_pre_opt_bytecap_(size) _Deref_pre_cap_c_(size) _Deref_pre_opt_cap_c_(size) _Deref_pre_bytecap_c_(size) _Deref_pre_opt_bytecap_c_(size) _Deref_pre_cap_x_(size) _Deref_pre_opt_cap_x_(size) _Deref_pre_bytecap_x_(size) _Deref_pre_opt_bytecap_x_(size) _Deref_pre_z_cap_(size) _Deref_pre_opt_z_cap_(size) _Deref_pre_z_bytecap_(size) _Deref_pre_opt_z_bytecap_(size) _Deref_pre_z_cap_c_(size) _Deref_pre_opt_z_cap_c_(size) _Deref_pre_z_bytecap_c_(size) _Deref_pre_opt_z_bytecap_c_(size) _Deref_pre_z_cap_x_(size) _Deref_pre_opt_z_cap_x_(size) _Deref_pre_z_bytecap_x_(size) _Deref_pre_opt_z_bytecap_x_(size) _Deref_pre_valid_cap_(size) _Deref_pre_opt_valid_cap_(size) _Deref_pre_valid_bytecap_(size) _Deref_pre_opt_valid_bytecap_(size) _Deref_pre_valid_cap_c_(size) _Deref_pre_opt_valid_cap_c_(size) _Deref_pre_valid_bytecap_c_(size) _Deref_pre_opt_valid_bytecap_c_(size) _Deref_pre_valid_cap_x_(size) _Deref_pre_opt_valid_cap_x_(size) _Deref_pre_valid_bytecap_x_(size) _Deref_pre_opt_valid_bytecap_x_(size) _Deref_pre_count_(size) _Deref_pre_opt_count_(size) _Deref_pre_bytecount_(size) _Deref_pre_opt_bytecount_(size) _Deref_pre_count_c_(size) _Deref_pre_opt_count_c_(size) _Deref_pre_bytecount_c_(size) _Deref_pre_opt_bytecount_c_(size) _Deref_pre_count_x_(size) _Deref_pre_opt_count_x_(size) _Deref_pre_bytecount_x_(size) _Deref_pre_opt_bytecount_x_(size) _Deref_pre_valid_ _Deref_pre_opt_valid_ _Deref_pre_invalid_ _Deref_pre_notnull_ _Deref_pre_maybenull_ _Deref_pre_null_ _Deref_pre_readonly_ _Deref_pre_writeonly_ _Deref_post_z_ _Deref_post_opt_z_ _Deref_post_cap_(size) _Deref_post_opt_cap_(size) _Deref_post_bytecap_(size) _Deref_post_opt_bytecap_(size) _Deref_post_cap_c_(size) _Deref_post_opt_cap_c_(size) _Deref_post_bytecap_c_(size) _Deref_post_opt_bytecap_c_(size) _Deref_post_cap_x_(size) _Deref_post_opt_cap_x_(size) _Deref_post_bytecap_x_(size) _Deref_post_opt_bytecap_x_(size) _Deref_post_z_cap_(size) _Deref_post_opt_z_cap_(size) _Deref_post_z_bytecap_(size) _Deref_post_opt_z_bytecap_(size) _Deref_post_z_cap_c_(size) _Deref_post_opt_z_cap_c_(size) _Deref_post_z_bytecap_c_(size) _Deref_post_opt_z_bytecap_c_(size) _Deref_post_z_cap_x_(size) _Deref_post_opt_z_cap_x_(size) _Deref_post_z_bytecap_x_(size) _Deref_post_opt_z_bytecap_x_(size) _Deref_post_valid_cap_(size) _Deref_post_opt_valid_cap_(size) _Deref_post_valid_bytecap_(size) _Deref_post_opt_valid_bytecap_(size) _Deref_post_valid_cap_c_(size) _Deref_post_opt_valid_cap_c_(size) _Deref_post_valid_bytecap_c_(size) _Deref_post_opt_valid_bytecap_c_(size) _Deref_post_valid_cap_x_(size) _Deref_post_opt_valid_cap_x_(size) _Deref_post_valid_bytecap_x_(size) _Deref_post_opt_valid_bytecap_x_(size) _Deref_post_count_(size) _Deref_post_opt_count_(size) _Deref_post_bytecount_(size) _Deref_post_opt_bytecount_(size) _Deref_post_count_c_(size) _Deref_post_opt_count_c_(size) _Deref_post_bytecount_c_(size) _Deref_post_opt_bytecount_c_(size) _Deref_post_count_x_(size) _Deref_post_opt_count_x_(size) _Deref_post_bytecount_x_(size) _Deref_post_opt_bytecount_x_(size) _Deref_post_valid_ _Deref_post_opt_valid_ _Deref_post_notnull_ _Deref_post_maybenull_ _Deref_post_null_ _Deref_ret_z_ _Deref_ret_opt_z_ _Deref2_pre_readonly_ _Deref2_pre1_impl_(_$readaccess) _Prepost_z_ _Prepost_opt_z_ _Prepost_count_(size) _Prepost_opt_count_(size) _Prepost_bytecount_(size) _Prepost_opt_bytecount_(size) _Prepost_count_c_(size) _Prepost_opt_count_c_(size) _Prepost_bytecount_c_(size) _Prepost_opt_bytecount_c_(size) _Prepost_count_x_(size) _Prepost_opt_count_x_(size) _Prepost_bytecount_x_(size) _Prepost_opt_bytecount_x_(size) _Prepost_valid_ _Prepost_opt_valid_ _Deref_prepost_z_ _Deref_prepost_opt_z_ _Deref_prepost_cap_(size) _Deref_prepost_opt_cap_(size) _Deref_prepost_bytecap_(size) _Deref_prepost_opt_bytecap_(size) _Deref_prepost_cap_x_(size) _Deref_prepost_opt_cap_x_(size) _Deref_prepost_bytecap_x_(size) _Deref_prepost_opt_bytecap_x_(size) _Deref_prepost_z_cap_(size) _Deref_prepost_opt_z_cap_(size) _Deref_prepost_z_bytecap_(size) _Deref_prepost_opt_z_bytecap_(size) _Deref_prepost_valid_cap_(size) _Deref_prepost_opt_valid_cap_(size) _Deref_prepost_valid_bytecap_(size) _Deref_prepost_opt_valid_bytecap_(size) _Deref_prepost_valid_cap_x_(size) _Deref_prepost_opt_valid_cap_x_(size) _Deref_prepost_valid_bytecap_x_(size) _Deref_prepost_opt_valid_bytecap_x_(size) _Deref_prepost_count_(size) _Deref_prepost_opt_count_(size) _Deref_prepost_bytecount_(size) _Deref_prepost_opt_bytecount_(size) _Deref_prepost_count_x_(size) _Deref_prepost_opt_count_x_(size) _Deref_prepost_bytecount_x_(size) _Deref_prepost_opt_bytecount_x_(size) _Deref_prepost_valid_ _Deref_prepost_opt_valid_ _Deref_out_z_cap_c_(size) _Deref_inout_z_cap_c_(size) _Deref_out_z_bytecap_c_(size) _Deref_inout_z_bytecap_c_(size) _Deref_inout_z_ _Check_return_impl_ _Success_impl_(expr) _Printf_format_string_impl_ _Scanf_format_string_impl_ _Scanf_s_format_string_impl_ _In_bound_impl_ _Out_bound_impl_ _Ret_bound_impl_ _Deref_in_bound_impl_ _Deref_out_bound_impl_ _Deref_ret_bound_impl_ _In_range_impl_(min,max) _Out_range_impl_(min,max) _Ret_range_impl_(min,max) _Deref_in_range_impl_(min,max) _Deref_out_range_impl_(min,max) _Deref_ret_range_impl_(min,max) _$valid _$maybevalid _$notvalid _$null _$maybenull _$notnull _$zterm _$maybezterm _$notzterm _$readaccess _$writeaccess _$cap(size) _$cap_c(size) _$cap_for(param) _$cap_x(size) _$bytecap(size) _$bytecap_c(size) _$bytecap_x(size) _$mult(mult,size) _$count(size) _$count_c(size) _$count_x(size) _$bytecount(size) _$bytecount_c(size) _$bytecount_x(size) _Pre1_impl_(p1) _Pre2_impl_(p1,p2) _Pre3_impl_(p1,p2,p3) _Post1_impl_(p1) _Post2_impl_(p1,p2) _Post3_impl_(p1,p2,p3) _Ret1_impl_(p1) _Ret2_impl_(p1,p2) _Ret3_impl_(p1,p2,p3) _Deref_pre1_impl_(p1) _Deref_pre2_impl_(p1,p2) _Deref_pre3_impl_(p1,p2,p3) _Deref_post1_impl_(p1) _Deref_post2_impl_(p1,p2) _Deref_post3_impl_(p1,p2,p3) _Deref_ret1_impl_(p1) _Deref_ret2_impl_(p1,p2) _Deref_ret3_impl_(p1,p2,p3) _Deref2_pre1_impl_(p1) _Deref2_post1_impl_(p1) _Deref2_ret1_impl_(p1) _$SPECSTRIZE( x ) _Check_return_impl_ _Success_impl_(expr) _Printf_format_string_impl_ _Scanf_format_string_impl_ _Scanf_s_format_string_impl_ _In_bound_impl_ _Out_bound_impl_ _Ret_bound_impl_ _Deref_in_bound_impl_ _Deref_out_bound_impl_ _Deref_ret_bound_impl_ _In_range_impl_(min,max) _Out_range_impl_(min,max) _Ret_range_impl_(min,max) _Deref_in_range_impl_(min,max) _Deref_out_range_impl_(min,max) _Deref_ret_range_impl_(min,max) _$valid _$maybevalid _$notvalid _$null _$maybenull _$notnull _$zterm _$maybezterm _$notzterm _$readaccess _$writeaccess _$cap(size) _$cap_c(size) _$cap_for(param) _$cap_x(size) _$bytecap(size) _$bytecap_c(size) _$bytecap_x(size) _$mult(mult,size) _$count(size) _$count_c(size) _$count_x(size) _$bytecount(size) _$bytecount_c(size) _$bytecount_x(size) _$pre _$post _$deref_pre _$deref_post _$bound _$range(min,max) _Pre1_impl_(p1) _Pre2_impl_(p1,p2) _Pre3_impl_(p1,p2,p3) _Post1_impl_(p1) _Post2_impl_(p1,p2) _Post3_impl_(p1,p2,p3) _Ret1_impl_(p1) _Ret2_impl_(p1,p2) _Ret3_impl_(p1,p2,p3) _Deref_pre1_impl_(p1) _Deref_pre2_impl_(p1,p2) _Deref_pre3_impl_(p1,p2,p3) _Deref_post1_impl_(p1) _Deref_post2_impl_(p1,p2) _Deref_post3_impl_(p1,p2,p3) _Deref_ret1_impl_(p1) _Deref_ret2_impl_(p1,p2) _Deref_ret3_impl_(p1,p2,p3) _Deref2_pre1_impl_(p1) _Deref2_post1_impl_(p1) _Deref2_ret1_impl_(p1) _STL_DISABLE_CLANG_WARNINGS _STL_DISABLE_DEPRECATED_WARNING _STL_RESTORE_DEPRECATED_WARNING 参考： source insight无法识别函数定义 ---------> 好文！ sourceinsight函数跳转问题_sourceinsight不跳转到定义-CSDN博客 ---> 修改 C.tom Source Insight解析Linux内核的c.tom文件内容 Source Insight自定义解析 2.5. 最优界面 一个好的布局界面，应该同时展现各个结构： 1、目录结构 2、类结构 3、调用结构-----2层 2.6. 搜索 2.6.1. 文本搜索-------当前文件中 Ctrl + F 快捷键：Ctrl + F 缺点： 很慢 优点： 但是各类文件会被搜索得到 2.6.2. 文本搜索-------全局 2.6.3. 文本搜索------- 在指定路径中 1、先选中要搜索的内容 ---------> ctrl + shift + F 2、填写路径名+ Enter键 3、最后点击search 2.6.4. symbols搜索 方法一：优： 1、非常快 2、还可以限制文件 方法二： TODO： 两种方法是什么区别呢？ 2.6.5. 结果的快速跳转 当前file的跳转： 技巧： 搜索结果的快速跳转 规定快捷键： 设置为F8和F9 2.7. del_替换 Ctrl + R 2.8. 搜继承关系： （1）向上： 搜TouchInputRedirection父类 法一：左键点击TouchInputRedirection --------> 在relation window会显示父类 （优选） 法二：看TouchInputRedirection的.h文件 法三： TouchInputRedirection : public ------> 后: public （2）向下： 搜InputDeviceHandler子类 法一：优选， 在relation window配置显示 Derived Classes (不能同时看到向上和向下) 法二： public InputDeviceHandler ------> 前: public 2.8.1. 类的家族图谱 点击树根，会展示所有的Item类的家族图谱： 2.9. 搜继承关系（从函数角度）： 方法一： 有时候，索引不全？？？？？ TODO： 站在函数角度，如何看有没有子类去复写？ 选中函数：看关联了哪些.h -------------> 结构上： SectionParser::ParseLineSection 函数 父类、子类的.h 会关联到一起 // \\\\system\\\\core\\\\init\\\\parser.cpp 方法二： 点击父类，查看子类： 2.10. source insight字体颜色 黑色-----------不可跳转（相当于AS的红色） 2.11. 新版功能： http://www.sourceinsight.com.cn/feather.html HierarchyView的实现原理和Android设备无法使用HierarchyView的解决方法 2.12. search Bar保留 2.13. 选中高亮： 2.14. 高亮多个word 规定快捷键：F1 和 F2 2.15. 快捷键： 文本replace （当前文件）------> 修改为 ctrl + R ​ 全局替换 ----------> 修改为 ctrl + shift + R close file --------> ctrl + W copy file path -------> ctrl +shift + c ctrl + O : open这个window ​ 2.15.1. 多行注释 法一： Source Insight4.0已有多行注释功能： 注释：ctrl + / 反注释：加shift 法二：利用宏macro 快捷键： ctrl + / macro MultiLineComment() macro MultiLineComment() { hwnd = GetCurrentWnd() selection = GetWndSel(hwnd) LnFirst =GetWndSelLnFirst(hwnd) //取首行行号 LnLast =GetWndSelLnLast(hwnd) //取末行行号 hbuf = GetCurrentBuf() if(GetBufLine(hbuf, 0) ==\"//magic-number:tph85666031\"){ stop } Ln = Lnfirst buf = GetBufLine(hbuf, Ln) len = strlen(buf) while(Ln 参考： https://it.cha138.com/tech/show-390752.html https://jingyan.baidu.com/article/90808022d313a2fd91c80f93.html 2.15.2. recent file： -----> TODO：快捷键一直不生效 退而求其次的方法： 1、File menu是生效的 --------> 修改为CTRL + E 2、把 recent file至于File menu第一个，便可以键盘切换recent file 3、效果： 2.15.3. 查看调用点 或： 2.15.4. Go Back & Go Forward Navigation: Go Back : Alt+,, Thumb 1 Click Navigation: Go Forward : Alt+., Thumb 2 Click 2.15.5. 快捷键设置： 2.15.6. 参考： https://blog.csdn.net/u010835747/article/details/122859809 https://www.amobbs.com/thread-5718242-1-1.html https://zhuanlan.zhihu.com/p/33000424 2.16. 查找关键字 如果 关键字是符号 ，比较快 -------> SI之前已经做好了 如果不是，会很慢（比AS慢很多）-------> 可见，AS是加载了所有文件，而SI只是符号表 技巧： 通过左右来遍历搜索结果，不用切换到results文件 2.17. 跳转 之 Bookmarks 修改快捷键： 2.18. 大纲 ------- 代码 相互快速跳转 快速跳转下一个函数： 快速跳转到类 ： -比AS优的地方： 点击代码，大纲跟随!!!!!!!!!! TODO： 好的设计，可逆 2.19. 大纲------代码------被引用点 三者同步显示 2.20. code大纲-------只看有哪些方法 目的： 更好地看类里有哪些方法 方法： symbol window --------> 折叠类 --------> 再打开类，方法都被折叠了 双击： 2.21. 代码折叠： 操作： Options ---> preferences ---> windows ----> Outlining and Nesting ---> show outlining -强制折叠： 有些时候，代码没有主动显示折叠符号，点击： 2.22. 调用栈 2.22.1. 调用栈深度 显示2层时，比较优 参考：https://blog.csdn.net/qq_36035382/article/details/126357313 2.22.2. del_化简之调用栈 - 忽略References中.h定义文件： relation window 调用树中： 根据图标不同，忽略.h 中定义处的调用 （自然，整个分支都化简掉） 尽量用list --------> 显示得更多： 2.22.3. 锁定调用栈，锁定关注： Relation window锁定-------关注点放在重点的调用栈上 2.23. 关闭overview 2.24. 查看当前文件所处的位置 打开同级其他文件，也很方便 2.25. del_安装 2.25.1. Source Insight 试用过期，激活 参考：https://www.jianshu.com/p/0dd919d660a3 方法： 修改激活日期，修改为当天，然后就可以再用90天了 修改C:\\ProgramData\\Source Insight\\4.0的si4.lic 2.26. 保存-----最优界面 和 设置 layout保存xml 设置保存：Options -----> Loading configuration 2.27. 编辑格式： 换行符改为unix/linux格式 tab设置为4个空格 2.28. 新版功能： http://www.sourceinsight.com.cn/feather.html 2.29. 参考： https://www.dandelioncloud.cn/article/details/1578906401210855426 Source Insight 使用教程(2)——常用功能 3. TODO 3.1. 无法识别cpp STL标准库：------> 似乎无法解决 现象： 所有的std，比如vector等，都是黑的 尝试： 添加到source 或者 import External Symbols 参考： source insight 无法识别，跳转，补全 c++ std::map 官方教程，可以支持STL： 4. 基本设置： 4.1. Tab 键为4个空格 Tab width:4 4.2. 换行符改为unix/linux格式： 1：Option->Prefernces->Files 2：在倒数第二行的Default line ending选择Uinx(LF) 4.3. 背景色设置 5. del_linux下使用 Source Insight 参考：https://juejin.cn/s/linux source insight ----------> 验证ok 1、安装wine sudo apt-get install wine-stable=3.0-1ubuntu1 2.使用wine安装Source Insight 4.0 //（1） copy linux的安装包 sourceinsight40107-setup.exe到linux //（2）linux内 wine sourceinsight40107-setup.exe 3、打开： cd ~/.wine/drive_c/Program\\\\ Files\\\\ \\\\(x86\\\\)/Source\\\\ Insight\\\\ 4.0 wine sourceinsight4.exe 借助wine，运行win下的 软件 参考：https://www.sysgeek.cn/ubuntu-wine/ ---------> 好文 字体修改： 1、source Insight字体的设置： 一定要是西文 在 Ubuntu 上安装和使用 Wine，轻松运行 Windows 应用程序 - 系统极客 (sysgeek.cn) ----------> 非常优的文章 -规定： 路径里（安装路径、工程路径），无论win、linux！！！！！： 不允许有空格 & 中文 ！！！！ ---------> 害死人！！！！！ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/tmux_linux.html":{"url":"Tool/tmux_linux.html","title":"Tmux Linux","keywords":"","body":"1. 为什么要用tmux？2. 安装3. 使用3.1. 会话的结构：3.2. 第一次新建会话：3.3. 终端下，进入之前的会话3.4. 在会话环境下，切换4. 优的环境：5. 最优的环境 为什么要用tmux？ 安装 使用 会话的结构： 第一次新建会话： 终端下，进入之前的会话 在会话环境下，切换 优的环境： 最优的环境 [TOC] 1. 为什么要用tmux？ 应用场景： 通过本地终端 ---->对 远端服务器做耗时操作时（长时间编译、长时间下载） tmux作用： 1、本地的休眠、本地终端的关闭、网络的中断， 不会影响到远端 注：通过本地终端让远端执行命令: 本地终端的关闭，会终止远端的Task进程 ​ 即，本地终端 与 远端task 绑定了 2、窗口共享给其他人，可以同时看到运行的情况，比如： tmux原理： 1、远端永久运行（不存在绑定关系） 并保存 命令执行结果 2、本地端只是显示远端运行 结果 + 通过会话 发送命令 规定： 以后必须用tmux，不允许直接使用 2. 安装 sudo apt-get install tmux 3. 使用 3.1. 会话的结构： 可见， 1、有五个会话： 1、2、3、4、mySession 2、会话2下有 3个窗口 3、当前本地终端attched是会话2（注意：本地终端有两个，可以attached两个） 那么，会话和窗口，分别是什么应用场景？？？ 一个会话下，有多个窗口 ------> 有什么好处？ 弊端：要不停切换窗口，不能一直显示 3.2. 第一次新建会话： tmux new -s my_S 彻底销毁会话： //法一： tmux kill-session -t [会话名] // //法二：会话中， ctrl+d d------delete 新建窗口： ctrl+b c 3.3. 终端下，进入之前的会话 1、在终端环境中，查看有哪些会话： tmux ls 2、进入： tmux a -t [会话名] // tmux a -t mySession 退出： 3.4. 在会话环境下，切换 规律： 在会话环境下，执行任何命令，都是以 ctrl+b 为开头 切换会话： ctrl+b s 切换窗口：星号是当前 ctrl+b 1 4. 优的环境： 两个本地终端 + attached 两个会话 ------> 删除 一个本地shell -------> attach 一个会话 -------> 开两个panel 比两个本地终端优，原因：左边仍然可以看到文件夹 好的参考文章： https://blog.csdn.net/qq_52145272/article/details/127557557 5. 最优的环境 由于tmux，不容易看到过程日志 -----> 最优的环境，就是不用tmux ------> 方法： 直接让本地pc永远不休眠（适合公司电脑） console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"Tool/编译.html":{"url":"Tool/编译.html","title":"编译","keywords":"","body":"1. 目录2. cmake2.1. cmakeList编译：2.2. 编译问题--------找不到头文件2.3. 运行时2.4. 一些教程：3. yocto3.1. yocto的arm虚拟机环境 TODO3.2. yocto报错3.2.1. ERROR: Unable to connect to bitbake server, or start one (server startup failures would be in bitbake-cookerdaemon.log). cmake cmakeList编译： 编译问题--------找不到头文件 运行时 一些教程： yocto yocto的arm虚拟机环境 TODO yocto报错 ERROR: Unable to connect to bitbake server, or start one (server startup failures would be in bitbake-cookerdaemon.log). 1. 目录 2. cmake 2.1. cmakeList编译： cmake引入so 1、 .h .so 2、尽量现在附近目录搜索 3、层层向下 3 暴力链接库的方法： include_directories( ) //.h文件 target_link_libraries(${PROJECT_NAME} /usr/local/lib/libABC.so) // so文件 参考： linux知识点——CMakeLists.txt中调用自己编写的so库_cmake 链接so库-CSDN博客 注意：一般 添加一个.h引入，添加一个so引入 --------------> 保证一致 2.2. 编译问题--------找不到头文件 #include \"server-protocol.h\" 仍然找不到头文件 解决： 1、看有没有这个头文件 2、不断添加路径。让编译程序找到 #include \"protocol/wm-server-protocol.h\" 3、终极大招，万能： 添加绝对路径 2.3. 运行时 运行可执行文件，找不到so： error while loading shared libraries: libbinder.so.14: cannot open shared object file 临时解决方案： 在运行可执行文件前，设置环境变量 LD_LIBRARY_PATH 来包含所需的库路径： export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH ./your_executable --------> 验证ok 永久解决方案： 如果希望所有用户都能够在运行此可执行文件时不添加额外的环境变量，可以将该库路径添加到全局配置文件 /etc/ld.so.conf 或者创建一个新文件放入 /etc/ld.so.conf.d/ 目录下，并更新缓存： Bash 1echo \"/usr/lib64\" >> /etc/ld.so.conf.d/binder.conf 2sudo ldconfig 然后直接运行你的可执行文件即可。 重新编译可执行文件： 如果你有可执行文件的源代码，并且能够控制其编译过程，可以在编译时指定 -L/usr/lib64 选项来指定库的搜索路径，并使用 -lbinder 指定链接到 libbinder.so 库： 1gcc -o your_executable source_file.c -L/usr/lib64 -lbinder 2.4. 一些教程： https://zhuanlan.zhihu.com/p/602487280 CMake基础使用和实战详解 3. yocto 3.1. yocto的arm虚拟机环境 TODO https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html 3.2. yocto报错 3.2.1. ERROR: Unable to connect to bitbake server, or start one (server startup failures would be in bitbake-cookerdaemon.log). rm -rf ./bitbake.lock 参考： https://blog.csdn.net/hhs_1996/article/details/121316806?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-8-121316806-blog-127298856.235^v43^pc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.5&utm_relevant_index=9 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"02-编译weston.html":{"url":"02-编译weston.html","title":"02-编译weston","keywords":"","body":"1. 目录2. 首先设置环境变量3. 安装软件包4. 编译源码4.1. Wayland libraries4.2. wayland protocols4.3. libinput5. 运行weston5.1. 1）首先设置一下weston.ini配置文件5.2. 2）在命令行直接运行weston命令5.3. Reference6. https://fossies.org/ 网站 目录 首先设置环境变量 安装软件包 编译源码 Wayland libraries wayland protocols libinput weston demo 运行weston 1）首先设置一下weston.ini配置文件 2）在命令行直接运行weston命令 Reference https://fossies.org/ 网站 1. 目录 参考链接：Building Weston https://gitee.com/slamdunk1016/weston_demo.git 2. 首先设置环境变量 写个简单的set-env.sh脚本方便运行： #!/bin/bash export WLD=/home/your_user_name/work/weston/install export LD_LIBRARY_PATH=$WLD/lib/x86_64-linux-gnu export PKG_CONFIG_PATH=$WLD/lib/x86_64-linux-gnu/pkgconfig/:$WLD/share/pkgconfig/ export ACLOCAL_PATH=$WLD/share/aclocal export PATH=$WLD/bin:$PATH 3. 安装软件包 ubuntu20.04下直接sudo apt-get install即可 sudo apt install libxml2 libxml2-dev xdot xmlto libjpeg-dev libwebp-dev libsystemd-dev liblcms2-dev libegl-mesa0 libgbm-dev freerdp2-dev libx11-xcb-dev libxcb-composite0 libcolord-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpipewire-0.3-dev sudo apt install python3-pip pip3 install --user meson 4. 编译源码 目录结构主要包括以下几个部分： install是新建目录，对应第一步中环境变量$WLD，其它都是源码目录 4.1. Wayland libraries git clone https://gitlab.freedesktop.org/wayland/wayland.git cd wayland meson build/ --prefix=$WLD ninja -C build/ install cd .. 4.2. wayland protocols git clone https://gitlab.freedesktop.org/wayland/wayland-protocols.git cd wayland-protocols meson build/ --prefix=$WLD ninja -C build/ install 4.3. libinput sudo apt install libmtdev-dev libudev-dev libevdev-dev libwacom-dev check libgtk-3-dev libunwind8-dev libcairo2-dev git clone git://anongit.freedesktop.org/wayland/libinput cd libinput meson build/ --prefix=$WLD ninja -C build/ install cd .. weston demo git clone https://gitlab.freedesktop.org/wayland/weston.git cd weston meson build/ --prefix=$WLD -Dpipewire=false ninja -C build/ install cd .. 使用meson 重新配置时可以加上reconfig参数，如果没起效果最好把build目录删掉重新配置。 #$meson --reconfig build/ --prefix=$WLD -Drenderer-gl=false -Dbackend-rdp=false -Dxwayland=false -Dcolor-management-colord=false -Dremoting=false -Dpipewire=false -Dsimple-dmabuf-drm=auto 5. 运行weston 编译好的weston在install/bin/目录下： 5.1. 1）首先设置一下weston.ini配置文件 将编译出来的weston.ini文件copy到/home/.config/weston.ini weston_demo$ find -name weston.ini ./weston/build/ivi-shell/weston.ini ./weston/build/compositor/weston.ini cp ./weston/build/ivi-shell/weston.ini ~/.config/ [core] shell=ivi-shell.so modules=hmi-controller.so [ivi-shell] ivi-shell-user-interface=weston-ivi-shell-user-interface #developermode=true cursor-theme=default cursor-size=32 base-layer-id=1000 base-layer-id-offset=10000 workspace-background-layer-id=2000 workspace-layer-id=3000 application-layer-id=4000 transition-duration=300 background-image=/home/yc/work/weston/install/share/weston/background.png background-id=1001 panel-image=/home/yc/work/weston/install/share/weston/panel.png panel-id=1002 surface-id-offset=10 tiling-image=/home/yc/work/weston/install/share/weston/tiling.png tiling-id=1003 sidebyside-image=/home/yc/work/weston/install/share/weston/sidebyside.png sidebyside-id=1004 fullscreen-image=/home/yc/work/weston/install/share/weston/fullscreen.png fullscreen-id=1005 random-image=/home/yc/work/weston/install/share/weston/random.png random-id=1006 home-image=/home/yc/work/weston/install/share/weston/home.png home-id=1007 workspace-background-color=0x99000000 workspace-background-id=2001 [ivi-launcher] workspace-id=0 icon-id=4001 icon=/home/yc/work/weston/install/share/weston/icon_ivi_flower.png path=/home/yc/work/weston/install/bin/weston-flower [ivi-launcher] workspace-id=0 icon-id=4002 icon=/home/yc/work/weston/install/share/weston/icon_ivi_clickdot.png path=/home/yc/work/weston/install/bin/weston-clickdot [ivi-launcher] workspace-id=1 icon-id=4003 icon=/home/yc/work/weston/install/share/weston/icon_ivi_simple-egl.png path=/home/yc/work/weston/install/bin/weston-simple-egl [ivi-launcher] workspace-id=1 icon-id=4004 icon=/home/yc/work/weston/install/share/weston/icon_ivi_simple-shm.png path=/home/yc/work/weston/install/bin/weston-simple-shm [ivi-launcher] workspace-id=2 icon-id=4005 icon=/home/yc/work/weston/install/share/weston/icon_ivi_smoke.png path=/home/yc/work/weston/install/bin/weston-smoke [ivi-launcher] workspace-id=3 icon-id=4006 icon=/home/yc/work/weston/install/share/weston/icon_ivi_flower.png path=/home/yc/work/weston/install/bin/weston-flower [ivi-launcher] workspace-id=3 icon-id=4007 icon=/home/yc/work/weston/install/share/weston/icon_ivi_clickdot.png path=/home/yc/work/weston/install/bin/weston-clickdot [ivi-launcher] workspace-id=3 icon-id=4008 icon=/home/yc/work/weston/install/share/weston/icon_ivi_simple-egl.png path=/home/yc/work/weston/install/bin/weston-simple-egl [ivi-launcher] workspace-id=3 icon-id=4009 icon=/home/yc/work/weston/install/share/weston/icon_ivi_simple-shm.png path=/home/yc/work/weston/install/bin/weston-simple-shm [ivi-launcher] workspace-id=3 icon-id=4010 icon=/home/yc/work/weston/install/share/weston/icon_ivi_smoke.png path=/home/yc/work/weston/install/bin/weston-smoke 5.2. 2）在命令行直接运行weston命令 我这里默认使用X11作为backend： weston$ weston Date: 2022-02-28 CST [19:22:20.882] weston 10.0.90 https://wayland.freedesktop.org Bug reports to: https://gitlab.freedesktop.org/wayland/weston/issues/ Build: 10.0.0-45-g08dbd29e [19:22:20.882] Command line: weston [19:22:20.882] OS: Linux, 5.13.0-30-generic, #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022, x86_64 [19:22:20.882] Flight recorder: enabled [19:22:20.882] Using config file '/home/yc/.config/weston.ini' [19:22:20.883] Output repaint window is 7 ms maximum. [19:22:20.883] Loading module '/home/yc/work/weston/install/lib/x86_64-linux-gnu/libweston-11/x11-backend.so' [19:22:20.884] Loading module '/home/yc/work/weston/install/lib/x86_64-linux-gnu/libweston-11/gl-renderer.so' [19:22:20.887] EGL client extensions: EGL_EXT_platform_base EGL_EXT_device_base EGL_EXT_device_enumeration EGL_EXT_device_query EGL_KHR_client_get_all_proc_addresses EGL_EXT_client_extensions EGL_KHR_debug EGL_KHR_platform_x11 EGL_EXT_platform_x11 EGL_EXT_platform_device EGL_EXT_platform_wayland EGL_KHR_platform_wayland EGL_MESA_platform_xcb EGL_MESA_platform_gbm EGL_KHR_platform_gbm EGL_MESA_platform_surfaceless [19:22:20.889] EGL device extensions: EGL_NV_device_cuda EGL_EXT_device_drm EGL_EXT_device_query_name [19:22:20.889] EGL version: 1.5 [19:22:20.889] EGL vendor: NVIDIA [19:22:20.889] EGL client APIs: OpenGL_ES OpenGL [19:22:20.889] EGL extensions: EGL_EXT_buffer_age EGL_EXT_client_sync EGL_EXT_create_context_robustness EGL_EXT_image_dma_buf_import EGL_EXT_image_dma_buf_import_modifiers EGL_MESA_image_dma_buf_export EGL_EXT_output_base EGL_EXT_stream_acquire_mode EGL_EXT_sync_reuse EGL_IMG_context_priority EGL_KHR_config_attribs EGL_KHR_create_context_no_error EGL_KHR_context_flush_control EGL_KHR_create_context EGL_KHR_fence_sync EGL_KHR_get_all_proc_addresses EGL_KHR_partial_update EGL_KHR_swap_buffers_with_damage EGL_KHR_no_config_context EGL_KHR_gl_colorspace EGL_KHR_gl_renderbuffer_image EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_3D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_image EGL_KHR_image_base EGL_KHR_image_pixmap EGL_KHR_reusable_sync EGL_KHR_stream EGL_KHR_stream_attrib EGL_KHR_stream_consumer_gltexture EGL_KHR_stream_cross_process_fd EGL_KHR_stream_fifo EGL_KHR_stream_producer_eglsurface EGL_KHR_surfaceless_context EGL_KHR_wait_sync EGL_NV_nvrm_fence_sync EGL_NV_post_sub_buffer EGL_NV_quadruple_buffer EGL_NV_stream_consumer_eglimage EGL_NV_stream_cross_display EGL_NV_stream_cross_object EGL_NV_stream_cross_process EGL_NV_stream_cross_system EGL_NV_stream_dma EGL_NV_stream_flush EGL_NV_stream_metadata EGL_NV_stream_remote EGL_NV_stream_reset EGL_NV_stream_socket EGL_NV_stream_socket_inet EGL_NV_stream_socket_unix EGL_NV_stream_sync EGL_NV_stream_fifo_next EGL_NV_stream_fifo_synchronous EGL_NV_stream_consumer_gltexture_yuv EGL_NV_stream_attrib EGL_NV_stream_origin EGL_NV_system_time EGL_NV_output_drm_flip_event EGL_NV_triple_buffer EGL_NV_robustness_video_memory_purge [19:22:20.889] warning: Disabling render GPU timeline and explicit synchronization due to missing EGL_ANDROID_native_fence_sync extension [19:22:20.890] EGL_KHR_surfaceless_context available [19:22:20.918] GL version: OpenGL ES 3.2 NVIDIA 470.103.01 [19:22:20.918] GLSL version: OpenGL ES GLSL ES 3.20 [19:22:20.918] GL vendor: NVIDIA Corporation [19:22:20.918] GL renderer: NVIDIA GeForce GT 730/PCIe/SSE2 [19:22:20.918] GL extensions: GL_EXT_base_instance GL_EXT_blend_func_extended GL_EXT_blend_minmax GL_EXT_buffer_storage GL_EXT_clear_texture GL_EXT_clip_control GL_EXT_clip_cull_distance GL_EXT_color_buffer_float GL_EXT_color_buffer_half_float GL_EXT_conservative_depth GL_EXT_copy_image GL_EXT_depth_clamp GL_EXT_debug_label GL_EXT_discard_framebuffer GL_EXT_disjoint_timer_query GL_EXT_draw_buffers_indexed GL_EXT_draw_elements_base_vertex GL_EXT_EGL_image_array GL_EXT_EGL_image_storage GL_EXT_EGL_image_external_wrap_modes GL_EXT_float_blend GL_EXT_frag_depth GL_EXT_geometry_point_size GL_EXT_geometry_shader GL_EXT_gpu_shader5 GL_EXT_map_buffer_range GL_EXT_multi_draw_indirect GL_EXT_multisample_compatibility GL_EXT_multiview_texture_multisample GL_EXT_multiview_timer_query GL_EXT_occlusion_query_boolean GL_EXT_polygon_offset_clamp GL_EXT_primitive_bounding_box GL_EXT_render_snorm GL_EXT_robustness GL_EXT_separate_shader_objects GL_EXT_shader_group_vote GL_EXT_shader_implicit_conversions GL_EXT_shader_integer_mix GL_EXT_shader_io_blocks GL_EXT_shader_non_constant_global_initializers GL_EXT_shader_texture_lod GL_EXT_shadow_samplers GL_EXT_sparse_texture GL_EXT_sRGB GL_EXT_sRGB_write_control GL_EXT_tessellation_point_size GL_EXT_tessellation_shader GL_EXT_texture_border_clamp GL_EXT_texture_buffer GL_EXT_texture_compression_bptc GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_rgtc GL_EXT_texture_compression_s3tc GL_EXT_texture_cube_map_array GL_EXT_texture_filter_anisotropic GL_EXT_texture_format_BGRA8888 GL_EXT_texture_mirror_clamp_to_edge GL_EXT_texture_norm16 GL_EXT_texture_query_lod GL_EXT_texture_rg GL_EXT_texture_shadow_lod GL_EXT_texture_sRGB_R8 GL_EXT_texture_sRGB_decode GL_EXT_texture_storage GL_EXT_texture_view GL_EXT_draw_transform_feedback GL_EXT_unpack_subimage GL_EXT_window_rectangles GL_KHR_context_flush_control GL_KHR_debug GL_EXT_memory_object GL_EXT_memory_object_fd GL_KHR_parallel_shader_compile GL_KHR_no_error GL_KHR_robust_buffer_access_behavior GL_KHR_robustness GL_EXT_semaphore GL_EXT_semaphore_fd GL_NV_timeline_semaphore GL_KHR_shader_subgroup GL_KHR_texture_compression_astc_ldr GL_KHR_texture_compression_astc_sliced_3d GL_KHR_texture_compression_astc_hdr GL_NV_bgr GL_NV_bindless_texture GL_NV_blend_equation_advanced GL_NV_conditional_render GL_NV_copy_buffer GL_NV_copy_image GL_NV_draw_buffers GL_NV_draw_instanced GL_NV_draw_texture GL_NV_draw_vulkan_image GL_NV_EGL_stream_consumer_external GL_NV_explicit_attrib_location GL_NV_fbo_color_attachments GL_NV_framebuffer_blit GL_NV_framebuffer_multisample GL_NV_generate_mipmap_sRGB GL_NV_instanced_arrays GL_NV_internalformat_sample_query GL_NV_gpu_shader5 GL_NV_image_formats GL_NV_occlusion_query_samples GL_NV_non_square_matrices GL_NV_pack_subimage GL_NV_packed_float GL_NV_packed_float_linear GL_NV_path_rendering GL_NV_pixel_buffer_object GL_NV_polygon_mode GL_NV_read_buffer GL_NV_read_depth GL_NV_read_depth_stencil GL_NV_read_stencil GL_NV_shader_noperspective_interpolation GL_NV_shader_subgroup_partitioned GL_NV_shadow_samplers_array GL_NV_shadow_samplers_cube GL_NV_sRGB_formats GL_NV_texture_array GL_NV_texture_barrier GL_NV_texture_border_clamp GL_NV_texture_compression_latc GL_NV_texture_compression_s3tc GL_NV_texture_compression_s3tc_update GL_NV_timer_query GL_NV_viewport_array GL_KHR_blend_equation_advanced GL_OES_compressed_ETC1_RGB8_texture GL_EXT_compressed_ETC1_RGB8_sub_texture GL_OES_depth24 GL_OES_depth32 GL_OES_depth_texture GL_OES_depth_texture_cube_map GL_OES_copy_image GL_OES_draw_buffers_indexed GL_OES_draw_elements_base_vertex GL_OES_texture_border_clamp GL_OES_tessellation_point_size GL_OES_tessellation_shader GL_OES_texture_buffer GL_OES_geometry_point_size GL_OES_geometry_shader GL_OES_gpu_shader5 GL_OES_shader_io_blocks GL_OES_texture_view GL_OES_primitive_bounding_box GL_OES_EGL_image GL_OES_EGL_image_external GL_OES_EGL_image_external_essl3 GL_OES_EGL_sync GL_OES_element_index_uint GL_OES_fbo_render_mipmap GL_OES_get_program_binary GL_OES_mapbuffer GL_OES_packed_depth_stencil GL_OES_rgb8_rgba8 GL_OES_sample_shading GL_OES_sample_variables GL_OES_shader_image_atomic GL_OES_shader_multisample_interpolation GL_OES_standard_derivatives GL_OES_surfaceless_context GL_OES_texture_cube_map_array GL_OES_texture_npot GL_OES_texture_float GL_OES_texture_float_linear GL_OES_texture_half_float GL_OES_texture_half_float_linear GL_OES_texture_stencil8 GL_OES_texture_storage_multisample_2d_array GL_OES_vertex_array_object GL_OES_vertex_half_float GL_OES_viewport_array GL_OVR_multiview GL_OVR_multiview2 GL_ANDROID_extension_pack_es31a [19:22:20.919] GL ES 3.2 - renderer features: read-back format: RGBA EGL Wayland extension: no [19:22:20.919] Using gl renderer [19:22:20.921] XCB-XKB not available during build [19:22:20.921] Registered plugin API 'weston_windowed_output_api_v1' of size 16 [19:22:20.921] Color manager: no-op [19:22:20.921] Output 'screen0' using color profile: built-in default sRGB SDR profile [19:22:20.921] Chosen EGL config details: id: 64 rgba: 8 8 8 0 buf: 24 dep: 0 stcl: 0 int: 0-8 type: win|pix|pbf vis_id: 0x2b [19:22:20.922] x11 output 1024x600, window id 136314886 [19:22:20.922] Output 'screen0' enabled with head(s) screen0 [19:22:20.922] Compositor capabilities: arbitrary surface rotation: yes screen capture uses y-flip: yes cursor planes: no arbitrary resolutions: no view mask clipping: yes explicit sync: no color operations: yes presentation clock: CLOCK_MONOTONIC_RAW, id 4 presentation clock resolution: 0.000000001 s [19:22:20.922] Loading module '/home/yc/work/weston/install/lib/x86_64-linux-gnu/weston/ivi-shell.so' [19:22:20.923] Note: support for the deprecated wl_shell interface is disabled. If a legacy client still needs it, it can be re-enabled by passing -Ddeprecated-wl-shell=true to Meson when building Weston. [19:22:20.923] Registered plugin API 'ivi_layout_api_v1' of size 376 [19:22:20.923] Loading module '/home/yc/work/weston/install/lib/x86_64-linux-gnu/weston/hmi-controller.so' [19:22:20.923] launching '/home/yc/work/weston/install/libexec/weston-ivi-shell-user-interface' 如果要用DRM作为backend，需要先切换到虚拟终端Ctrl+Alt+F4 /F3，再运行weston -B=drm-backend.so，测试结束后切回ubuntu 图形界面：Ctrl+Alt+F2 weston -B=drm-backend.so 如果不切换终端 会出现以下错误： logind: cannot take control over session 2，ubuntu默认图形界面是session2，编译的weston程序应该是没有权限，需要换个会话。 $ weston -B=drm-backend.so Date: 2022-03-01 CST [09:48:24.541] weston 10.0.90 https://wayland.freedesktop.org Bug reports to: https://gitlab.freedesktop.org/wayland/weston/issues/ Build: 10.0.0-45-g08dbd29e [09:48:24.541] Command line: weston -B=drm-backend.so [09:48:24.541] OS: Linux, 5.13.0-30-generic, #33~20.04.1-Ubuntu SMP Mon Feb 7 14:25:10 UTC 2022, x86_64 [09:48:24.541] Flight recorder: enabled [09:48:24.541] Using config file '/home/yc/.config/weston.ini' [09:48:24.541] Output repaint window is 7 ms maximum. [09:48:24.541] Loading module '/home/yc/work/weston/install/lib/x86_64-linux-gnu/libweston-11/drm-backend.so' [09:48:24.542] initializing drm backend [09:48:24.542] Trying logind launcher... [09:48:24.544] logind: cannot take control over session 2 [09:48:24.544] logind: cannot setup systemd-logind helper error: (Input/output error), using legacy fallback [09:48:24.544] Trying weston_launch launcher... [09:48:24.544] could not get launcher fd from env [09:48:24.544] Trying direct launcher... [09:48:24.544] fatal: drm backend should be run using weston-launch binary, or your system should provide the logind D-Bus API. [09:48:24.544] fatal: failed to create compositor backend Internal warning: debug scope 'drm-backend' has not been destroyed. Tips： ubuntu下查看会话 loginctl list-sessions SESSION UID USER SEAT TTY 197 1000 yc seat0 tty3 2 1000 yc seat0 tty2 c1 125 gdm seat0 tty1 3 sessions listed. 关闭会话：loginctl kill-session 197 5.3. Reference https://en.wikipedia.org/wiki/Wayland_(display_server_protocol) Wayland/Weston 启动方式简介_hexiaolong2009的专栏-CSDN博客_weston 6. https://fossies.org/ 网站 看开源项目的类图：比如weston https://fossies.org/dox/weston-13.0.3/structwayland__input.html 所有的项目： https://fossies.org/dox/newest.html https://fossies.org/dox/all.html#A 开源代码下载 https://fossies.org/ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"CheckList.html":{"url":"CheckList.html","title":"Check List","keywords":"","body":"1. Daily checkList1. Daily checkList 牵引 ------追求 冥想--15min 身体： 十个俯卧撑 十一点闹钟，关灯光 一直努力在弄环境，追求最好的工具。----> 反而把“主”弄丢了，技术本身 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"DRM系列_html.html":{"url":"DRM系列_html.html","title":"DRM系列_html","keywords":"","body":"1. 目录2. DRM系列文章3. drm-kms调试手段---modetest4. 技巧之保存离线网页 目录 DRM系列文章 drm-kms调试手段---modetest 技巧之保存离线网页 1. 目录 2. DRM系列文章 图显系统DRM CRTC完全解析-CSDN博客.html DRM全解析 —— plane详解（1）_framebuffer与plane的区别-CSDN博客.html DRM全解析 —— CRTC详解（1）-CSDN博客.html 3. drm-kms调试手段---modetest DRM 参考： https://blog.csdn.net/weixin_35723192/article/details/135088802 modetest https://blog.csdn.net/gjioui123/article/details/129903320 modetest工具测试(linux-5.10) 4. 技巧之保存离线网页 1、防止离线网页自动跳转，尤其csdn ----------------> 方法： 用记录本 或 其它文件编辑 软件 打开主页面， 搜索 window.location.href， 把那一段 注释掉 就OK了！ 2、 注意：保存离线html前，折叠的内容都要打开 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"修.html":{"url":"修.html","title":"修","keywords":"","body":"1. 减小内耗2. 白骨观 减小内耗 白骨观 [TOC] 1. 减小内耗 1、自己与自己-------后悔、焦虑 2、与最亲近的人---------如果无法沟通，直接不说 亲近的人，尽量有效沟通 3、 2. 白骨观 白骨观是佛家修持法之一， 为佛教五门禅法之一种，通常由不净观、白骨观、白骨生肌和白骨流光四步组成。主要的目的是息灭对色身的贪恋。佛法的的修持讲色空不二，非空非有、亦空亦有。实际上修气脉，是从有进手，证得空相，最后达亦空亦有的境界。有和空是无差别的。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"老罗Android之旅系列课件.html":{"url":"老罗Android之旅系列课件.html","title":"老罗Android之旅系列课件","keywords":"","body":" Android应用程序输入事件处理机制.pdf Android应用程序资源管理框架.pdf Android硬件抽象层HAL.pdf Android专用驱动.pdf Android组件设计思想.pdf APK防反编译技术.pdf Dalvik虚拟机.pdf Android安全机制.pdf Android视频硬解稳定性问题探讨和处理 .pdf Android系统架构概述.pdf Android应用程序UI架构.pdf Android应用程序进程管理.pdf console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}